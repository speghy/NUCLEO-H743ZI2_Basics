
UsbUsage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c184  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800c41c  0800c41c  0000d41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c4ac  0800c4ac  0000d4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c4b4  0800c4b4  0000d4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c4b8  0800c4b8  0000d4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  0800c4bc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000104  0800c5c0  0000e104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000164  0800c620  0000e164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de8  240001c4  0800c680  0000e1c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001fac  0800c680  0000efac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e1c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e3e  00000000  00000000  0000e1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004100  00000000  00000000  0002f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00033130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107b  00000000  00000000  000346b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a78b  00000000  00000000  0003572b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecb4  00000000  00000000  0006feb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016439f  00000000  00000000  0008eb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f2f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a30  00000000  00000000  001f2f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001f897c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001c4 	.word	0x240001c4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c404 	.word	0x0800c404

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001c8 	.word	0x240001c8
 80002d4:	0800c404 	.word	0x0800c404

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fd3f 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f825 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f98d 	bl	80008f4 <MX_GPIO_Init>
  MX_ETH_Init();
 80005da:	f000 f89f 	bl	800071c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f93d 	bl	800085c <MX_USART3_UART_Init>
  MX_USART2_Init();
 80005e2:	f000 f8e7 	bl	80007b4 <MX_USART2_Init>
  MX_USB_DEVICE_Init();
 80005e6:	f00b f975 	bl	800b8d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  uint8_t testDataToSend[8];
    for (uint8_t i = 0; i < 8; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	e008      	b.n	8000602 <main+0x3a>
    {
      testDataToSend[i] = i;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	3310      	adds	r3, #16
 80005f4:	443b      	add	r3, r7
 80005f6:	7bfa      	ldrb	r2, [r7, #15]
 80005f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 8; i++)
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3301      	adds	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	2b07      	cmp	r3, #7
 8000606:	d9f3      	bls.n	80005f0 <main+0x28>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800060c:	f000 fdb2 	bl	8001174 <HAL_Delay>
	  CDC_Transmit_FS(testDataToSend, 8);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2108      	movs	r1, #8
 8000614:	4618      	mov	r0, r3
 8000616:	f00b fa55 	bl	800bac4 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800061a:	bf00      	nop
 800061c:	e7f4      	b.n	8000608 <main+0x40>
	...

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	@ 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00b febc 	bl	800c3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00b feb6 	bl	800c3ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000640:	2002      	movs	r0, #2
 8000642:	f002 ff87 	bl	8003554 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <SystemClock_Config+0xf4>)
 800064c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800064e:	4a31      	ldr	r2, [pc, #196]	@ (8000714 <SystemClock_Config+0xf4>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <SystemClock_Config+0xf4>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <SystemClock_Config+0xf8>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a2b      	ldr	r2, [pc, #172]	@ (8000718 <SystemClock_Config+0xf8>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xf8>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067c:	bf00      	nop
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <SystemClock_Config+0xf8>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068a:	d1f8      	bne.n	800067e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800068c:	2321      	movs	r3, #33	@ 0x21
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	2302      	movs	r3, #2
 80006a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006a6:	2318      	movs	r3, #24
 80006a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006ae:	2303      	movs	r3, #3
 80006b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b6:	230c      	movs	r3, #12
 80006b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 ff8e 	bl	80035e8 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006d2:	f000 f9eb 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	233f      	movs	r3, #63	@ 0x3f
 80006d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2303      	movs	r3, #3
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80006de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fbcd 	bl	8003e9c <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000708:	f000 f9d0 	bl	8000aac <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3770      	adds	r7, #112	@ 0x70
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58000400 	.word	0x58000400
 8000718:	58024800 	.word	0x58024800

0800071c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000720:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <MX_ETH_Init+0x80>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <MX_ETH_Init+0x84>)
 8000724:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_ETH_Init+0x88>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_ETH_Init+0x88>)
 800072e:	2280      	movs	r2, #128	@ 0x80
 8000730:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_ETH_Init+0x88>)
 8000734:	22e1      	movs	r2, #225	@ 0xe1
 8000736:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_ETH_Init+0x88>)
 800073a:	2200      	movs	r2, #0
 800073c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_ETH_Init+0x88>)
 8000740:	2200      	movs	r2, #0
 8000742:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_ETH_Init+0x88>)
 8000746:	2200      	movs	r2, #0
 8000748:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_ETH_Init+0x80>)
 800074c:	4a15      	ldr	r2, [pc, #84]	@ (80007a4 <MX_ETH_Init+0x88>)
 800074e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <MX_ETH_Init+0x80>)
 8000752:	2201      	movs	r2, #1
 8000754:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_ETH_Init+0x80>)
 8000758:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <MX_ETH_Init+0x8c>)
 800075a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_ETH_Init+0x80>)
 800075e:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <MX_ETH_Init+0x90>)
 8000760:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_ETH_Init+0x80>)
 8000764:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000768:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_ETH_Init+0x80>)
 800076c:	f000 fe56 	bl	800141c <HAL_ETH_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000776:	f000 f999 	bl	8000aac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800077a:	2238      	movs	r2, #56	@ 0x38
 800077c:	2100      	movs	r1, #0
 800077e:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_ETH_Init+0x94>)
 8000780:	f00b fe14 	bl	800c3ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_ETH_Init+0x94>)
 8000786:	2221      	movs	r2, #33	@ 0x21
 8000788:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_ETH_Init+0x94>)
 800078c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000790:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000792:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_ETH_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	24000218 	.word	0x24000218
 80007a0:	40028000 	.word	0x40028000
 80007a4:	240003bc 	.word	0x240003bc
 80007a8:	24000164 	.word	0x24000164
 80007ac:	24000104 	.word	0x24000104
 80007b0:	240001e0 	.word	0x240001e0

080007b4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80007b8:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007ba:	4a27      	ldr	r2, [pc, #156]	@ (8000858 <MX_USART2_Init+0xa4>)
 80007bc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80007be:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80007c6:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80007cc:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80007fc:	4815      	ldr	r0, [pc, #84]	@ (8000854 <MX_USART2_Init+0xa0>)
 80007fe:	f006 fde1 	bl	80073c4 <HAL_USART_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8000808:	f000 f950 	bl	8000aac <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4811      	ldr	r0, [pc, #68]	@ (8000854 <MX_USART2_Init+0xa0>)
 8000810:	f007 fc49 	bl	80080a6 <HAL_USARTEx_SetTxFifoThreshold>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 800081a:	f000 f947 	bl	8000aac <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_USART2_Init+0xa0>)
 8000822:	f007 fc7e 	bl	8008122 <HAL_USARTEx_SetRxFifoThreshold>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 800082c:	f000 f93e 	bl	8000aac <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8000830:	4808      	ldr	r0, [pc, #32]	@ (8000854 <MX_USART2_Init+0xa0>)
 8000832:	f007 fbff 	bl	8008034 <HAL_USARTEx_DisableFifoMode>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f936 	bl	8000aac <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_USART2_Init+0xa0>)
 8000842:	f007 fba2 	bl	8007f8a <HAL_USARTEx_EnableSlaveMode>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_Init+0x9c>
  {
    Error_Handler();
 800084c:	f000 f92e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	240002c8 	.word	0x240002c8
 8000858:	40004400 	.word	0x40004400

0800085c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000862:	4a23      	ldr	r2, [pc, #140]	@ (80008f0 <MX_USART3_UART_Init+0x94>)
 8000864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a4:	4811      	ldr	r0, [pc, #68]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008a6:	f005 fcb1 	bl	800620c <HAL_UART_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f8fc 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	480d      	ldr	r0, [pc, #52]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008b8:	f006 fcb9 	bl	800722e <HAL_UARTEx_SetTxFifoThreshold>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008c2:	f000 f8f3 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008ca:	f006 fcee 	bl	80072aa <HAL_UARTEx_SetRxFifoThreshold>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f8ea 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008da:	f006 fc6f 	bl	80071bc <HAL_UARTEx_DisableFifoMode>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f8e2 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000328 	.word	0x24000328
 80008f0:	40004800 	.word	0x40004800

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b62      	ldr	r3, [pc, #392]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	4a60      	ldr	r2, [pc, #384]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000928:	4b5a      	ldr	r3, [pc, #360]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	4a59      	ldr	r2, [pc, #356]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000938:	4b56      	ldr	r3, [pc, #344]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b53      	ldr	r3, [pc, #332]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	4a51      	ldr	r2, [pc, #324]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000956:	4b4f      	ldr	r3, [pc, #316]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b4b      	ldr	r3, [pc, #300]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	4a4a      	ldr	r2, [pc, #296]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000974:	4b47      	ldr	r3, [pc, #284]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b44      	ldr	r3, [pc, #272]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	4a42      	ldr	r2, [pc, #264]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000992:	4b40      	ldr	r3, [pc, #256]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a6:	4a3b      	ldr	r2, [pc, #236]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b0:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009be:	4b35      	ldr	r3, [pc, #212]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	4a33      	ldr	r2, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_GPIO_Init+0x1a0>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009e2:	482d      	ldr	r0, [pc, #180]	@ (8000a98 <MX_GPIO_Init+0x1a4>)
 80009e4:	f001 fafe 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ee:	482b      	ldr	r0, [pc, #172]	@ (8000a9c <MX_GPIO_Init+0x1a8>)
 80009f0:	f001 faf8 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	4829      	ldr	r0, [pc, #164]	@ (8000aa0 <MX_GPIO_Init+0x1ac>)
 80009fa:	f001 faf3 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4824      	ldr	r0, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x1b0>)
 8000a14:	f001 f936 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a18:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4819      	ldr	r0, [pc, #100]	@ (8000a98 <MX_GPIO_Init+0x1a4>)
 8000a32:	f001 f927 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <MX_GPIO_Init+0x1a8>)
 8000a50:	f001 f918 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480f      	ldr	r0, [pc, #60]	@ (8000aa8 <MX_GPIO_Init+0x1b4>)
 8000a6a:	f001 f90b 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_GPIO_Init+0x1ac>)
 8000a86:	f001 f8fd 	bl	8001c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	@ 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	58024400 	.word	0x58024400
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58020c00 	.word	0x58020c00
 8000aa0:	58021000 	.word	0x58021000
 8000aa4:	58020800 	.word	0x58020800
 8000aa8:	58021800 	.word	0x58021800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <HAL_MspInit+0x30>)
 8000ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ac4:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x30>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_MspInit+0x30>)
 8000ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	58024400 	.word	0x58024400

08000aec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a59      	ldr	r2, [pc, #356]	@ (8000c70 <HAL_ETH_MspInit+0x184>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	f040 80ab 	bne.w	8000c66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b10:	4b58      	ldr	r3, [pc, #352]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b16:	4a57      	ldr	r2, [pc, #348]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b20:	4b54      	ldr	r3, [pc, #336]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b2e:	4b51      	ldr	r3, [pc, #324]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b34:	4a4f      	ldr	r2, [pc, #316]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b4c:	4b49      	ldr	r3, [pc, #292]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b52:	4a48      	ldr	r2, [pc, #288]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b5c:	4b45      	ldr	r3, [pc, #276]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b42      	ldr	r3, [pc, #264]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	4a40      	ldr	r2, [pc, #256]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b3a      	ldr	r3, [pc, #232]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	4a39      	ldr	r2, [pc, #228]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b98:	4b36      	ldr	r3, [pc, #216]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	4a31      	ldr	r2, [pc, #196]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bca:	4a2a      	ldr	r2, [pc, #168]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000be2:	2332      	movs	r3, #50	@ 0x32
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481e      	ldr	r0, [pc, #120]	@ (8000c78 <HAL_ETH_MspInit+0x18c>)
 8000bfe:	f001 f841 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c02:	2386      	movs	r3, #134	@ 0x86
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c12:	230b      	movs	r3, #11
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <HAL_ETH_MspInit+0x190>)
 8000c1e:	f001 f831 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4810      	ldr	r0, [pc, #64]	@ (8000c80 <HAL_ETH_MspInit+0x194>)
 8000c40:	f001 f820 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c44:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c56:	230b      	movs	r3, #11
 8000c58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <HAL_ETH_MspInit+0x198>)
 8000c62:	f001 f80f 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	@ 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40028000 	.word	0x40028000
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020000 	.word	0x58020000
 8000c80:	58020400 	.word	0x58020400
 8000c84:	58021800 	.word	0x58021800

08000c88 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0bc      	sub	sp, #240	@ 0xf0
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 0318 	add.w	r3, r7, #24
 8000ca4:	22c0      	movs	r2, #192	@ 0xc0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00b fb7f 	bl	800c3ac <memset>
  if(husart->Instance==USART2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a38      	ldr	r2, [pc, #224]	@ (8000d94 <HAL_USART_MspInit+0x10c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d169      	bne.n	8000d8c <HAL_USART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cb8:	f04f 0202 	mov.w	r2, #2
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fc70 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8000cda:	f7ff fee7 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cee:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	4a1d      	ldr	r2, [pc, #116]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <HAL_USART_MspInit+0x110>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d38:	2318      	movs	r3, #24
 8000d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d50:	2307      	movs	r3, #7
 8000d52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480f      	ldr	r0, [pc, #60]	@ (8000d9c <HAL_USART_MspInit+0x114>)
 8000d5e:	f000 ff91 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d62:	2320      	movs	r3, #32
 8000d64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <HAL_USART_MspInit+0x118>)
 8000d88:	f000 ff7c 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d8c:	bf00      	nop
 8000d8e:	37f0      	adds	r7, #240	@ 0xf0
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40004400 	.word	0x40004400
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58020000 	.word	0x58020000
 8000da0:	58020c00 	.word	0x58020c00

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ba      	sub	sp, #232	@ 0xe8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	22c0      	movs	r2, #192	@ 0xc0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00b faf1 	bl	800c3ac <memset>
  if(huart->Instance==USART3)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a27      	ldr	r2, [pc, #156]	@ (8000e6c <HAL_UART_MspInit+0xc8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d146      	bne.n	8000e62 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd4:	f04f 0202 	mov.w	r2, #2
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fbe2 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000df6:	f7ff fe59 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <HAL_UART_MspInit+0xcc>)
 8000dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e00:	4a1b      	ldr	r2, [pc, #108]	@ (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a14      	ldr	r2, [pc, #80]	@ (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e50:	2307      	movs	r3, #7
 8000e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <HAL_UART_MspInit+0xd0>)
 8000e5e:	f000 ff11 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e62:	bf00      	nop
 8000e64:	37e8      	adds	r7, #232	@ 0xe8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58020c00 	.word	0x58020c00

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <UsageFault_Handler+0x4>

08000ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ece:	f000 f931 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <OTG_FS_IRQHandler+0x10>)
 8000ede:	f001 f9db 	bl	8002298 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	240018a8 	.word	0x240018a8

08000eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <SystemInit+0xe4>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ef6:	4a36      	ldr	r2, [pc, #216]	@ (8000fd0 <SystemInit+0xe4>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f00:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <SystemInit+0xe8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	2b06      	cmp	r3, #6
 8000f0a:	d807      	bhi.n	8000f1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f0c:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <SystemInit+0xe8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 030f 	bic.w	r3, r3, #15
 8000f14:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd4 <SystemInit+0xe8>)
 8000f16:	f043 0307 	orr.w	r3, r3, #7
 8000f1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <SystemInit+0xec>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd8 <SystemInit+0xec>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f28:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <SystemInit+0xec>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <SystemInit+0xec>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4929      	ldr	r1, [pc, #164]	@ (8000fd8 <SystemInit+0xec>)
 8000f34:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <SystemInit+0xf0>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <SystemInit+0xe8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d007      	beq.n	8000f56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <SystemInit+0xe8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f023 030f 	bic.w	r3, r3, #15
 8000f4e:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <SystemInit+0xe8>)
 8000f50:	f043 0307 	orr.w	r3, r3, #7
 8000f54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f56:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <SystemInit+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <SystemInit+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <SystemInit+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <SystemInit+0xec>)
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <SystemInit+0xf4>)
 8000f6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <SystemInit+0xec>)
 8000f70:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <SystemInit+0xf8>)
 8000f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <SystemInit+0xec>)
 8000f76:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe8 <SystemInit+0xfc>)
 8000f78:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <SystemInit+0xec>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <SystemInit+0xec>)
 8000f82:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <SystemInit+0xfc>)
 8000f84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f86:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <SystemInit+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <SystemInit+0xec>)
 8000f8e:	4a16      	ldr	r2, [pc, #88]	@ (8000fe8 <SystemInit+0xfc>)
 8000f90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <SystemInit+0xec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <SystemInit+0xec>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <SystemInit+0xec>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <SystemInit+0xec>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <SystemInit+0x100>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <SystemInit+0x104>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fb6:	d202      	bcs.n	8000fbe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <SystemInit+0x108>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <SystemInit+0x10c>)
 8000fc0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fc4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	52002000 	.word	0x52002000
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fe0:	02020200 	.word	0x02020200
 8000fe4:	01ff0000 	.word	0x01ff0000
 8000fe8:	01010280 	.word	0x01010280
 8000fec:	5c001000 	.word	0x5c001000
 8000ff0:	ffff0000 	.word	0xffff0000
 8000ff4:	51008108 	.word	0x51008108
 8000ff8:	52004000 	.word	0x52004000

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001000:	f7ff ff74 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f00b f9c7 	bl	800c3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff facb 	bl	80005c8 <main>
  bx  lr
 8001032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001038:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800103c:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8001040:	0800c4bc 	.word	0x0800c4bc
  ldr r2, =_sbss
 8001044:	240001c4 	.word	0x240001c4
  ldr r4, =_ebss
 8001048:	24001fac 	.word	0x24001fac

0800104c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC3_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 f9a0 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800105c:	f003 f8d4 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8001060:	4602      	mov	r2, r0
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_Init+0x68>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	4913      	ldr	r1, [pc, #76]	@ (80010bc <HAL_Init+0x6c>)
 800106e:	5ccb      	ldrb	r3, [r1, r3]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_Init+0x68>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <HAL_Init+0x6c>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_Init+0x70>)
 8001092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <HAL_Init+0x74>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f814 	bl	80010c8 <HAL_InitTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e002      	b.n	80010b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010aa:	f7ff fd05 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	58024400 	.word	0x58024400
 80010bc:	0800c464 	.word	0x0800c464
 80010c0:	24000004 	.word	0x24000004
 80010c4:	24000000 	.word	0x24000000

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_InitTick+0x60>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e021      	b.n	8001120 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_InitTick+0x64>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f985 	bl	8001402 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f94f 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_InitTick+0x68>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2400000c 	.word	0x2400000c
 800112c:	24000000 	.word	0x24000000
 8001130:	24000008 	.word	0x24000008

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2400000c 	.word	0x2400000c
 8001158:	240003c4 	.word	0x240003c4

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	240003c4 	.word	0x240003c4

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2400000c 	.word	0x2400000c

080011bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetREVID+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0c1b      	lsrs	r3, r3, #16
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	5c001000 	.word	0x5c001000

080011d4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80011e4:	4904      	ldr	r1, [pc, #16]	@ (80011f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	58000400 	.word	0x58000400

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	4313      	orrs	r3, r2
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	05fa0000 	.word	0x05fa0000

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	@ (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff40 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff90 	bl	80012f0 <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5f 	bl	800129c <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff33 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa4 	bl	8001358 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0e3      	b.n	80015f6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001434:	2b00      	cmp	r3, #0
 8001436:	d106      	bne.n	8001446 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2223      	movs	r2, #35	@ 0x23
 800143c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fb53 	bl	8000aec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b6e      	ldr	r3, [pc, #440]	@ (8001600 <HAL_ETH_Init+0x1e4>)
 8001448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800144c:	4a6c      	ldr	r2, [pc, #432]	@ (8001600 <HAL_ETH_Init+0x1e4>)
 800144e:	f043 0302 	orr.w	r3, r3, #2
 8001452:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001456:	4b6a      	ldr	r3, [pc, #424]	@ (8001600 <HAL_ETH_Init+0x1e4>)
 8001458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7a1b      	ldrb	r3, [r3, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff feb1 	bl	80011d4 <HAL_SYSCFG_ETHInterfaceSelect>
 8001472:	e003      	b.n	800147c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001474:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001478:	f7ff feac 	bl	80011d4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800147c:	4b61      	ldr	r3, [pc, #388]	@ (8001604 <HAL_ETH_Init+0x1e8>)
 800147e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001496:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001498:	f7ff fe60 	bl	800115c <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800149e:	e011      	b.n	80014c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014a0:	f7ff fe5c 	bl	800115c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ae:	d909      	bls.n	80014c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2204      	movs	r2, #4
 80014b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	22e0      	movs	r2, #224	@ 0xe0
 80014bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e098      	b.n	80015f6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1e4      	bne.n	80014a0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f89e 	bl	8001618 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014dc:	f003 f80e 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a49      	ldr	r2, [pc, #292]	@ (8001608 <HAL_ETH_Init+0x1ec>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	0c9a      	lsrs	r2, r3, #18
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3a01      	subs	r2, #1
 80014f0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fa81 	bl	80019fc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001502:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001506:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001512:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001516:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	22e0      	movs	r2, #224	@ 0xe0
 8001532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e05d      	b.n	80015f6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001542:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <HAL_ETH_Init+0x1f0>)
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6952      	ldr	r2, [r2, #20]
 800154e:	0051      	lsls	r1, r2, #1
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	430b      	orrs	r3, r1
 8001556:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800155a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fae9 	bl	8001b36 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fb2f 	bl	8001bc8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	3305      	adds	r3, #5
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	021a      	lsls	r2, r3, #8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	3303      	adds	r3, #3
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	061a      	lsls	r2, r3, #24
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	3302      	adds	r3, #2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	3301      	adds	r3, #1
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015b6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015b8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_ETH_Init+0x1f4>)
 80015ca:	430b      	orrs	r3, r1
 80015cc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <HAL_ETH_Init+0x1f8>)
 80015de:	430b      	orrs	r3, r1
 80015e0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2210      	movs	r2, #16
 80015f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	58024400 	.word	0x58024400
 8001604:	58000400 	.word	0x58000400
 8001608:	431bde83 	.word	0x431bde83
 800160c:	ffff8001 	.word	0xffff8001
 8001610:	0c020060 	.word	0x0c020060
 8001614:	0c20c000 	.word	0x0c20c000

08001618 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001628:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001630:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001632:	f002 ff63 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8001636:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4a1a      	ldr	r2, [pc, #104]	@ (80016a4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d804      	bhi.n	800164a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e022      	b.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d204      	bcs.n	800165c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e019      	b.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4a13      	ldr	r2, [pc, #76]	@ (80016ac <HAL_ETH_SetMDIOClockRange+0x94>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d915      	bls.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d804      	bhi.n	8001676 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e00c      	b.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4a0e      	ldr	r2, [pc, #56]	@ (80016b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d804      	bhi.n	8001688 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e003      	b.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800168e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	02160ebf 	.word	0x02160ebf
 80016a8:	03938700 	.word	0x03938700
 80016ac:	05f5e0ff 	.word	0x05f5e0ff
 80016b0:	08f0d17f 	.word	0x08f0d17f
 80016b4:	0ee6b27f 	.word	0x0ee6b27f

080016b8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80016ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80016d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	7b1b      	ldrb	r3, [r3, #12]
 80016d8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	7b5b      	ldrb	r3, [r3, #13]
 80016e0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	7b9b      	ldrb	r3, [r3, #14]
 80016e8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	7bdb      	ldrb	r3, [r3, #15]
 80016f0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	7c12      	ldrb	r2, [r2, #16]
 80016f8:	2a00      	cmp	r2, #0
 80016fa:	d102      	bne.n	8001702 <ETH_SetMACConfig+0x4a>
 80016fc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001700:	e000      	b.n	8001704 <ETH_SetMACConfig+0x4c>
 8001702:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001704:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	7c52      	ldrb	r2, [r2, #17]
 800170a:	2a00      	cmp	r2, #0
 800170c:	d102      	bne.n	8001714 <ETH_SetMACConfig+0x5c>
 800170e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001712:	e000      	b.n	8001716 <ETH_SetMACConfig+0x5e>
 8001714:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001716:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	7c9b      	ldrb	r3, [r3, #18]
 800171c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800171e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001724:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800172a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	7f1b      	ldrb	r3, [r3, #28]
 8001730:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001732:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	7f5b      	ldrb	r3, [r3, #29]
 8001738:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800173a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	7f92      	ldrb	r2, [r2, #30]
 8001740:	2a00      	cmp	r2, #0
 8001742:	d102      	bne.n	800174a <ETH_SetMACConfig+0x92>
 8001744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001748:	e000      	b.n	800174c <ETH_SetMACConfig+0x94>
 800174a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800174c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	7fdb      	ldrb	r3, [r3, #31]
 8001752:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001754:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	f892 2020 	ldrb.w	r2, [r2, #32]
 800175c:	2a00      	cmp	r2, #0
 800175e:	d102      	bne.n	8001766 <ETH_SetMACConfig+0xae>
 8001760:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001764:	e000      	b.n	8001768 <ETH_SetMACConfig+0xb0>
 8001766:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001768:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800176e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001776:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001778:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b56      	ldr	r3, [pc, #344]	@ (80018e4 <ETH_SetMACConfig+0x22c>)
 800178a:	4013      	ands	r3, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	430b      	orrs	r3, r1
 8001794:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017a2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017ac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017b6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80017c0:	2a00      	cmp	r2, #0
 80017c2:	d102      	bne.n	80017ca <ETH_SetMACConfig+0x112>
 80017c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017c8:	e000      	b.n	80017cc <ETH_SetMACConfig+0x114>
 80017ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017cc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <ETH_SetMACConfig+0x230>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	430b      	orrs	r3, r1
 80017e8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017f0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4b3a      	ldr	r3, [pc, #232]	@ (80018ec <ETH_SetMACConfig+0x234>)
 8001802:	4013      	ands	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	430b      	orrs	r3, r1
 800180c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001814:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800181a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001822:	2a00      	cmp	r2, #0
 8001824:	d101      	bne.n	800182a <ETH_SetMACConfig+0x172>
 8001826:	2280      	movs	r2, #128	@ 0x80
 8001828:	e000      	b.n	800182c <ETH_SetMACConfig+0x174>
 800182a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800182c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001832:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800183e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001842:	4013      	ands	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	68f9      	ldr	r1, [r7, #12]
 800184a:	430b      	orrs	r3, r1
 800184c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001854:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800185c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	f023 0103 	bic.w	r1, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	430a      	orrs	r2, r1
 8001876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001882:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d101      	bne.n	80018a6 <ETH_SetMACConfig+0x1ee>
 80018a2:	2240      	movs	r2, #64	@ 0x40
 80018a4:	e000      	b.n	80018a8 <ETH_SetMACConfig+0x1f0>
 80018a6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80018a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80018b0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80018ba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80018bc:	4313      	orrs	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80018c8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	00048083 	.word	0x00048083
 80018e8:	c0f88000 	.word	0xc0f88000
 80018ec:	fffffef0 	.word	0xfffffef0

080018f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b38      	ldr	r3, [pc, #224]	@ (80019e8 <ETH_SetDMAConfig+0xf8>)
 8001906:	4013      	ands	r3, r2
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	6811      	ldr	r1, [r2, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001916:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	791b      	ldrb	r3, [r3, #4]
 800191c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001922:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	7b1b      	ldrb	r3, [r3, #12]
 8001928:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <ETH_SetDMAConfig+0xfc>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	430b      	orrs	r3, r1
 8001944:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001948:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	7b5b      	ldrb	r3, [r3, #13]
 800194e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001954:	4313      	orrs	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001960:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <ETH_SetDMAConfig+0x100>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	430b      	orrs	r3, r1
 8001970:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001974:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	7d1b      	ldrb	r3, [r3, #20]
 8001980:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001982:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	7f5b      	ldrb	r3, [r3, #29]
 8001988:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001996:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <ETH_SetDMAConfig+0x104>)
 800199c:	4013      	ands	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019aa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	7f1b      	ldrb	r3, [r3, #28]
 80019b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <ETH_SetDMAConfig+0x108>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	430b      	orrs	r3, r1
 80019d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019d8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	ffff87fd 	.word	0xffff87fd
 80019ec:	ffff2ffe 	.word	0xffff2ffe
 80019f0:	fffec000 	.word	0xfffec000
 80019f4:	ffc0efef 	.word	0xffc0efef
 80019f8:	7fc0ffff 	.word	0x7fc0ffff

080019fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0a4      	sub	sp, #144	@ 0x90
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001a54:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001a58:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a76:	2300      	movs	r3, #0
 8001a78:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a94:	2320      	movs	r3, #32
 8001a96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001aa6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001aac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ae0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fde6 	bl	80016b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001af0:	2301      	movs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b06:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b0a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b14:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b1c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4619      	mov	r1, r3
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fee1 	bl	80018f0 <ETH_SetDMAConfig>
}
 8001b2e:	bf00      	nop
 8001b30:	3790      	adds	r7, #144	@ 0x90
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e01d      	b.n	8001b80 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68d9      	ldr	r1, [r3, #12]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	3206      	adds	r2, #6
 8001b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d9de      	bls.n	8001b44 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b94:	461a      	mov	r2, r3
 8001b96:	2303      	movs	r3, #3
 8001b98:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e023      	b.n	8001c1e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6919      	ldr	r1, [r3, #16]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	3212      	adds	r2, #18
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d9d8      	bls.n	8001bd6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c5e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c72:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	@ 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c92:	4b89      	ldr	r3, [pc, #548]	@ (8001eb8 <HAL_GPIO_Init+0x234>)
 8001c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c96:	e194      	b.n	8001fc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8186 	beq.w	8001fbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d005      	beq.n	8001cc8 <HAL_GPIO_Init+0x44>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d130      	bne.n	8001d2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 0201 	and.w	r2, r3, #1
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d017      	beq.n	8001d66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d123      	bne.n	8001dba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0203 	and.w	r2, r3, #3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80e0 	beq.w	8001fbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <HAL_GPIO_Init+0x238>)
 8001dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e02:	4a2e      	ldr	r2, [pc, #184]	@ (8001ebc <HAL_GPIO_Init+0x238>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_GPIO_Init+0x238>)
 8001e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a29      	ldr	r2, [pc, #164]	@ (8001ec0 <HAL_GPIO_Init+0x23c>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a20      	ldr	r2, [pc, #128]	@ (8001ec4 <HAL_GPIO_Init+0x240>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d052      	beq.n	8001eec <HAL_GPIO_Init+0x268>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec8 <HAL_GPIO_Init+0x244>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_GPIO_Init+0x22e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1e      	ldr	r2, [pc, #120]	@ (8001ecc <HAL_GPIO_Init+0x248>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02b      	beq.n	8001eae <HAL_GPIO_Init+0x22a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <HAL_GPIO_Init+0x24c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d025      	beq.n	8001eaa <HAL_GPIO_Init+0x226>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed4 <HAL_GPIO_Init+0x250>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <HAL_GPIO_Init+0x222>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed8 <HAL_GPIO_Init+0x254>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x21e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1a      	ldr	r2, [pc, #104]	@ (8001edc <HAL_GPIO_Init+0x258>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_GPIO_Init+0x25c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x216>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a18      	ldr	r2, [pc, #96]	@ (8001ee4 <HAL_GPIO_Init+0x260>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a17      	ldr	r2, [pc, #92]	@ (8001ee8 <HAL_GPIO_Init+0x264>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x20e>
 8001e8e:	2309      	movs	r3, #9
 8001e90:	e02d      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001e92:	230a      	movs	r3, #10
 8001e94:	e02b      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001e96:	2308      	movs	r3, #8
 8001e98:	e029      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e027      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e025      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	e023      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e021      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e01f      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e01d      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e01b      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001eb6:	bf00      	nop
 8001eb8:	58000080 	.word	0x58000080
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	58000400 	.word	0x58000400
 8001ec4:	58020000 	.word	0x58020000
 8001ec8:	58020400 	.word	0x58020400
 8001ecc:	58020800 	.word	0x58020800
 8001ed0:	58020c00 	.word	0x58020c00
 8001ed4:	58021000 	.word	0x58021000
 8001ed8:	58021400 	.word	0x58021400
 8001edc:	58021800 	.word	0x58021800
 8001ee0:	58021c00 	.word	0x58021c00
 8001ee4:	58022000 	.word	0x58022000
 8001ee8:	58022400 	.word	0x58022400
 8001eec:	2300      	movs	r3, #0
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	f002 0203 	and.w	r2, r2, #3
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	4093      	lsls	r3, r2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001efe:	4938      	ldr	r1, [pc, #224]	@ (8001fe0 <HAL_GPIO_Init+0x35c>)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f ae63 	bne.w	8001c98 <HAL_GPIO_Init+0x14>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	3724      	adds	r7, #36	@ 0x24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	58000400 	.word	0x58000400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0fe      	b.n	8002226 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d106      	bne.n	8002042 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f009 fe7d 	bl	800bd3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f006 fa15 	bl	800847e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7c1a      	ldrb	r2, [r3, #16]
 800205c:	f88d 2000 	strb.w	r2, [sp]
 8002060:	3304      	adds	r3, #4
 8002062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002064:	f006 f8e6 	bl	8008234 <USB_CoreInit>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0d5      	b.n	8002226 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f006 fa0d 	bl	80084a0 <USB_SetCurrentMode>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0c6      	b.n	8002226 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e04a      	b.n	8002134 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3315      	adds	r3, #21
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3314      	adds	r3, #20
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	b298      	uxth	r0, r3
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	332e      	adds	r3, #46	@ 0x2e
 80020da:	4602      	mov	r2, r0
 80020dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3318      	adds	r3, #24
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	331c      	adds	r3, #28
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3320      	adds	r3, #32
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3324      	adds	r3, #36	@ 0x24
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3301      	adds	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	791b      	ldrb	r3, [r3, #4]
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	429a      	cmp	r2, r3
 800213c:	d3af      	bcc.n	800209e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e044      	b.n	80021ce <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	791b      	ldrb	r3, [r3, #4]
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3b5      	bcc.n	8002144 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7c1a      	ldrb	r2, [r3, #16]
 80021e0:	f88d 2000 	strb.w	r2, [sp]
 80021e4:	3304      	adds	r3, #4
 80021e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e8:	f006 f9a6 	bl	8008538 <USB_DevInit>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e013      	b.n	8002226 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7b1b      	ldrb	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f001 f96d 	bl	80034f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f007 f9e5 	bl	80095ee <USB_DevDisconnect>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_PCD_Start+0x1c>
 8002246:	2302      	movs	r3, #2
 8002248:	e022      	b.n	8002290 <HAL_PCD_Start+0x62>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f006 f8f0 	bl	800845c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f007 f993 	bl	80095ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b08d      	sub	sp, #52	@ 0x34
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f007 fa51 	bl	8009756 <USB_GetMode>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 84b9 	bne.w	8002c2e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f007 f9b5 	bl	8009630 <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 84af 	beq.w	8002c2c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f007 f9a2 	bl	8009630 <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d107      	bne.n	8002306 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f002 0202 	and.w	r2, r2, #2
 8002304:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f007 f990 	bl	8009630 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b10      	cmp	r3, #16
 8002318:	d161      	bne.n	80023de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0210 	bic.w	r2, r2, #16
 8002328:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f003 020f 	and.w	r2, r3, #15
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	0c5b      	lsrs	r3, r3, #17
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	2b02      	cmp	r3, #2
 8002354:	d124      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d035      	beq.n	80023ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800236c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002370:	b29b      	uxth	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	6a38      	ldr	r0, [r7, #32]
 8002376:	f006 ffc7 	bl	8009308 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002386:	441a      	add	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002398:	441a      	add	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	615a      	str	r2, [r3, #20]
 800239e:	e016      	b.n	80023ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	0c5b      	lsrs	r3, r3, #17
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d110      	bne.n	80023ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023b2:	2208      	movs	r2, #8
 80023b4:	4619      	mov	r1, r3
 80023b6:	6a38      	ldr	r0, [r7, #32]
 80023b8:	f006 ffa6 	bl	8009308 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c8:	441a      	add	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0210 	orr.w	r2, r2, #16
 80023dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f007 f924 	bl	8009630 <USB_ReadInterrupts>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80023f2:	f040 80a7 	bne.w	8002544 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f007 f929 	bl	8009656 <USB_ReadDevAllOutEpInterrupt>
 8002404:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002406:	e099      	b.n	800253c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 808e 	beq.w	8002530 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f007 f94d 	bl	80096be <USB_ReadDevOutEPInterrupt>
 8002424:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00c      	beq.n	800244a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800243c:	461a      	mov	r2, r3
 800243e:	2301      	movs	r3, #1
 8002440:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fecf 	bl	80031e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00c      	beq.n	800246e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	2308      	movs	r3, #8
 8002464:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 ffa5 	bl	80033b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	2310      	movs	r3, #16
 8002488:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d030      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249c:	2b80      	cmp	r3, #128	@ 0x80
 800249e:	d109      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	3304      	adds	r3, #4
 80024c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	78db      	ldrb	r3, [r3, #3]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d108      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2200      	movs	r2, #0
 80024d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	4619      	mov	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f009 fd52 	bl	800bf88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	2302      	movs	r3, #2
 80024f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250c:	461a      	mov	r2, r3
 800250e:	2320      	movs	r3, #32
 8002510:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002528:	461a      	mov	r2, r3
 800252a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800252e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	3301      	adds	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800253c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253e:	2b00      	cmp	r3, #0
 8002540:	f47f af62 	bne.w	8002408 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f007 f871 	bl	8009630 <USB_ReadInterrupts>
 800254e:	4603      	mov	r3, r0
 8002550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002558:	f040 80db 	bne.w	8002712 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f007 f892 	bl	800968a <USB_ReadDevAllInEpInterrupt>
 8002566:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800256c:	e0cd      	b.n	800270a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800256e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80c2 	beq.w	80026fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f007 f8b8 	bl	80096fa <USB_ReadDevInEPInterrupt>
 800258a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d057      	beq.n	8002646 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	2201      	movs	r2, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69f9      	ldr	r1, [r7, #28]
 80025b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025b6:	4013      	ands	r3, r2
 80025b8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025c6:	461a      	mov	r2, r3
 80025c8:	2301      	movs	r3, #1
 80025ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	799b      	ldrb	r3, [r3, #6]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d132      	bne.n	800263a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3320      	adds	r3, #32
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4403      	add	r3, r0
 80025f4:	331c      	adds	r3, #28
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4419      	add	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4403      	add	r3, r0
 8002608:	3320      	adds	r3, #32
 800260a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d113      	bne.n	800263a <HAL_PCD_IRQHandler+0x3a2>
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3324      	adds	r3, #36	@ 0x24
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d108      	bne.n	800263a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002632:	461a      	mov	r2, r3
 8002634:	2101      	movs	r1, #1
 8002636:	f007 f8c1 	bl	80097bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f009 fc1c 	bl	800be7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800265c:	461a      	mov	r2, r3
 800265e:	2308      	movs	r3, #8
 8002660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	4413      	add	r3, r2
 8002674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002678:	461a      	mov	r2, r3
 800267a:	2310      	movs	r3, #16
 800267c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002694:	461a      	mov	r2, r3
 8002696:	2340      	movs	r3, #64	@ 0x40
 8002698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d023      	beq.n	80026ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026a6:	6a38      	ldr	r0, [r7, #32]
 80026a8:	f006 f8a4 	bl	80087f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	3310      	adds	r3, #16
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	78db      	ldrb	r3, [r3, #3]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d108      	bne.n	80026da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2200      	movs	r2, #0
 80026cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f009 fc69 	bl	800bfac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026e6:	461a      	mov	r2, r3
 80026e8:	2302      	movs	r3, #2
 80026ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fce8 	bl	80030ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	3301      	adds	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800270a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f af2e 	bne.w	800256e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f006 ff8a 	bl	8009630 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002726:	d122      	bne.n	800276e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002742:	2b01      	cmp	r3, #1
 8002744:	d108      	bne.n	8002758 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800274e:	2100      	movs	r1, #0
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fef3 	bl	800353c <HAL_PCDEx_LPM_Callback>
 8002756:	e002      	b.n	800275e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f009 fc07 	bl	800bf6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800276c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f006 ff5c 	bl	8009630 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800277e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002782:	d112      	bne.n	80027aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d102      	bne.n	800279a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f009 fbc3 	bl	800bf20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f006 ff3e 	bl	8009630 <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027be:	d121      	bne.n	8002804 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80027ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d111      	bne.n	80027fe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	f003 020f 	and.w	r2, r3, #15
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027f4:	2101      	movs	r1, #1
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fea0 	bl	800353c <HAL_PCDEx_LPM_Callback>
 80027fc:	e002      	b.n	8002804 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f009 fb8e 	bl	800bf20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f006 ff11 	bl	8009630 <USB_ReadInterrupts>
 800280e:	4603      	mov	r3, r0
 8002810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002818:	f040 80b7 	bne.w	800298a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2110      	movs	r1, #16
 8002836:	4618      	mov	r0, r3
 8002838:	f005 ffdc 	bl	80087f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002840:	e046      	b.n	80028d0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800284e:	461a      	mov	r2, r3
 8002850:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002854:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002866:	0151      	lsls	r1, r2, #5
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	440a      	add	r2, r1
 800286c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002870:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002874:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002882:	461a      	mov	r2, r3
 8002884:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002888:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80028a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028ba:	0151      	lsls	r1, r2, #5
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	440a      	add	r2, r1
 80028c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80028c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028cc:	3301      	adds	r3, #1
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	791b      	ldrb	r3, [r3, #4]
 80028d4:	461a      	mov	r2, r3
 80028d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d8:	4293      	cmp	r3, r2
 80028da:	d3b2      	bcc.n	8002842 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80028ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7bdb      	ldrb	r3, [r3, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d016      	beq.n	8002926 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002908:	f043 030b 	orr.w	r3, r3, #11
 800290c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800291e:	f043 030b 	orr.w	r3, r3, #11
 8002922:	6453      	str	r3, [r2, #68]	@ 0x44
 8002924:	e015      	b.n	8002952 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002934:	4619      	mov	r1, r3
 8002936:	f242 032b 	movw	r3, #8235	@ 0x202b
 800293a:	4313      	orrs	r3, r2
 800293c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800294c:	f043 030b 	orr.w	r3, r3, #11
 8002950:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002960:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002964:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002974:	461a      	mov	r2, r3
 8002976:	f006 ff21 	bl	80097bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f006 fe4e 	bl	8009630 <USB_ReadInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800299a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299e:	d123      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f006 fee5 	bl	8009774 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f005 ff99 	bl	80088e6 <USB_GetDevSpeed>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681c      	ldr	r4, [r3, #0]
 80029c0:	f001 fd9c 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 80029c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029ca:	461a      	mov	r2, r3
 80029cc:	4620      	mov	r0, r4
 80029ce:	f005 fca3 	bl	8008318 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f009 fa7b 	bl	800bece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80029e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f006 fe1f 	bl	8009630 <USB_ReadInterrupts>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d10a      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f009 fa58 	bl	800beb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f002 0208 	and.w	r2, r2, #8
 8002a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f006 fe0a 	bl	8009630 <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b80      	cmp	r3, #128	@ 0x80
 8002a24:	d123      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a32:	2301      	movs	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a36:	e014      	b.n	8002a62 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fb08 	bl	800306c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	3301      	adds	r3, #1
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	791b      	ldrb	r3, [r3, #4]
 8002a66:	461a      	mov	r2, r3
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d3e4      	bcc.n	8002a38 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f006 fddc 	bl	8009630 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a82:	d13c      	bne.n	8002afe <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a84:	2301      	movs	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a88:	e02b      	b.n	8002ae2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d115      	bne.n	8002adc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ab0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da12      	bge.n	8002adc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3317      	adds	r3, #23
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fac8 	bl	800306c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	3301      	adds	r3, #1
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	791b      	ldrb	r3, [r3, #4]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d3cd      	bcc.n	8002a8a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f006 fd94 	bl	8009630 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b12:	d156      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b18:	e045      	b.n	8002ba6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d12e      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da2b      	bge.n	8002ba0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d121      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b9c:	6053      	str	r3, [r2, #4]
            break;
 8002b9e:	e008      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	461a      	mov	r2, r3
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d3b3      	bcc.n	8002b1a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f006 fd32 	bl	8009630 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd6:	d10a      	bne.n	8002bee <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f009 f9f9 	bl	800bfd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f006 fd1c 	bl	8009630 <USB_ReadInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d115      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f009 f9e9 	bl	800bfec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	e000      	b.n	8002c2e <HAL_PCD_IRQHandler+0x996>
      return;
 8002c2c:	bf00      	nop
    }
  }
}
 8002c2e:	3734      	adds	r7, #52	@ 0x34
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}

08002c34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_PCD_SetAddress+0x1a>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e012      	b.n	8002c74 <HAL_PCD_SetAddress+0x40>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f006 fc7b 	bl	8009560 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	70fb      	strb	r3, [r7, #3]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	803b      	strh	r3, [r7, #0]
 8002c92:	4613      	mov	r3, r2
 8002c94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da0f      	bge.n	8002cc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	705a      	strb	r2, [r3, #1]
 8002cc0:	e00f      	b.n	8002ce2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3304      	adds	r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cee:	883a      	ldrh	r2, [r7, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	78ba      	ldrb	r2, [r7, #2]
 8002cf8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d0c:	78bb      	ldrb	r3, [r7, #2]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d102      	bne.n	8002d18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_PCD_EP_Open+0xaa>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e00e      	b.n	8002d44 <HAL_PCD_EP_Open+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fdfb 	bl	8008930 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002d42:	7afb      	ldrb	r3, [r7, #11]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da0f      	bge.n	8002d80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	3310      	adds	r3, #16
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	705a      	strb	r2, [r3, #1]
 8002d7e:	e00f      	b.n	8002da0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 020f 	and.w	r2, r3, #15
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_PCD_EP_Close+0x6e>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e00e      	b.n	8002dd8 <HAL_PCD_EP_Close+0x8c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68f9      	ldr	r1, [r7, #12]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 fe39 	bl	8008a40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	460b      	mov	r3, r1
 8002dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4413      	add	r3, r2
 8002e06:	3304      	adds	r3, #4
 8002e08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e22:	7afb      	ldrb	r3, [r7, #11]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	799b      	ldrb	r3, [r3, #6]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d102      	bne.n	8002e3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	799b      	ldrb	r3, [r3, #6]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6979      	ldr	r1, [r7, #20]
 8002e48:	f005 fed6 	bl	8008bf8 <USB_EPStartXfer>

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	f003 020f 	and.w	r2, r3, #15
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e78:	681b      	ldr	r3, [r3, #0]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	460b      	mov	r3, r1
 8002e94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	f003 020f 	and.w	r2, r3, #15
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	3310      	adds	r3, #16
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	799b      	ldrb	r3, [r3, #6]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	799b      	ldrb	r3, [r3, #6]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6979      	ldr	r1, [r7, #20]
 8002eec:	f005 fe84 	bl	8008bf8 <USB_EPStartXfer>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	7912      	ldrb	r2, [r2, #4]
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e04f      	b.n	8002fb8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da0f      	bge.n	8002f40 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 020f 	and.w	r2, r3, #15
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	3310      	adds	r3, #16
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
 8002f3e:	e00d      	b.n	8002f5c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3304      	adds	r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_PCD_EP_SetStall+0x82>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e01d      	b.n	8002fb8 <HAL_PCD_EP_SetStall+0xbe>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68f9      	ldr	r1, [r7, #12]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f006 fa14 	bl	80093b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7999      	ldrb	r1, [r3, #6]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f006 fc07 	bl	80097bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	7912      	ldrb	r2, [r2, #4]
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e042      	b.n	8003064 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da0f      	bge.n	8003006 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 020f 	and.w	r2, r3, #15
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	3310      	adds	r3, #16
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	705a      	strb	r2, [r3, #1]
 8003004:	e00f      	b.n	8003026 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 020f 	and.w	r2, r3, #15
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	3304      	adds	r3, #4
 800301e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_PCD_EP_ClrStall+0x86>
 8003042:	2302      	movs	r3, #2
 8003044:	e00e      	b.n	8003064 <HAL_PCD_EP_ClrStall+0xa4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	4618      	mov	r0, r3
 8003056:	f006 fa1d 	bl	8009494 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0c      	bge.n	800309a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3310      	adds	r3, #16
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e00c      	b.n	80030b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	3304      	adds	r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68f9      	ldr	r1, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f006 f83c 	bl	8009138 <USB_EPStopXfer>
 80030c0:	4603      	mov	r3, r0
 80030c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030c4:	7afb      	ldrb	r3, [r7, #11]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b08a      	sub	sp, #40	@ 0x28
 80030d2:	af02      	add	r7, sp, #8
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	3310      	adds	r3, #16
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d901      	bls.n	8003106 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e06b      	b.n	80031de <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	429a      	cmp	r2, r3
 800311a:	d902      	bls.n	8003122 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3303      	adds	r3, #3
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800312a:	e02a      	b.n	8003182 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	429a      	cmp	r2, r3
 8003140:	d902      	bls.n	8003148 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3303      	adds	r3, #3
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68d9      	ldr	r1, [r3, #12]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	4603      	mov	r3, r0
 8003164:	6978      	ldr	r0, [r7, #20]
 8003166:	f006 f891 	bl	800928c <USB_WritePacket>

    ep->xfer_buff  += len;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	441a      	add	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	441a      	add	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	429a      	cmp	r2, r3
 8003196:	d809      	bhi.n	80031ac <PCD_WriteEmptyTxFifo+0xde>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d203      	bcs.n	80031ac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1bf      	bne.n	800312c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d811      	bhi.n	80031dc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	2201      	movs	r2, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	6939      	ldr	r1, [r7, #16]
 80031d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031d8:	4013      	ands	r3, r2
 80031da:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	333c      	adds	r3, #60	@ 0x3c
 8003200:	3304      	adds	r3, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	799b      	ldrb	r3, [r3, #6]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d17b      	bne.n	8003316 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	4a61      	ldr	r2, [pc, #388]	@ (80033b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	f240 80b9 	bls.w	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80b3 	beq.w	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003250:	6093      	str	r3, [r2, #8]
 8003252:	e0a7      	b.n	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800326a:	461a      	mov	r2, r3
 800326c:	2320      	movs	r3, #32
 800326e:	6093      	str	r3, [r2, #8]
 8003270:	e098      	b.n	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 8093 	bne.w	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4a4b      	ldr	r2, [pc, #300]	@ (80033b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d90f      	bls.n	80032a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032a2:	6093      	str	r3, [r2, #8]
 80032a4:	e07e      	b.n	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	3304      	adds	r3, #4
 80032ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1a      	ldr	r2, [r3, #32]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	0159      	lsls	r1, r3, #5
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	440b      	add	r3, r1
 80032c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	1ad2      	subs	r2, r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d114      	bne.n	8003308 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032f0:	461a      	mov	r2, r3
 80032f2:	2101      	movs	r1, #1
 80032f4:	f006 fa62 	bl	80097bc <USB_EP0_OutStart>
 80032f8:	e006      	b.n	8003308 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	441a      	add	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	4619      	mov	r1, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f008 fd9a 	bl	800be48 <HAL_PCD_DataOutStageCallback>
 8003314:	e046      	b.n	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	4a26      	ldr	r2, [pc, #152]	@ (80033b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d124      	bne.n	8003368 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800333a:	6093      	str	r3, [r2, #8]
 800333c:	e032      	b.n	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	2320      	movs	r3, #32
 8003358:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f008 fd71 	bl	800be48 <HAL_PCD_DataOutStageCallback>
 8003366:	e01d      	b.n	80033a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d114      	bne.n	8003398 <PCD_EP_OutXfrComplete_int+0x1b0>
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003390:	461a      	mov	r2, r3
 8003392:	2100      	movs	r1, #0
 8003394:	f006 fa12 	bl	80097bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f008 fd52 	bl	800be48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	4f54300a 	.word	0x4f54300a
 80033b4:	4f54310a 	.word	0x4f54310a

080033b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	333c      	adds	r3, #60	@ 0x3c
 80033d0:	3304      	adds	r3, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a15      	ldr	r2, [pc, #84]	@ (8003440 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d90e      	bls.n	800340c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800340a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f008 fd09 	bl	800be24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a0a      	ldr	r2, [pc, #40]	@ (8003440 <PCD_EP_OutSetupPacket_int+0x88>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d90c      	bls.n	8003434 <PCD_EP_OutSetupPacket_int+0x7c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	799b      	ldrb	r3, [r3, #6]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d108      	bne.n	8003434 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800342c:	461a      	mov	r2, r3
 800342e:	2101      	movs	r1, #1
 8003430:	f006 f9c4 	bl	80097bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	4f54300a 	.word	0x4f54300a

08003444 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
 8003450:	4613      	mov	r3, r2
 8003452:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003462:	883b      	ldrh	r3, [r7, #0]
 8003464:	0419      	lsls	r1, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	430a      	orrs	r2, r1
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003470:	e028      	b.n	80034c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4413      	add	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e00d      	b.n	80034a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	3340      	adds	r3, #64	@ 0x40
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	3301      	adds	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3ec      	bcc.n	8003486 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034ac:	883b      	ldrh	r3, [r7, #0]
 80034ae:	0418      	lsls	r0, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	4302      	orrs	r2, r0
 80034bc:	3340      	adds	r3, #64	@ 0x40
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003522:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <HAL_PCDEx_ActivateLPM+0x44>)
 8003524:	4313      	orrs	r3, r2
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	10000003 	.word	0x10000003

0800353c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_PWREx_ConfigSupply+0x70>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d00a      	beq.n	800357e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003568:	4b16      	ldr	r3, [pc, #88]	@ (80035c4 <HAL_PWREx_ConfigSupply+0x70>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	429a      	cmp	r2, r3
 8003574:	d001      	beq.n	800357a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e01f      	b.n	80035ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e01d      	b.n	80035ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800357e:	4b11      	ldr	r3, [pc, #68]	@ (80035c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f023 0207 	bic.w	r2, r3, #7
 8003586:	490f      	ldr	r1, [pc, #60]	@ (80035c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4313      	orrs	r3, r2
 800358c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800358e:	f7fd fde5 	bl	800115c <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003594:	e009      	b.n	80035aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003596:	f7fd fde1 	bl	800115c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035a4:	d901      	bls.n	80035aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e007      	b.n	80035ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <HAL_PWREx_ConfigSupply+0x70>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b6:	d1ee      	bne.n	8003596 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	58024800 	.word	0x58024800

080035c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80035d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035d6:	60d3      	str	r3, [r2, #12]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	58024800 	.word	0x58024800

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	@ 0x30
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f000 bc48 	b.w	8003e8c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8088 	beq.w	800371a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360a:	4b99      	ldr	r3, [pc, #612]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003614:	4b96      	ldr	r3, [pc, #600]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800361a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361c:	2b10      	cmp	r3, #16
 800361e:	d007      	beq.n	8003630 <HAL_RCC_OscConfig+0x48>
 8003620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003622:	2b18      	cmp	r3, #24
 8003624:	d111      	bne.n	800364a <HAL_RCC_OscConfig+0x62>
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d10c      	bne.n	800364a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	4b8f      	ldr	r3, [pc, #572]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d06d      	beq.n	8003718 <HAL_RCC_OscConfig+0x130>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d169      	bne.n	8003718 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f000 bc21 	b.w	8003e8c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x7a>
 8003654:	4b86      	ldr	r3, [pc, #536]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a85      	ldr	r2, [pc, #532]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800365a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e02e      	b.n	80036c0 <HAL_RCC_OscConfig+0xd8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x9c>
 800366a:	4b81      	ldr	r3, [pc, #516]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a80      	ldr	r2, [pc, #512]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b7e      	ldr	r3, [pc, #504]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a7d      	ldr	r2, [pc, #500]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800367c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e01d      	b.n	80036c0 <HAL_RCC_OscConfig+0xd8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCC_OscConfig+0xc0>
 800368e:	4b78      	ldr	r3, [pc, #480]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a77      	ldr	r2, [pc, #476]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b75      	ldr	r3, [pc, #468]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a74      	ldr	r2, [pc, #464]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e00b      	b.n	80036c0 <HAL_RCC_OscConfig+0xd8>
 80036a8:	4b71      	ldr	r3, [pc, #452]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a70      	ldr	r2, [pc, #448]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	4b6e      	ldr	r3, [pc, #440]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6d      	ldr	r2, [pc, #436]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80036ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fd48 	bl	800115c <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fd fd44 	bl	800115c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	@ 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e3d4      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e2:	4b63      	ldr	r3, [pc, #396]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0xe8>
 80036ee:	e014      	b.n	800371a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fd fd34 	bl	800115c <HAL_GetTick>
 80036f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fd fd30 	bl	800115c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	@ 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e3c0      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800370a:	4b59      	ldr	r3, [pc, #356]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x110>
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80ca 	beq.w	80038bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003728:	4b51      	ldr	r3, [pc, #324]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003730:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003732:	4b4f      	ldr	r3, [pc, #316]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_RCC_OscConfig+0x166>
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	2b18      	cmp	r3, #24
 8003742:	d156      	bne.n	80037f2 <HAL_RCC_OscConfig+0x20a>
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d151      	bne.n	80037f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374e:	4b48      	ldr	r3, [pc, #288]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x17e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e392      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003766:	4b42      	ldr	r3, [pc, #264]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0219 	bic.w	r2, r3, #25
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	493f      	ldr	r1, [pc, #252]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fcf0 	bl	800115c <HAL_GetTick>
 800377c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003780:	f7fd fcec 	bl	800115c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e37c      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003792:	4b37      	ldr	r3, [pc, #220]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	f7fd fd0d 	bl	80011bc <HAL_GetREVID>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d817      	bhi.n	80037dc <HAL_RCC_OscConfig+0x1f4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b40      	cmp	r3, #64	@ 0x40
 80037b2:	d108      	bne.n	80037c6 <HAL_RCC_OscConfig+0x1de>
 80037b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80037be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c4:	e07a      	b.n	80038bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	031b      	lsls	r3, r3, #12
 80037d4:	4926      	ldr	r1, [pc, #152]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037da:	e06f      	b.n	80038bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037dc:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	4921      	ldr	r1, [pc, #132]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f0:	e064      	b.n	80038bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d047      	beq.n	800388a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0219 	bic.w	r2, r3, #25
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	491a      	ldr	r1, [pc, #104]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fca6 	bl	800115c <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd fca2 	bl	800115c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e332      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003826:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	f7fd fcc3 	bl	80011bc <HAL_GetREVID>
 8003836:	4603      	mov	r3, r0
 8003838:	f241 0203 	movw	r2, #4099	@ 0x1003
 800383c:	4293      	cmp	r3, r2
 800383e:	d819      	bhi.n	8003874 <HAL_RCC_OscConfig+0x28c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b40      	cmp	r3, #64	@ 0x40
 8003846:	d108      	bne.n	800385a <HAL_RCC_OscConfig+0x272>
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003850:	4a07      	ldr	r2, [pc, #28]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 8003852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003856:	6053      	str	r3, [r2, #4]
 8003858:	e030      	b.n	80038bc <HAL_RCC_OscConfig+0x2d4>
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	031b      	lsls	r3, r3, #12
 8003868:	4901      	ldr	r1, [pc, #4]	@ (8003870 <HAL_RCC_OscConfig+0x288>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
 800386e:	e025      	b.n	80038bc <HAL_RCC_OscConfig+0x2d4>
 8003870:	58024400 	.word	0x58024400
 8003874:	4b9a      	ldr	r3, [pc, #616]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	4997      	ldr	r1, [pc, #604]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	e018      	b.n	80038bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388a:	4b95      	ldr	r3, [pc, #596]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a94      	ldr	r2, [pc, #592]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fd fc61 	bl	800115c <HAL_GetTick>
 800389a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389e:	f7fd fc5d 	bl	800115c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e2ed      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038b0:	4b8b      	ldr	r3, [pc, #556]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a9 	beq.w	8003a1c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ca:	4b85      	ldr	r3, [pc, #532]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038d4:	4b82      	ldr	r3, [pc, #520]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d007      	beq.n	80038f0 <HAL_RCC_OscConfig+0x308>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b18      	cmp	r3, #24
 80038e4:	d13a      	bne.n	800395c <HAL_RCC_OscConfig+0x374>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d135      	bne.n	800395c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038f0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_OscConfig+0x320>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b80      	cmp	r3, #128	@ 0x80
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e2c1      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003908:	f7fd fc58 	bl	80011bc <HAL_GetREVID>
 800390c:	4603      	mov	r3, r0
 800390e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003912:	4293      	cmp	r3, r2
 8003914:	d817      	bhi.n	8003946 <HAL_RCC_OscConfig+0x35e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	2b20      	cmp	r3, #32
 800391c:	d108      	bne.n	8003930 <HAL_RCC_OscConfig+0x348>
 800391e:	4b70      	ldr	r3, [pc, #448]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003926:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800392c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800392e:	e075      	b.n	8003a1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003930:	4b6b      	ldr	r3, [pc, #428]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	069b      	lsls	r3, r3, #26
 800393e:	4968      	ldr	r1, [pc, #416]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003944:	e06a      	b.n	8003a1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003946:	4b66      	ldr	r3, [pc, #408]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	4962      	ldr	r1, [pc, #392]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	4313      	orrs	r3, r2
 8003958:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800395a:	e05f      	b.n	8003a1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d042      	beq.n	80039ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003964:	4b5e      	ldr	r3, [pc, #376]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a5d      	ldr	r2, [pc, #372]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 800396a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800396e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd fbf4 	bl	800115c <HAL_GetTick>
 8003974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003978:	f7fd fbf0 	bl	800115c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e280      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800398a:	4b55      	ldr	r3, [pc, #340]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003996:	f7fd fc11 	bl	80011bc <HAL_GetREVID>
 800399a:	4603      	mov	r3, r0
 800399c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d817      	bhi.n	80039d4 <HAL_RCC_OscConfig+0x3ec>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d108      	bne.n	80039be <HAL_RCC_OscConfig+0x3d6>
 80039ac:	4b4c      	ldr	r3, [pc, #304]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039b4:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80039b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039ba:	6053      	str	r3, [r2, #4]
 80039bc:	e02e      	b.n	8003a1c <HAL_RCC_OscConfig+0x434>
 80039be:	4b48      	ldr	r3, [pc, #288]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	069b      	lsls	r3, r3, #26
 80039cc:	4944      	ldr	r1, [pc, #272]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
 80039d2:	e023      	b.n	8003a1c <HAL_RCC_OscConfig+0x434>
 80039d4:	4b42      	ldr	r3, [pc, #264]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	493f      	ldr	r1, [pc, #252]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60cb      	str	r3, [r1, #12]
 80039e8:	e018      	b.n	8003a1c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039ea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd fbb1 	bl	800115c <HAL_GetTick>
 80039fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039fe:	f7fd fbad 	bl	800115c <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e23d      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a10:	4b33      	ldr	r3, [pc, #204]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d036      	beq.n	8003a96 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d019      	beq.n	8003a64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a34:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fd fb8e 	bl	800115c <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a44:	f7fd fb8a 	bl	800115c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e21a      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a56:	4b22      	ldr	r3, [pc, #136]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x45c>
 8003a62:	e018      	b.n	8003a96 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a64:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fb74 	bl	800115c <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fd fb70 	bl	800115c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e200      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d039      	beq.n	8003b16 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003ab0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fb51 	bl	800115c <HAL_GetTick>
 8003aba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003abe:	f7fd fb4d 	bl	800115c <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1dd      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ad0:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x4d6>
 8003adc:	e01b      	b.n	8003b16 <HAL_RCC_OscConfig+0x52e>
 8003ade:	bf00      	nop
 8003ae0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ae4:	4b9b      	ldr	r3, [pc, #620]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a9a      	ldr	r2, [pc, #616]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003af0:	f7fd fb34 	bl	800115c <HAL_GetTick>
 8003af4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af8:	f7fd fb30 	bl	800115c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1c0      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b0a:	4b92      	ldr	r3, [pc, #584]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8081 	beq.w	8003c26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b24:	4b8c      	ldr	r3, [pc, #560]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a8b      	ldr	r2, [pc, #556]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b30:	f7fd fb14 	bl	800115c <HAL_GetTick>
 8003b34:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b38:	f7fd fb10 	bl	800115c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	@ 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1a0      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b4a:	4b83      	ldr	r3, [pc, #524]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCC_OscConfig+0x584>
 8003b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	4a7c      	ldr	r2, [pc, #496]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b6a:	e02d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x5e0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_OscConfig+0x5a6>
 8003b74:	4b77      	ldr	r3, [pc, #476]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	4a76      	ldr	r2, [pc, #472]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b80:	4b74      	ldr	r3, [pc, #464]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	4a73      	ldr	r2, [pc, #460]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b86:	f023 0304 	bic.w	r3, r3, #4
 8003b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RCC_OscConfig+0x5e0>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c8>
 8003b96:	4b6f      	ldr	r3, [pc, #444]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	4a6b      	ldr	r2, [pc, #428]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x5e0>
 8003bb0:	4b68      	ldr	r3, [pc, #416]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	4a67      	ldr	r2, [pc, #412]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbc:	4b65      	ldr	r3, [pc, #404]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc0:	4a64      	ldr	r2, [pc, #400]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d015      	beq.n	8003bfc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fac4 	bl	800115c <HAL_GetTick>
 8003bd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fac0 	bl	800115c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e14e      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bee:	4b59      	ldr	r3, [pc, #356]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ee      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x5f0>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fd faae 	bl	800115c <HAL_GetTick>
 8003c00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f7fd faaa 	bl	800115c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e138      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ee      	bne.n	8003c04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 812d 	beq.w	8003e8a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c30:	4b48      	ldr	r3, [pc, #288]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c38:	2b18      	cmp	r3, #24
 8003c3a:	f000 80bd 	beq.w	8003db8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	f040 809e 	bne.w	8003d84 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c48:	4b42      	ldr	r3, [pc, #264]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a41      	ldr	r2, [pc, #260]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fd fa82 	bl	800115c <HAL_GetTick>
 8003c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fd fa7e 	bl	800115c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e10e      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c6e:	4b39      	ldr	r3, [pc, #228]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7a:	4b36      	ldr	r3, [pc, #216]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c7e:	4b37      	ldr	r3, [pc, #220]	@ (8003d5c <HAL_RCC_OscConfig+0x774>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	4931      	ldr	r1, [pc, #196]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	025b      	lsls	r3, r3, #9
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	061b      	lsls	r3, r3, #24
 8003cc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cc4:	4923      	ldr	r1, [pc, #140]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cca:	4b22      	ldr	r3, [pc, #136]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	4a21      	ldr	r2, [pc, #132]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cda:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <HAL_RCC_OscConfig+0x778>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ce2:	00d2      	lsls	r2, r2, #3
 8003ce4:	491b      	ldr	r1, [pc, #108]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cea:	4b1a      	ldr	r3, [pc, #104]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cee:	f023 020c 	bic.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	4917      	ldr	r1, [pc, #92]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cfc:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	f023 0202 	bic.w	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d08:	4912      	ldr	r1, [pc, #72]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d0e:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	4a10      	ldr	r2, [pc, #64]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d26:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d32:	4b08      	ldr	r3, [pc, #32]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	4a07      	ldr	r2, [pc, #28]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3e:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a04      	ldr	r2, [pc, #16]	@ (8003d54 <HAL_RCC_OscConfig+0x76c>)
 8003d44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd fa07 	bl	800115c <HAL_GetTick>
 8003d4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d50:	e011      	b.n	8003d76 <HAL_RCC_OscConfig+0x78e>
 8003d52:	bf00      	nop
 8003d54:	58024400 	.word	0x58024400
 8003d58:	58024800 	.word	0x58024800
 8003d5c:	fffffc0c 	.word	0xfffffc0c
 8003d60:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd f9fa 	bl	800115c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e08a      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d76:	4b47      	ldr	r3, [pc, #284]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x77c>
 8003d82:	e082      	b.n	8003e8a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d84:	4b43      	ldr	r3, [pc, #268]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a42      	ldr	r2, [pc, #264]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fd f9e4 	bl	800115c <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd f9e0 	bl	800115c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e070      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003daa:	4b3a      	ldr	r3, [pc, #232]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x7b0>
 8003db6:	e068      	b.n	8003e8a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003db8:	4b36      	ldr	r3, [pc, #216]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dbe:	4b35      	ldr	r3, [pc, #212]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d031      	beq.n	8003e30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0203 	and.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d12a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d122      	bne.n	8003e30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d11a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	0a5b      	lsrs	r3, r3, #9
 8003dfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d108      	bne.n	8003e30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0e1b      	lsrs	r3, r3, #24
 8003e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e02b      	b.n	8003e8c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e34:	4b17      	ldr	r3, [pc, #92]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d01f      	beq.n	8003e8a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e4a:	4b12      	ldr	r3, [pc, #72]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	4a11      	ldr	r2, [pc, #68]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e56:	f7fd f981 	bl	800115c <HAL_GetTick>
 8003e5a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e5c:	bf00      	nop
 8003e5e:	f7fd f97d 	bl	800115c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d0f9      	beq.n	8003e5e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <HAL_RCC_OscConfig+0x8b0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e76:	00d2      	lsls	r2, r2, #3
 8003e78:	4906      	ldr	r1, [pc, #24]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e7e:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	4a04      	ldr	r2, [pc, #16]	@ (8003e94 <HAL_RCC_OscConfig+0x8ac>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3730      	adds	r7, #48	@ 0x30
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	58024400 	.word	0x58024400
 8003e98:	ffff0007 	.word	0xffff0007

08003e9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e19c      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b8a      	ldr	r3, [pc, #552]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b87      	ldr	r3, [pc, #540]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 020f 	bic.w	r2, r3, #15
 8003ec6:	4985      	ldr	r1, [pc, #532]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b83      	ldr	r3, [pc, #524]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e184      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d908      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003efc:	4b78      	ldr	r3, [pc, #480]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4975      	ldr	r1, [pc, #468]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	4b70      	ldr	r3, [pc, #448]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d908      	bls.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	496a      	ldr	r1, [pc, #424]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	4b64      	ldr	r3, [pc, #400]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d908      	bls.n	8003f6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f58:	4b61      	ldr	r3, [pc, #388]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	495e      	ldr	r1, [pc, #376]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d908      	bls.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f86:	4b56      	ldr	r3, [pc, #344]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4953      	ldr	r1, [pc, #332]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d908      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f023 020f 	bic.w	r2, r3, #15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4947      	ldr	r1, [pc, #284]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d055      	beq.n	800407e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fd2:	4b43      	ldr	r3, [pc, #268]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4940      	ldr	r1, [pc, #256]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fec:	4b3c      	ldr	r3, [pc, #240]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d121      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0f6      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004004:	4b36      	ldr	r3, [pc, #216]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d115      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0ea      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800401c:	4b30      	ldr	r3, [pc, #192]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0de      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800402c:	4b2c      	ldr	r3, [pc, #176]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0d6      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800403c:	4b28      	ldr	r3, [pc, #160]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f023 0207 	bic.w	r2, r3, #7
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4925      	ldr	r1, [pc, #148]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800404a:	4313      	orrs	r3, r2
 800404c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404e:	f7fd f885 	bl	800115c <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	e00a      	b.n	800406c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fd f881 	bl	800115c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0be      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406c:	4b1c      	ldr	r3, [pc, #112]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	429a      	cmp	r2, r3
 800407c:	d1eb      	bne.n	8004056 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	4b14      	ldr	r3, [pc, #80]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	429a      	cmp	r2, r3
 8004098:	d208      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409a:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f023 020f 	bic.w	r2, r3, #15
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	490e      	ldr	r1, [pc, #56]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d214      	bcs.n	80040e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	4906      	ldr	r1, [pc, #24]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e086      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
 80040dc:	52002000 	.word	0x52002000
 80040e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b3f      	ldr	r3, [pc, #252]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d208      	bcs.n	8004112 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004100:	4b3c      	ldr	r3, [pc, #240]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4939      	ldr	r1, [pc, #228]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800410e:	4313      	orrs	r3, r2
 8004110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	4b34      	ldr	r3, [pc, #208]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800412a:	429a      	cmp	r2, r3
 800412c:	d208      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800412e:	4b31      	ldr	r3, [pc, #196]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	492e      	ldr	r1, [pc, #184]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800413c:	4313      	orrs	r3, r2
 800413e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004158:	429a      	cmp	r2, r3
 800415a:	d208      	bcs.n	800416e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800415c:	4b25      	ldr	r3, [pc, #148]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	4922      	ldr	r1, [pc, #136]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800416a:	4313      	orrs	r3, r2
 800416c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004186:	429a      	cmp	r2, r3
 8004188:	d208      	bcs.n	800419c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800418a:	4b1a      	ldr	r3, [pc, #104]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4917      	ldr	r1, [pc, #92]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004198:	4313      	orrs	r3, r2
 800419a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800419c:	f000 f834 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	4912      	ldr	r1, [pc, #72]	@ (80041f8 <HAL_RCC_ClockConfig+0x35c>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ba:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	4a0d      	ldr	r2, [pc, #52]	@ (80041f8 <HAL_RCC_ClockConfig+0x35c>)
 80041c4:	5cd3      	ldrb	r3, [r2, r3]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
 80041d0:	4a0a      	ldr	r2, [pc, #40]	@ (80041fc <HAL_RCC_ClockConfig+0x360>)
 80041d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <HAL_RCC_ClockConfig+0x364>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041da:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x368>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fc ff72 	bl	80010c8 <HAL_InitTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
 80041f8:	0800c464 	.word	0x0800c464
 80041fc:	24000004 	.word	0x24000004
 8004200:	24000000 	.word	0x24000000
 8004204:	24000008 	.word	0x24000008

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	@ 0x24
 800420c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420e:	4bb3      	ldr	r3, [pc, #716]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004216:	2b18      	cmp	r3, #24
 8004218:	f200 8155 	bhi.w	80044c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800421c:	a201      	add	r2, pc, #4	@ (adr r2, 8004224 <HAL_RCC_GetSysClockFreq+0x1c>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004289 	.word	0x08004289
 8004228:	080044c7 	.word	0x080044c7
 800422c:	080044c7 	.word	0x080044c7
 8004230:	080044c7 	.word	0x080044c7
 8004234:	080044c7 	.word	0x080044c7
 8004238:	080044c7 	.word	0x080044c7
 800423c:	080044c7 	.word	0x080044c7
 8004240:	080044c7 	.word	0x080044c7
 8004244:	080042af 	.word	0x080042af
 8004248:	080044c7 	.word	0x080044c7
 800424c:	080044c7 	.word	0x080044c7
 8004250:	080044c7 	.word	0x080044c7
 8004254:	080044c7 	.word	0x080044c7
 8004258:	080044c7 	.word	0x080044c7
 800425c:	080044c7 	.word	0x080044c7
 8004260:	080044c7 	.word	0x080044c7
 8004264:	080042b5 	.word	0x080042b5
 8004268:	080044c7 	.word	0x080044c7
 800426c:	080044c7 	.word	0x080044c7
 8004270:	080044c7 	.word	0x080044c7
 8004274:	080044c7 	.word	0x080044c7
 8004278:	080044c7 	.word	0x080044c7
 800427c:	080044c7 	.word	0x080044c7
 8004280:	080044c7 	.word	0x080044c7
 8004284:	080042bb 	.word	0x080042bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	4b94      	ldr	r3, [pc, #592]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004294:	4b91      	ldr	r3, [pc, #580]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	4a90      	ldr	r2, [pc, #576]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042a6:	e111      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042a8:	4b8d      	ldr	r3, [pc, #564]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042aa:	61bb      	str	r3, [r7, #24]
      break;
 80042ac:	e10e      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042ae:	4b8d      	ldr	r3, [pc, #564]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042b0:	61bb      	str	r3, [r7, #24]
      break;
 80042b2:	e10b      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042b4:	4b8c      	ldr	r3, [pc, #560]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042b6:	61bb      	str	r3, [r7, #24]
      break;
 80042b8:	e108      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ba:	4b88      	ldr	r3, [pc, #544]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042c4:	4b85      	ldr	r3, [pc, #532]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042d0:	4b82      	ldr	r3, [pc, #520]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042da:	4b80      	ldr	r3, [pc, #512]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042de:	08db      	lsrs	r3, r3, #3
 80042e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80e1 	beq.w	80044c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b02      	cmp	r3, #2
 8004302:	f000 8083 	beq.w	800440c <HAL_RCC_GetSysClockFreq+0x204>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x248>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x114>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d056      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800431a:	e099      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800431c:	4b6f      	ldr	r3, [pc, #444]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02d      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004328:	4b6c      	ldr	r3, [pc, #432]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	4a6b      	ldr	r2, [pc, #428]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b62      	ldr	r3, [pc, #392]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a02 	vldr	s12, [r7, #8]
 8004366:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004382:	e087      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80044f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b51      	ldr	r3, [pc, #324]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043c6:	e065      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80044f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b40      	ldr	r3, [pc, #256]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800440a:	e043      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80044f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b2f      	ldr	r3, [pc, #188]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004432:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800444e:	e021      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a02 	vldr	s12, [r7, #8]
 8004476:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004492:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004494:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004498:	0a5b      	lsrs	r3, r3, #9
 800449a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449e:	3301      	adds	r3, #1
 80044a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80044b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b8:	ee17 3a90 	vmov	r3, s15
 80044bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044be:	e005      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
      break;
 80044c4:	e002      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044c6:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044c8:	61bb      	str	r3, [r7, #24]
      break;
 80044ca:	bf00      	nop
  }

  return sysclockfreq;
 80044cc:	69bb      	ldr	r3, [r7, #24]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	@ 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	58024400 	.word	0x58024400
 80044e0:	03d09000 	.word	0x03d09000
 80044e4:	003d0900 	.word	0x003d0900
 80044e8:	007a1200 	.word	0x007a1200
 80044ec:	46000000 	.word	0x46000000
 80044f0:	4c742400 	.word	0x4c742400
 80044f4:	4a742400 	.word	0x4a742400
 80044f8:	4af42400 	.word	0x4af42400

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004502:	f7ff fe81 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8004506:	4602      	mov	r2, r0
 8004508:	4b10      	ldr	r3, [pc, #64]	@ (800454c <HAL_RCC_GetHCLKFreq+0x50>)
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	490f      	ldr	r1, [pc, #60]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x54>)
 8004514:	5ccb      	ldrb	r3, [r1, r3]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004520:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <HAL_RCC_GetHCLKFreq+0x50>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	4a09      	ldr	r2, [pc, #36]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x54>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	4a07      	ldr	r2, [pc, #28]	@ (8004554 <HAL_RCC_GetHCLKFreq+0x58>)
 8004538:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800453a:	4a07      	ldr	r2, [pc, #28]	@ (8004558 <HAL_RCC_GetHCLKFreq+0x5c>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <HAL_RCC_GetHCLKFreq+0x58>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	58024400 	.word	0x58024400
 8004550:	0800c464 	.word	0x0800c464
 8004554:	24000004 	.word	0x24000004
 8004558:	24000000 	.word	0x24000000

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004560:	f7ff ffcc 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4904      	ldr	r1, [pc, #16]	@ (8004584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	58024400 	.word	0x58024400
 8004584:	0800c464 	.word	0x0800c464

08004588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800458c:	f7ff ffb6 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4904      	ldr	r1, [pc, #16]	@ (80045b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	58024400 	.word	0x58024400
 80045b0:	0800c464 	.word	0x0800c464

080045b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b8:	b0ca      	sub	sp, #296	@ 0x128
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80045d8:	2500      	movs	r5, #0
 80045da:	ea54 0305 	orrs.w	r3, r4, r5
 80045de:	d049      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045ea:	d02f      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80045ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045f0:	d828      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045f6:	d01a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045fc:	d822      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004606:	d007      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004608:	e01c      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800460a:	4bb8      	ldr	r3, [pc, #736]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	4ab7      	ldr	r2, [pc, #732]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004616:	e01a      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	3308      	adds	r3, #8
 800461e:	2102      	movs	r1, #2
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fc8f 	bl	8005f44 <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800462c:	e00f      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	3328      	adds	r3, #40	@ 0x28
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f001 fd36 	bl	80060a8 <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004642:	e004      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800464c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004656:	4ba5      	ldr	r3, [pc, #660]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004664:	4aa1      	ldr	r2, [pc, #644]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004666:	430b      	orrs	r3, r1
 8004668:	6513      	str	r3, [r2, #80]	@ 0x50
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004680:	f04f 0900 	mov.w	r9, #0
 8004684:	ea58 0309 	orrs.w	r3, r8, r9
 8004688:	d047      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004690:	2b04      	cmp	r3, #4
 8004692:	d82a      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004694:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046b1 	.word	0x080046b1
 80046a0:	080046bf 	.word	0x080046bf
 80046a4:	080046d5 	.word	0x080046d5
 80046a8:	080046f3 	.word	0x080046f3
 80046ac:	080046f3 	.word	0x080046f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b0:	4b8e      	ldr	r3, [pc, #568]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	4a8d      	ldr	r2, [pc, #564]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046bc:	e01a      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	3308      	adds	r3, #8
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 fc3c 	bl	8005f44 <RCCEx_PLL2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046d2:	e00f      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	3328      	adds	r3, #40	@ 0x28
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 fce3 	bl	80060a8 <RCCEx_PLL3_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046e8:	e004      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046f0:	e000      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80046f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046fc:	4b7b      	ldr	r3, [pc, #492]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004700:	f023 0107 	bic.w	r1, r3, #7
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470a:	4a78      	ldr	r2, [pc, #480]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800470c:	430b      	orrs	r3, r1
 800470e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004710:	e003      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004726:	f04f 0b00 	mov.w	fp, #0
 800472a:	ea5a 030b 	orrs.w	r3, sl, fp
 800472e:	d04c      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473a:	d030      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800473c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004740:	d829      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004742:	2bc0      	cmp	r3, #192	@ 0xc0
 8004744:	d02d      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004746:	2bc0      	cmp	r3, #192	@ 0xc0
 8004748:	d825      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800474a:	2b80      	cmp	r3, #128	@ 0x80
 800474c:	d018      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800474e:	2b80      	cmp	r3, #128	@ 0x80
 8004750:	d821      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004756:	2b40      	cmp	r3, #64	@ 0x40
 8004758:	d007      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800475a:	e01c      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475c:	4b63      	ldr	r3, [pc, #396]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	4a62      	ldr	r2, [pc, #392]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004768:	e01c      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476e:	3308      	adds	r3, #8
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fbe6 	bl	8005f44 <RCCEx_PLL2_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800477e:	e011      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004784:	3328      	adds	r3, #40	@ 0x28
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fc8d 	bl	80060a8 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004794:	e006      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800479c:	e002      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047ac:	4b4f      	ldr	r3, [pc, #316]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	4a4c      	ldr	r2, [pc, #304]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047bc:	430b      	orrs	r3, r1
 80047be:	6513      	str	r3, [r2, #80]	@ 0x50
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80047d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80047da:	2300      	movs	r3, #0
 80047dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80047e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80047e4:	460b      	mov	r3, r1
 80047e6:	4313      	orrs	r3, r2
 80047e8:	d053      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047f6:	d035      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80047f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047fc:	d82e      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80047fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004802:	d031      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004804:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004808:	d828      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800480a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480e:	d01a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004810:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004814:	d822      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800481a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800481e:	d007      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004820:	e01c      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004822:	4b32      	ldr	r3, [pc, #200]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	4a31      	ldr	r2, [pc, #196]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800482c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800482e:	e01c      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	3308      	adds	r3, #8
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fb83 	bl	8005f44 <RCCEx_PLL2_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004844:	e011      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	3328      	adds	r3, #40	@ 0x28
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f001 fc2a 	bl	80060a8 <RCCEx_PLL3_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800485a:	e006      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004862:	e002      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004872:	4b1e      	ldr	r3, [pc, #120]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004876:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004882:	4a1a      	ldr	r2, [pc, #104]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004884:	430b      	orrs	r3, r1
 8004886:	6593      	str	r3, [r2, #88]	@ 0x58
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800489e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d056      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048be:	d038      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80048c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048c4:	d831      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048ca:	d034      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80048cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048d0:	d82b      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048d6:	d01d      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80048d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048dc:	d825      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80048e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048e8:	e01f      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048ea:	bf00      	nop
 80048ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f0:	4ba2      	ldr	r3, [pc, #648]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	4aa1      	ldr	r2, [pc, #644]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048fc:	e01c      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	3308      	adds	r3, #8
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f001 fb1c 	bl	8005f44 <RCCEx_PLL2_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004912:	e011      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	3328      	adds	r3, #40	@ 0x28
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fbc3 	bl	80060a8 <RCCEx_PLL3_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004928:	e006      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004930:	e002      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10b      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004940:	4b8e      	ldr	r3, [pc, #568]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004944:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004950:	4a8a      	ldr	r2, [pc, #552]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004952:	430b      	orrs	r3, r1
 8004954:	6593      	str	r3, [r2, #88]	@ 0x58
 8004956:	e003      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800496c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004970:	2300      	movs	r3, #0
 8004972:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004976:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800497a:	460b      	mov	r3, r1
 800497c:	4313      	orrs	r3, r2
 800497e:	d03a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004986:	2b30      	cmp	r3, #48	@ 0x30
 8004988:	d01f      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800498a:	2b30      	cmp	r3, #48	@ 0x30
 800498c:	d819      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800498e:	2b20      	cmp	r3, #32
 8004990:	d00c      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004992:	2b20      	cmp	r3, #32
 8004994:	d815      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d019      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800499a:	2b10      	cmp	r3, #16
 800499c:	d111      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499e:	4b77      	ldr	r3, [pc, #476]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	4a76      	ldr	r2, [pc, #472]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049aa:	e011      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b0:	3308      	adds	r3, #8
 80049b2:	2102      	movs	r1, #2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fac5 	bl	8005f44 <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049c0:	e006      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049c8:	e002      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80049ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049d8:	4b68      	ldr	r3, [pc, #416]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	4a65      	ldr	r2, [pc, #404]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049e8:	430b      	orrs	r3, r1
 80049ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049ec:	e003      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a06:	2300      	movs	r3, #0
 8004a08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d051      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a20:	d035      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a26:	d82e      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a2c:	d031      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a32:	d828      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a38:	d01a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a3e:	d822      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a48:	d007      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004a4a:	e01c      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	4a4a      	ldr	r2, [pc, #296]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a58:	e01c      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	3308      	adds	r3, #8
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fa6e 	bl	8005f44 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a6e:	e011      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a74:	3328      	adds	r3, #40	@ 0x28
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fb15 	bl	80060a8 <RCCEx_PLL3_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a8c:	e002      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a9c:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aaa:	4a34      	ldr	r2, [pc, #208]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ab0:	e003      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ad0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	d056      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae4:	d033      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ae6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aea:	d82c      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004aec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004af0:	d02f      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004af2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004af6:	d826      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004af8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004afc:	d02b      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004afe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b02:	d820      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b08:	d012      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b0e:	d81a      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d022      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b18:	d115      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	3308      	adds	r3, #8
 8004b20:	2101      	movs	r1, #1
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 fa0e 	bl	8005f44 <RCCEx_PLL2_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b2e:	e015      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b34:	3328      	adds	r3, #40	@ 0x28
 8004b36:	2101      	movs	r1, #1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fab5 	bl	80060a8 <RCCEx_PLL3_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b44:	e00a      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b4c:	e006      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e004      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10d      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b68:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b72:	4a02      	ldr	r2, [pc, #8]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b78:	e006      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004b7a:	bf00      	nop
 8004b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b9e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	d055      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bb4:	d033      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bba:	d82c      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc0:	d02f      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc6:	d826      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bcc:	d02b      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004bce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bd2:	d820      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bd8:	d012      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bde:	d81a      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d022      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004be8:	d115      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	3308      	adds	r3, #8
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 f9a6 	bl	8005f44 <RCCEx_PLL2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004bfe:	e015      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c04:	3328      	adds	r3, #40	@ 0x28
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fa4d 	bl	80060a8 <RCCEx_PLL3_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c14:	e00a      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c1c:	e006      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c1e:	bf00      	nop
 8004c20:	e004      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c22:	bf00      	nop
 8004c24:	e002      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c26:	bf00      	nop
 8004c28:	e000      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c34:	4ba3      	ldr	r3, [pc, #652]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c38:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c44:	4a9f      	ldr	r2, [pc, #636]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c46:	430b      	orrs	r3, r1
 8004c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c4a:	e003      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4313      	orrs	r3, r2
 8004c72:	d037      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c7e:	d00e      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c84:	d816      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d018      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c8e:	d111      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c90:	4b8c      	ldr	r3, [pc, #560]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	4a8b      	ldr	r2, [pc, #556]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c9c:	e00f      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 f94c 	bl	8005f44 <RCCEx_PLL2_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cb2:	e004      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd4:	4a7b      	ldr	r2, [pc, #492]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cda:	e003      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004cfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4313      	orrs	r3, r2
 8004d02:	d039      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d81c      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004d51 	.word	0x08004d51
 8004d18:	08004d25 	.word	0x08004d25
 8004d1c:	08004d33 	.word	0x08004d33
 8004d20:	08004d51 	.word	0x08004d51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d24:	4b67      	ldr	r3, [pc, #412]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	4a66      	ldr	r2, [pc, #408]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d30:	e00f      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d36:	3308      	adds	r3, #8
 8004d38:	2102      	movs	r1, #2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 f902 	bl	8005f44 <RCCEx_PLL2_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d46:	e004      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d4e:	e000      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5e:	f023 0103 	bic.w	r1, r3, #3
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d68:	4a56      	ldr	r2, [pc, #344]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d6e:	e003      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004d92:	460b      	mov	r3, r1
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f000 809f 	beq.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004da6:	f7fc f9d9 	bl	800115c <HAL_GetTick>
 8004daa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db0:	f7fc f9d4 	bl	800115c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b64      	cmp	r3, #100	@ 0x64
 8004dbe:	d903      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ed      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d179      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ddc:	4b39      	ldr	r3, [pc, #228]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004de8:	4053      	eors	r3, r2
 8004dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d015      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004df2:	4b34      	ldr	r3, [pc, #208]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dfa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dfe:	4b31      	ldr	r3, [pc, #196]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e02:	4a30      	ldr	r2, [pc, #192]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e16:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e2a:	d118      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fc f996 	bl	800115c <HAL_GetTick>
 8004e30:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e34:	e00d      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fc f991 	bl	800115c <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e40:	1ad2      	subs	r2, r2, r3
 8004e42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d903      	bls.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004e50:	e005      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0eb      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d129      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e76:	d10e      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004e78:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e88:	091a      	lsrs	r2, r3, #4
 8004e8a:	4b10      	ldr	r3, [pc, #64]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6113      	str	r3, [r2, #16]
 8004e94:	e005      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004e96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ea0:	6113      	str	r3, [r2, #16]
 8004ea2:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb2:	4a04      	ldr	r2, [pc, #16]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004ec2:	e009      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004ec4:	58024400 	.word	0x58024400
 8004ec8:	58024800 	.word	0x58024800
 8004ecc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f002 0301 	and.w	r3, r2, #1
 8004ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004eee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f000 8089 	beq.w	800500c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f00:	2b28      	cmp	r3, #40	@ 0x28
 8004f02:	d86b      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f04:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004fe5 	.word	0x08004fe5
 8004f10:	08004fdd 	.word	0x08004fdd
 8004f14:	08004fdd 	.word	0x08004fdd
 8004f18:	08004fdd 	.word	0x08004fdd
 8004f1c:	08004fdd 	.word	0x08004fdd
 8004f20:	08004fdd 	.word	0x08004fdd
 8004f24:	08004fdd 	.word	0x08004fdd
 8004f28:	08004fdd 	.word	0x08004fdd
 8004f2c:	08004fb1 	.word	0x08004fb1
 8004f30:	08004fdd 	.word	0x08004fdd
 8004f34:	08004fdd 	.word	0x08004fdd
 8004f38:	08004fdd 	.word	0x08004fdd
 8004f3c:	08004fdd 	.word	0x08004fdd
 8004f40:	08004fdd 	.word	0x08004fdd
 8004f44:	08004fdd 	.word	0x08004fdd
 8004f48:	08004fdd 	.word	0x08004fdd
 8004f4c:	08004fc7 	.word	0x08004fc7
 8004f50:	08004fdd 	.word	0x08004fdd
 8004f54:	08004fdd 	.word	0x08004fdd
 8004f58:	08004fdd 	.word	0x08004fdd
 8004f5c:	08004fdd 	.word	0x08004fdd
 8004f60:	08004fdd 	.word	0x08004fdd
 8004f64:	08004fdd 	.word	0x08004fdd
 8004f68:	08004fdd 	.word	0x08004fdd
 8004f6c:	08004fe5 	.word	0x08004fe5
 8004f70:	08004fdd 	.word	0x08004fdd
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004fdd 	.word	0x08004fdd
 8004f7c:	08004fdd 	.word	0x08004fdd
 8004f80:	08004fdd 	.word	0x08004fdd
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004fdd 	.word	0x08004fdd
 8004f94:	08004fdd 	.word	0x08004fdd
 8004f98:	08004fdd 	.word	0x08004fdd
 8004f9c:	08004fdd 	.word	0x08004fdd
 8004fa0:	08004fdd 	.word	0x08004fdd
 8004fa4:	08004fdd 	.word	0x08004fdd
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	08004fe5 	.word	0x08004fe5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 ffc3 	bl	8005f44 <RCCEx_PLL2_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fc4:	e00f      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fca:	3328      	adds	r3, #40	@ 0x28
 8004fcc:	2101      	movs	r1, #1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f86a 	bl	80060a8 <RCCEx_PLL3_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fee:	4bbf      	ldr	r3, [pc, #764]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ffc:	4abb      	ldr	r2, [pc, #748]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ffe:	430b      	orrs	r3, r1
 8005000:	6553      	str	r3, [r2, #84]	@ 0x54
 8005002:	e003      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f002 0302 	and.w	r3, r2, #2
 8005018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005022:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005026:	460b      	mov	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	d041      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800502c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005032:	2b05      	cmp	r3, #5
 8005034:	d824      	bhi.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005036:	a201      	add	r2, pc, #4	@ (adr r2, 800503c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005089 	.word	0x08005089
 8005040:	08005055 	.word	0x08005055
 8005044:	0800506b 	.word	0x0800506b
 8005048:	08005089 	.word	0x08005089
 800504c:	08005089 	.word	0x08005089
 8005050:	08005089 	.word	0x08005089
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005058:	3308      	adds	r3, #8
 800505a:	2101      	movs	r1, #1
 800505c:	4618      	mov	r0, r3
 800505e:	f000 ff71 	bl	8005f44 <RCCEx_PLL2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005068:	e00f      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506e:	3328      	adds	r3, #40	@ 0x28
 8005070:	2101      	movs	r1, #1
 8005072:	4618      	mov	r0, r3
 8005074:	f001 f818 	bl	80060a8 <RCCEx_PLL3_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800507e:	e004      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005086:	e000      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005092:	4b96      	ldr	r3, [pc, #600]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	f023 0107 	bic.w	r1, r3, #7
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050a0:	4a92      	ldr	r2, [pc, #584]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050a2:	430b      	orrs	r3, r1
 80050a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80050a6:	e003      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f002 0304 	and.w	r3, r2, #4
 80050bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050c0:	2300      	movs	r3, #0
 80050c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4313      	orrs	r3, r2
 80050ce:	d044      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d8:	2b05      	cmp	r3, #5
 80050da:	d825      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80050dc:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005131 	.word	0x08005131
 80050e8:	080050fd 	.word	0x080050fd
 80050ec:	08005113 	.word	0x08005113
 80050f0:	08005131 	.word	0x08005131
 80050f4:	08005131 	.word	0x08005131
 80050f8:	08005131 	.word	0x08005131
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005100:	3308      	adds	r3, #8
 8005102:	2101      	movs	r1, #1
 8005104:	4618      	mov	r0, r3
 8005106:	f000 ff1d 	bl	8005f44 <RCCEx_PLL2_Config>
 800510a:	4603      	mov	r3, r0
 800510c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005110:	e00f      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005116:	3328      	adds	r3, #40	@ 0x28
 8005118:	2101      	movs	r1, #1
 800511a:	4618      	mov	r0, r3
 800511c:	f000 ffc4 	bl	80060a8 <RCCEx_PLL3_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005126:	e004      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800512e:	e000      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10b      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800513a:	4b6c      	ldr	r3, [pc, #432]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513e:	f023 0107 	bic.w	r1, r3, #7
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800514a:	4a68      	ldr	r2, [pc, #416]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800514c:	430b      	orrs	r3, r1
 800514e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005150:	e003      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f002 0320 	and.w	r3, r2, #32
 8005166:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800516a:	2300      	movs	r3, #0
 800516c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005174:	460b      	mov	r3, r1
 8005176:	4313      	orrs	r3, r2
 8005178:	d055      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005186:	d033      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800518c:	d82c      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005192:	d02f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005198:	d826      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800519a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800519e:	d02b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80051a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051a4:	d820      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051aa:	d012      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80051ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051b0:	d81a      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d022      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80051b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ba:	d115      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c0:	3308      	adds	r3, #8
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 febd 	bl	8005f44 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051d0:	e015      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d6:	3328      	adds	r3, #40	@ 0x28
 80051d8:	2102      	movs	r1, #2
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 ff64 	bl	80060a8 <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051e6:	e00a      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051ee:	e006      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051f0:	bf00      	nop
 80051f2:	e004      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051f4:	bf00      	nop
 80051f6:	e002      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051f8:	bf00      	nop
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005206:	4b39      	ldr	r3, [pc, #228]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005216:	4a35      	ldr	r2, [pc, #212]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005218:	430b      	orrs	r3, r1
 800521a:	6553      	str	r3, [r2, #84]	@ 0x54
 800521c:	e003      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800523c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	d058      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800524e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005252:	d033      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005254:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005258:	d82c      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525e:	d02f      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005264:	d826      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800526a:	d02b      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800526c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005270:	d820      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005276:	d012      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800527c:	d81a      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d022      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005286:	d115      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	3308      	adds	r3, #8
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fe57 	bl	8005f44 <RCCEx_PLL2_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800529c:	e015      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a2:	3328      	adds	r3, #40	@ 0x28
 80052a4:	2102      	movs	r1, #2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fefe 	bl	80060a8 <RCCEx_PLL3_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052b2:	e00a      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052ba:	e006      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052bc:	bf00      	nop
 80052be:	e004      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052c0:	bf00      	nop
 80052c2:	e002      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10e      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052e2:	4a02      	ldr	r2, [pc, #8]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052e8:	e006      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80052ea:	bf00      	nop
 80052ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005308:	2300      	movs	r3, #0
 800530a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800530e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005312:	460b      	mov	r3, r1
 8005314:	4313      	orrs	r3, r2
 8005316:	d055      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005320:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005324:	d033      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005326:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800532a:	d82c      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800532c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005330:	d02f      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005336:	d826      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005338:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800533c:	d02b      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800533e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005342:	d820      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005348:	d012      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800534a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800534e:	d81a      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d022      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005358:	d115      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	3308      	adds	r3, #8
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fdee 	bl	8005f44 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800536e:	e015      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005374:	3328      	adds	r3, #40	@ 0x28
 8005376:	2102      	movs	r1, #2
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fe95 	bl	80060a8 <RCCEx_PLL3_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005384:	e00a      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800538c:	e006      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800538e:	bf00      	nop
 8005390:	e004      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800539a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053a4:	4ba1      	ldr	r3, [pc, #644]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053b4:	4a9d      	ldr	r2, [pc, #628]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053b6:	430b      	orrs	r3, r1
 80053b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ba:	e003      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80053c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f002 0308 	and.w	r3, r2, #8
 80053d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	d01e      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f0:	d10c      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	3328      	adds	r3, #40	@ 0x28
 80053f8:	2102      	movs	r1, #2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fe54 	bl	80060a8 <RCCEx_PLL3_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800540c:	4b87      	ldr	r3, [pc, #540]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800540e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005410:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800541c:	4a83      	ldr	r2, [pc, #524]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800541e:	430b      	orrs	r3, r1
 8005420:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f002 0310 	and.w	r3, r2, #16
 800542e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005432:	2300      	movs	r3, #0
 8005434:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005438:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800543c:	460b      	mov	r3, r1
 800543e:	4313      	orrs	r3, r2
 8005440:	d01e      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005446:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800544a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800544e:	d10c      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005454:	3328      	adds	r3, #40	@ 0x28
 8005456:	2102      	movs	r1, #2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fe25 	bl	80060a8 <RCCEx_PLL3_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800546a:	4b70      	ldr	r3, [pc, #448]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800547a:	4a6c      	ldr	r2, [pc, #432]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800547c:	430b      	orrs	r3, r1
 800547e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800548c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005490:	2300      	movs	r3, #0
 8005492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005496:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800549a:	460b      	mov	r3, r1
 800549c:	4313      	orrs	r3, r2
 800549e:	d03e      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054ac:	d022      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80054ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054b2:	d81b      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054bc:	d00b      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80054be:	e015      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c4:	3308      	adds	r3, #8
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fd3b 	bl	8005f44 <RCCEx_PLL2_Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054d4:	e00f      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054da:	3328      	adds	r3, #40	@ 0x28
 80054dc:	2102      	movs	r1, #2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fde2 	bl	80060a8 <RCCEx_PLL3_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054ea:	e004      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054f2:	e000      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80054f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054fe:	4b4b      	ldr	r3, [pc, #300]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005502:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800550e:	4a47      	ldr	r2, [pc, #284]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005510:	430b      	orrs	r3, r1
 8005512:	6593      	str	r3, [r2, #88]	@ 0x58
 8005514:	e003      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800552a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800552c:	2300      	movs	r3, #0
 800552e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005530:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005534:	460b      	mov	r3, r1
 8005536:	4313      	orrs	r3, r2
 8005538:	d03b      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005542:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005546:	d01f      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005548:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800554c:	d818      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800554e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005552:	d003      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005558:	d007      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800555a:	e011      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800555c:	4b33      	ldr	r3, [pc, #204]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a32      	ldr	r2, [pc, #200]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005568:	e00f      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	3328      	adds	r3, #40	@ 0x28
 8005570:	2101      	movs	r1, #1
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fd98 	bl	80060a8 <RCCEx_PLL3_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800557e:	e004      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005586:	e000      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005592:	4b26      	ldr	r3, [pc, #152]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a2:	4a22      	ldr	r2, [pc, #136]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80055a8:	e003      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80055be:	673b      	str	r3, [r7, #112]	@ 0x70
 80055c0:	2300      	movs	r3, #0
 80055c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80055c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80055c8:	460b      	mov	r3, r1
 80055ca:	4313      	orrs	r3, r2
 80055cc:	d034      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80055d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055dc:	d007      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80055de:	e011      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e0:	4b12      	ldr	r3, [pc, #72]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	4a11      	ldr	r2, [pc, #68]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80055ec:	e00e      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	3308      	adds	r3, #8
 80055f4:	2102      	movs	r1, #2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fca4 	bl	8005f44 <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005602:	e003      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800560a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10d      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005614:	4b05      	ldr	r3, [pc, #20]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005618:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005622:	4a02      	ldr	r2, [pc, #8]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005624:	430b      	orrs	r3, r1
 8005626:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005628:	e006      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800562a:	bf00      	nop
 800562c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005634:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005646:	2300      	movs	r3, #0
 8005648:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800564a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d00c      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	3328      	adds	r3, #40	@ 0x28
 800565a:	2102      	movs	r1, #2
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fd23 	bl	80060a8 <RCCEx_PLL3_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800566e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800567a:	663b      	str	r3, [r7, #96]	@ 0x60
 800567c:	2300      	movs	r3, #0
 800567e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005680:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005684:	460b      	mov	r3, r1
 8005686:	4313      	orrs	r3, r2
 8005688:	d038      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005696:	d018      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800569c:	d811      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800569e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056a2:	d014      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056a8:	d80b      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d011      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b2:	d106      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b4:	4bc3      	ldr	r3, [pc, #780]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	4ac2      	ldr	r2, [pc, #776]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80056c0:	e008      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056c8:	e004      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056dc:	4bb9      	ldr	r3, [pc, #740]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ec:	4ab5      	ldr	r2, [pc, #724]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ee:	430b      	orrs	r3, r1
 80056f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80056f2:	e003      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005708:	65bb      	str	r3, [r7, #88]	@ 0x58
 800570a:	2300      	movs	r3, #0
 800570c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800570e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005712:	460b      	mov	r3, r1
 8005714:	4313      	orrs	r3, r2
 8005716:	d009      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005718:	4baa      	ldr	r3, [pc, #680]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800571a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800571c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005726:	4aa7      	ldr	r2, [pc, #668]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005728:	430b      	orrs	r3, r1
 800572a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800572c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005738:	653b      	str	r3, [r7, #80]	@ 0x50
 800573a:	2300      	movs	r3, #0
 800573c:	657b      	str	r3, [r7, #84]	@ 0x54
 800573e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005742:	460b      	mov	r3, r1
 8005744:	4313      	orrs	r3, r2
 8005746:	d00a      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005748:	4b9e      	ldr	r3, [pc, #632]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005754:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005758:	4a9a      	ldr	r2, [pc, #616]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800575a:	430b      	orrs	r3, r1
 800575c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800575e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800576a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800576c:	2300      	movs	r3, #0
 800576e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005770:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005774:	460b      	mov	r3, r1
 8005776:	4313      	orrs	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800577a:	4b92      	ldr	r3, [pc, #584]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800577c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005788:	4a8e      	ldr	r2, [pc, #568]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800578a:	430b      	orrs	r3, r1
 800578c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800579a:	643b      	str	r3, [r7, #64]	@ 0x40
 800579c:	2300      	movs	r3, #0
 800579e:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80057a4:	460b      	mov	r3, r1
 80057a6:	4313      	orrs	r3, r2
 80057a8:	d00e      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057aa:	4b86      	ldr	r3, [pc, #536]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	4a85      	ldr	r2, [pc, #532]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057b4:	6113      	str	r3, [r2, #16]
 80057b6:	4b83      	ldr	r3, [pc, #524]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057b8:	6919      	ldr	r1, [r3, #16]
 80057ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057c2:	4a80      	ldr	r2, [pc, #512]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80057d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057d6:	2300      	movs	r3, #0
 80057d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057de:	460b      	mov	r3, r1
 80057e0:	4313      	orrs	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057e4:	4b77      	ldr	r3, [pc, #476]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f2:	4a74      	ldr	r2, [pc, #464]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057f4:	430b      	orrs	r3, r1
 80057f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
 8005806:	2300      	movs	r3, #0
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
 800580a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005814:	4b6b      	ldr	r3, [pc, #428]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005818:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005824:	4a67      	ldr	r2, [pc, #412]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005826:	430b      	orrs	r3, r1
 8005828:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	2100      	movs	r1, #0
 8005834:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800583c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005840:	460b      	mov	r3, r1
 8005842:	4313      	orrs	r3, r2
 8005844:	d011      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584a:	3308      	adds	r3, #8
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fb78 	bl	8005f44 <RCCEx_PLL2_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	2100      	movs	r1, #0
 8005874:	6239      	str	r1, [r7, #32]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
 800587c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d011      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3308      	adds	r3, #8
 800588c:	2101      	movs	r1, #1
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fb58 	bl	8005f44 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800589a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	2100      	movs	r1, #0
 80058b4:	61b9      	str	r1, [r7, #24]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d011      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	3308      	adds	r3, #8
 80058cc:	2102      	movs	r1, #2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fb38 	bl	8005f44 <RCCEx_PLL2_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	2100      	movs	r1, #0
 80058f4:	6139      	str	r1, [r7, #16]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	d011      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	3328      	adds	r3, #40	@ 0x28
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fbca 	bl	80060a8 <RCCEx_PLL3_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800591a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	2100      	movs	r1, #0
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005940:	460b      	mov	r3, r1
 8005942:	4313      	orrs	r3, r2
 8005944:	d011      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	3328      	adds	r3, #40	@ 0x28
 800594c:	2101      	movs	r1, #1
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fbaa 	bl	80060a8 <RCCEx_PLL3_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800595a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	2100      	movs	r1, #0
 8005974:	6039      	str	r1, [r7, #0]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005980:	460b      	mov	r3, r1
 8005982:	4313      	orrs	r3, r2
 8005984:	d011      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598a:	3328      	adds	r3, #40	@ 0x28
 800598c:	2102      	movs	r1, #2
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fb8a 	bl	80060a8 <RCCEx_PLL3_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800599a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80059aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80059be:	46bd      	mov	sp, r7
 80059c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c4:	58024400 	.word	0x58024400

080059c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059cc:	f7fe fd96 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4904      	ldr	r1, [pc, #16]	@ (80059f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	58024400 	.word	0x58024400
 80059f0:	0800c464 	.word	0x0800c464

080059f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059fc:	4ba1      	ldr	r3, [pc, #644]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a06:	4b9f      	ldr	r3, [pc, #636]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	0b1b      	lsrs	r3, r3, #12
 8005a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a12:	4b9c      	ldr	r3, [pc, #624]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a1e:	4b99      	ldr	r3, [pc, #612]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a22:	08db      	lsrs	r3, r3, #3
 8005a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8111 	beq.w	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f000 8083 	beq.w	8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	f200 80a1 	bhi.w	8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d056      	beq.n	8005b0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005a5e:	e099      	b.n	8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a60:	4b88      	ldr	r3, [pc, #544]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02d      	beq.n	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a6c:	4b85      	ldr	r3, [pc, #532]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	08db      	lsrs	r3, r3, #3
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	4a84      	ldr	r2, [pc, #528]	@ (8005c88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a96:	4b7b      	ldr	r3, [pc, #492]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ac6:	e087      	b.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005c90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ada:	4b6a      	ldr	r3, [pc, #424]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b0a:	e065      	b.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b59      	ldr	r3, [pc, #356]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b4e:	e043      	b.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b48      	ldr	r3, [pc, #288]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	e021      	b.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b37      	ldr	r3, [pc, #220]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bdc:	0a5b      	lsrs	r3, r3, #9
 8005bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bfe:	ee17 2a90 	vmov	r2, s15
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c06:	4b1f      	ldr	r3, [pc, #124]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0a:	0c1b      	lsrs	r3, r3, #16
 8005c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2c:	ee17 2a90 	vmov	r2, s15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c34:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c38:	0e1b      	lsrs	r3, r3, #24
 8005c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c5a:	ee17 2a90 	vmov	r2, s15
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c62:	e008      	b.n	8005c76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
}
 8005c76:	bf00      	nop
 8005c78:	3724      	adds	r7, #36	@ 0x24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	58024400 	.word	0x58024400
 8005c88:	03d09000 	.word	0x03d09000
 8005c8c:	46000000 	.word	0x46000000
 8005c90:	4c742400 	.word	0x4c742400
 8005c94:	4a742400 	.word	0x4a742400
 8005c98:	4af42400 	.word	0x4af42400

08005c9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	@ 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca4:	4ba1      	ldr	r3, [pc, #644]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005cae:	4b9f      	ldr	r3, [pc, #636]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb2:	0d1b      	lsrs	r3, r3, #20
 8005cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005cba:	4b9c      	ldr	r3, [pc, #624]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005cc6:	4b99      	ldr	r3, [pc, #612]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cca:	08db      	lsrs	r3, r3, #3
 8005ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8111 	beq.w	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	f000 8083 	beq.w	8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	f200 80a1 	bhi.w	8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d056      	beq.n	8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d06:	e099      	b.n	8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d08:	4b88      	ldr	r3, [pc, #544]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d02d      	beq.n	8005d70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d14:	4b85      	ldr	r3, [pc, #532]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	08db      	lsrs	r3, r3, #3
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	4a84      	ldr	r2, [pc, #528]	@ (8005f30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d20:	fa22 f303 	lsr.w	r3, r2, r3
 8005d24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d6e:	e087      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d82:	4b6a      	ldr	r3, [pc, #424]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005db2:	e065      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc6:	4b59      	ldr	r3, [pc, #356]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df6:	e043      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0a:	4b48      	ldr	r3, [pc, #288]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e3a:	e021      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4e:	4b37      	ldr	r3, [pc, #220]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e80:	4b2a      	ldr	r3, [pc, #168]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	0a5b      	lsrs	r3, r3, #9
 8005e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea6:	ee17 2a90 	vmov	r2, s15
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005eae:	4b1f      	ldr	r3, [pc, #124]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb8:	ee07 3a90 	vmov	s15, r3
 8005ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed4:	ee17 2a90 	vmov	r2, s15
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005edc:	4b13      	ldr	r3, [pc, #76]	@ (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee0:	0e1b      	lsrs	r3, r3, #24
 8005ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f02:	ee17 2a90 	vmov	r2, s15
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f0a:	e008      	b.n	8005f1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]
}
 8005f1e:	bf00      	nop
 8005f20:	3724      	adds	r7, #36	@ 0x24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	03d09000 	.word	0x03d09000
 8005f34:	46000000 	.word	0x46000000
 8005f38:	4c742400 	.word	0x4c742400
 8005f3c:	4a742400 	.word	0x4a742400
 8005f40:	4af42400 	.word	0x4af42400

08005f44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f52:	4b53      	ldr	r3, [pc, #332]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d101      	bne.n	8005f62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e099      	b.n	8006096 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f62:	4b4f      	ldr	r3, [pc, #316]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a4e      	ldr	r2, [pc, #312]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005f68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6e:	f7fb f8f5 	bl	800115c <HAL_GetTick>
 8005f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f74:	e008      	b.n	8005f88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f76:	f7fb f8f1 	bl	800115c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e086      	b.n	8006096 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f88:	4b45      	ldr	r3, [pc, #276]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f0      	bne.n	8005f76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f94:	4b42      	ldr	r3, [pc, #264]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f98:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	493f      	ldr	r1, [pc, #252]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	025b      	lsls	r3, r3, #9
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	061b      	lsls	r3, r3, #24
 8005fd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fd8:	4931      	ldr	r1, [pc, #196]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005fde:	4b30      	ldr	r3, [pc, #192]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	492d      	ldr	r1, [pc, #180]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff4:	f023 0220 	bic.w	r2, r3, #32
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	4928      	ldr	r1, [pc, #160]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006002:	4b27      	ldr	r3, [pc, #156]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	4a26      	ldr	r2, [pc, #152]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006008:	f023 0310 	bic.w	r3, r3, #16
 800600c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800600e:	4b24      	ldr	r3, [pc, #144]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006012:	4b24      	ldr	r3, [pc, #144]	@ (80060a4 <RCCEx_PLL2_Config+0x160>)
 8006014:	4013      	ands	r3, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	69d2      	ldr	r2, [r2, #28]
 800601a:	00d2      	lsls	r2, r2, #3
 800601c:	4920      	ldr	r1, [pc, #128]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006022:	4b1f      	ldr	r3, [pc, #124]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006026:	4a1e      	ldr	r2, [pc, #120]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006028:	f043 0310 	orr.w	r3, r3, #16
 800602c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006034:	4b1a      	ldr	r3, [pc, #104]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006038:	4a19      	ldr	r2, [pc, #100]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 800603a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800603e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006040:	e00f      	b.n	8006062 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006048:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 800604a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604c:	4a14      	ldr	r2, [pc, #80]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 800604e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006052:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006054:	e005      	b.n	8006062 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006056:	4b12      	ldr	r3, [pc, #72]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	4a11      	ldr	r2, [pc, #68]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 800605c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006060:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006062:	4b0f      	ldr	r3, [pc, #60]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a0e      	ldr	r2, [pc, #56]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 8006068:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800606c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800606e:	f7fb f875 	bl	800115c <HAL_GetTick>
 8006072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006074:	e008      	b.n	8006088 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006076:	f7fb f871 	bl	800115c <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e006      	b.n	8006096 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <RCCEx_PLL2_Config+0x15c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f0      	beq.n	8006076 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	58024400 	.word	0x58024400
 80060a4:	ffff0007 	.word	0xffff0007

080060a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060b6:	4b53      	ldr	r3, [pc, #332]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d101      	bne.n	80060c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e099      	b.n	80061fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a4e      	ldr	r2, [pc, #312]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80060cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d2:	f7fb f843 	bl	800115c <HAL_GetTick>
 80060d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060d8:	e008      	b.n	80060ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060da:	f7fb f83f 	bl	800115c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e086      	b.n	80061fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060ec:	4b45      	ldr	r3, [pc, #276]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060f8:	4b42      	ldr	r3, [pc, #264]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	051b      	lsls	r3, r3, #20
 8006106:	493f      	ldr	r1, [pc, #252]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006108:	4313      	orrs	r3, r2
 800610a:	628b      	str	r3, [r1, #40]	@ 0x28
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	3b01      	subs	r3, #1
 8006112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	3b01      	subs	r3, #1
 800611c:	025b      	lsls	r3, r3, #9
 800611e:	b29b      	uxth	r3, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	3b01      	subs	r3, #1
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	3b01      	subs	r3, #1
 8006136:	061b      	lsls	r3, r3, #24
 8006138:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800613c:	4931      	ldr	r1, [pc, #196]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 800613e:	4313      	orrs	r3, r2
 8006140:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006142:	4b30      	ldr	r3, [pc, #192]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	492d      	ldr	r1, [pc, #180]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006150:	4313      	orrs	r3, r2
 8006152:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006154:	4b2b      	ldr	r3, [pc, #172]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	4928      	ldr	r1, [pc, #160]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006166:	4b27      	ldr	r3, [pc, #156]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	4a26      	ldr	r2, [pc, #152]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 800616c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006170:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006172:	4b24      	ldr	r3, [pc, #144]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006176:	4b24      	ldr	r3, [pc, #144]	@ (8006208 <RCCEx_PLL3_Config+0x160>)
 8006178:	4013      	ands	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	69d2      	ldr	r2, [r2, #28]
 800617e:	00d2      	lsls	r2, r2, #3
 8006180:	4920      	ldr	r1, [pc, #128]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006182:	4313      	orrs	r3, r2
 8006184:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006186:	4b1f      	ldr	r3, [pc, #124]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 800618c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006190:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006198:	4b1a      	ldr	r3, [pc, #104]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	4a19      	ldr	r2, [pc, #100]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 800619e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80061a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061a4:	e00f      	b.n	80061c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d106      	bne.n	80061ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80061ac:	4b15      	ldr	r3, [pc, #84]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	4a14      	ldr	r2, [pc, #80]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80061b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061b8:	e005      	b.n	80061c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80061ba:	4b12      	ldr	r3, [pc, #72]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061be:	4a11      	ldr	r2, [pc, #68]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80061c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a0e      	ldr	r2, [pc, #56]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80061cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d2:	f7fa ffc3 	bl	800115c <HAL_GetTick>
 80061d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061d8:	e008      	b.n	80061ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061da:	f7fa ffbf 	bl	800115c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e006      	b.n	80061fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061ec:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <RCCEx_PLL3_Config+0x15c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	58024400 	.word	0x58024400
 8006208:	ffff0007 	.word	0xffff0007

0800620c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e042      	b.n	80062a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006224:	2b00      	cmp	r3, #0
 8006226:	d106      	bne.n	8006236 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7fa fdb7 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2224      	movs	r2, #36	@ 0x24
 800623a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fd90 	bl	8006d7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f825 	bl	80062ac <UART_SetConfig>
 8006262:	4603      	mov	r3, r0
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e01b      	b.n	80062a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800627a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800628a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fe0f 	bl	8006ec0 <UART_CheckIdleState>
 80062a2:	4603      	mov	r3, r0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b0:	b092      	sub	sp, #72	@ 0x48
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4bbe      	ldr	r3, [pc, #760]	@ (80065d4 <UART_SetConfig+0x328>)
 80062dc:	4013      	ands	r3, r2
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062e4:	430b      	orrs	r3, r1
 80062e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4ab3      	ldr	r2, [pc, #716]	@ (80065d8 <UART_SetConfig+0x32c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006314:	4313      	orrs	r3, r2
 8006316:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	4baf      	ldr	r3, [pc, #700]	@ (80065dc <UART_SetConfig+0x330>)
 8006320:	4013      	ands	r3, r2
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006328:	430b      	orrs	r3, r1
 800632a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006332:	f023 010f 	bic.w	r1, r3, #15
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4aa6      	ldr	r2, [pc, #664]	@ (80065e0 <UART_SetConfig+0x334>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d177      	bne.n	800643c <UART_SetConfig+0x190>
 800634c:	4ba5      	ldr	r3, [pc, #660]	@ (80065e4 <UART_SetConfig+0x338>)
 800634e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006354:	2b28      	cmp	r3, #40	@ 0x28
 8006356:	d86d      	bhi.n	8006434 <UART_SetConfig+0x188>
 8006358:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <UART_SetConfig+0xb4>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006405 	.word	0x08006405
 8006364:	08006435 	.word	0x08006435
 8006368:	08006435 	.word	0x08006435
 800636c:	08006435 	.word	0x08006435
 8006370:	08006435 	.word	0x08006435
 8006374:	08006435 	.word	0x08006435
 8006378:	08006435 	.word	0x08006435
 800637c:	08006435 	.word	0x08006435
 8006380:	0800640d 	.word	0x0800640d
 8006384:	08006435 	.word	0x08006435
 8006388:	08006435 	.word	0x08006435
 800638c:	08006435 	.word	0x08006435
 8006390:	08006435 	.word	0x08006435
 8006394:	08006435 	.word	0x08006435
 8006398:	08006435 	.word	0x08006435
 800639c:	08006435 	.word	0x08006435
 80063a0:	08006415 	.word	0x08006415
 80063a4:	08006435 	.word	0x08006435
 80063a8:	08006435 	.word	0x08006435
 80063ac:	08006435 	.word	0x08006435
 80063b0:	08006435 	.word	0x08006435
 80063b4:	08006435 	.word	0x08006435
 80063b8:	08006435 	.word	0x08006435
 80063bc:	08006435 	.word	0x08006435
 80063c0:	0800641d 	.word	0x0800641d
 80063c4:	08006435 	.word	0x08006435
 80063c8:	08006435 	.word	0x08006435
 80063cc:	08006435 	.word	0x08006435
 80063d0:	08006435 	.word	0x08006435
 80063d4:	08006435 	.word	0x08006435
 80063d8:	08006435 	.word	0x08006435
 80063dc:	08006435 	.word	0x08006435
 80063e0:	08006425 	.word	0x08006425
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006435 	.word	0x08006435
 80063ec:	08006435 	.word	0x08006435
 80063f0:	08006435 	.word	0x08006435
 80063f4:	08006435 	.word	0x08006435
 80063f8:	08006435 	.word	0x08006435
 80063fc:	08006435 	.word	0x08006435
 8006400:	0800642d 	.word	0x0800642d
 8006404:	2301      	movs	r3, #1
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640a:	e222      	b.n	8006852 <UART_SetConfig+0x5a6>
 800640c:	2304      	movs	r3, #4
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e21e      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006414:	2308      	movs	r3, #8
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e21a      	b.n	8006852 <UART_SetConfig+0x5a6>
 800641c:	2310      	movs	r3, #16
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e216      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006424:	2320      	movs	r3, #32
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642a:	e212      	b.n	8006852 <UART_SetConfig+0x5a6>
 800642c:	2340      	movs	r3, #64	@ 0x40
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006432:	e20e      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006434:	2380      	movs	r3, #128	@ 0x80
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643a:	e20a      	b.n	8006852 <UART_SetConfig+0x5a6>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a69      	ldr	r2, [pc, #420]	@ (80065e8 <UART_SetConfig+0x33c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d130      	bne.n	80064a8 <UART_SetConfig+0x1fc>
 8006446:	4b67      	ldr	r3, [pc, #412]	@ (80065e4 <UART_SetConfig+0x338>)
 8006448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	2b05      	cmp	r3, #5
 8006450:	d826      	bhi.n	80064a0 <UART_SetConfig+0x1f4>
 8006452:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <UART_SetConfig+0x1ac>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	08006471 	.word	0x08006471
 800645c:	08006479 	.word	0x08006479
 8006460:	08006481 	.word	0x08006481
 8006464:	08006489 	.word	0x08006489
 8006468:	08006491 	.word	0x08006491
 800646c:	08006499 	.word	0x08006499
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006476:	e1ec      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006478:	2304      	movs	r3, #4
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647e:	e1e8      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006480:	2308      	movs	r3, #8
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e1e4      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006488:	2310      	movs	r3, #16
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e1e0      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006490:	2320      	movs	r3, #32
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006496:	e1dc      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006498:	2340      	movs	r3, #64	@ 0x40
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649e:	e1d8      	b.n	8006852 <UART_SetConfig+0x5a6>
 80064a0:	2380      	movs	r3, #128	@ 0x80
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a6:	e1d4      	b.n	8006852 <UART_SetConfig+0x5a6>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a4f      	ldr	r2, [pc, #316]	@ (80065ec <UART_SetConfig+0x340>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d130      	bne.n	8006514 <UART_SetConfig+0x268>
 80064b2:	4b4c      	ldr	r3, [pc, #304]	@ (80065e4 <UART_SetConfig+0x338>)
 80064b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	d826      	bhi.n	800650c <UART_SetConfig+0x260>
 80064be:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <UART_SetConfig+0x218>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064dd 	.word	0x080064dd
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064ed 	.word	0x080064ed
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e1b6      	b.n	8006852 <UART_SetConfig+0x5a6>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e1b2      	b.n	8006852 <UART_SetConfig+0x5a6>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e1ae      	b.n	8006852 <UART_SetConfig+0x5a6>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e1aa      	b.n	8006852 <UART_SetConfig+0x5a6>
 80064fc:	2320      	movs	r3, #32
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e1a6      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006504:	2340      	movs	r3, #64	@ 0x40
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e1a2      	b.n	8006852 <UART_SetConfig+0x5a6>
 800650c:	2380      	movs	r3, #128	@ 0x80
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e19e      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a35      	ldr	r2, [pc, #212]	@ (80065f0 <UART_SetConfig+0x344>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d130      	bne.n	8006580 <UART_SetConfig+0x2d4>
 800651e:	4b31      	ldr	r3, [pc, #196]	@ (80065e4 <UART_SetConfig+0x338>)
 8006520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	2b05      	cmp	r3, #5
 8006528:	d826      	bhi.n	8006578 <UART_SetConfig+0x2cc>
 800652a:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <UART_SetConfig+0x284>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006549 	.word	0x08006549
 8006534:	08006551 	.word	0x08006551
 8006538:	08006559 	.word	0x08006559
 800653c:	08006561 	.word	0x08006561
 8006540:	08006569 	.word	0x08006569
 8006544:	08006571 	.word	0x08006571
 8006548:	2300      	movs	r3, #0
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e180      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006550:	2304      	movs	r3, #4
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e17c      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006558:	2308      	movs	r3, #8
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e178      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006560:	2310      	movs	r3, #16
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e174      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006568:	2320      	movs	r3, #32
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e170      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006570:	2340      	movs	r3, #64	@ 0x40
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006576:	e16c      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006578:	2380      	movs	r3, #128	@ 0x80
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657e:	e168      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <UART_SetConfig+0x348>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d142      	bne.n	8006610 <UART_SetConfig+0x364>
 800658a:	4b16      	ldr	r3, [pc, #88]	@ (80065e4 <UART_SetConfig+0x338>)
 800658c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	2b05      	cmp	r3, #5
 8006594:	d838      	bhi.n	8006608 <UART_SetConfig+0x35c>
 8006596:	a201      	add	r2, pc, #4	@ (adr r2, 800659c <UART_SetConfig+0x2f0>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065b5 	.word	0x080065b5
 80065a0:	080065bd 	.word	0x080065bd
 80065a4:	080065c5 	.word	0x080065c5
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065f9 	.word	0x080065f9
 80065b0:	08006601 	.word	0x08006601
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e14a      	b.n	8006852 <UART_SetConfig+0x5a6>
 80065bc:	2304      	movs	r3, #4
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c2:	e146      	b.n	8006852 <UART_SetConfig+0x5a6>
 80065c4:	2308      	movs	r3, #8
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ca:	e142      	b.n	8006852 <UART_SetConfig+0x5a6>
 80065cc:	2310      	movs	r3, #16
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d2:	e13e      	b.n	8006852 <UART_SetConfig+0x5a6>
 80065d4:	cfff69f3 	.word	0xcfff69f3
 80065d8:	58000c00 	.word	0x58000c00
 80065dc:	11fff4ff 	.word	0x11fff4ff
 80065e0:	40011000 	.word	0x40011000
 80065e4:	58024400 	.word	0x58024400
 80065e8:	40004400 	.word	0x40004400
 80065ec:	40004800 	.word	0x40004800
 80065f0:	40004c00 	.word	0x40004c00
 80065f4:	40005000 	.word	0x40005000
 80065f8:	2320      	movs	r3, #32
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fe:	e128      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006600:	2340      	movs	r3, #64	@ 0x40
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006606:	e124      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006608:	2380      	movs	r3, #128	@ 0x80
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660e:	e120      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4acb      	ldr	r2, [pc, #812]	@ (8006944 <UART_SetConfig+0x698>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d176      	bne.n	8006708 <UART_SetConfig+0x45c>
 800661a:	4bcb      	ldr	r3, [pc, #812]	@ (8006948 <UART_SetConfig+0x69c>)
 800661c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006622:	2b28      	cmp	r3, #40	@ 0x28
 8006624:	d86c      	bhi.n	8006700 <UART_SetConfig+0x454>
 8006626:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <UART_SetConfig+0x380>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	080066d1 	.word	0x080066d1
 8006630:	08006701 	.word	0x08006701
 8006634:	08006701 	.word	0x08006701
 8006638:	08006701 	.word	0x08006701
 800663c:	08006701 	.word	0x08006701
 8006640:	08006701 	.word	0x08006701
 8006644:	08006701 	.word	0x08006701
 8006648:	08006701 	.word	0x08006701
 800664c:	080066d9 	.word	0x080066d9
 8006650:	08006701 	.word	0x08006701
 8006654:	08006701 	.word	0x08006701
 8006658:	08006701 	.word	0x08006701
 800665c:	08006701 	.word	0x08006701
 8006660:	08006701 	.word	0x08006701
 8006664:	08006701 	.word	0x08006701
 8006668:	08006701 	.word	0x08006701
 800666c:	080066e1 	.word	0x080066e1
 8006670:	08006701 	.word	0x08006701
 8006674:	08006701 	.word	0x08006701
 8006678:	08006701 	.word	0x08006701
 800667c:	08006701 	.word	0x08006701
 8006680:	08006701 	.word	0x08006701
 8006684:	08006701 	.word	0x08006701
 8006688:	08006701 	.word	0x08006701
 800668c:	080066e9 	.word	0x080066e9
 8006690:	08006701 	.word	0x08006701
 8006694:	08006701 	.word	0x08006701
 8006698:	08006701 	.word	0x08006701
 800669c:	08006701 	.word	0x08006701
 80066a0:	08006701 	.word	0x08006701
 80066a4:	08006701 	.word	0x08006701
 80066a8:	08006701 	.word	0x08006701
 80066ac:	080066f1 	.word	0x080066f1
 80066b0:	08006701 	.word	0x08006701
 80066b4:	08006701 	.word	0x08006701
 80066b8:	08006701 	.word	0x08006701
 80066bc:	08006701 	.word	0x08006701
 80066c0:	08006701 	.word	0x08006701
 80066c4:	08006701 	.word	0x08006701
 80066c8:	08006701 	.word	0x08006701
 80066cc:	080066f9 	.word	0x080066f9
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e0bc      	b.n	8006852 <UART_SetConfig+0x5a6>
 80066d8:	2304      	movs	r3, #4
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e0b8      	b.n	8006852 <UART_SetConfig+0x5a6>
 80066e0:	2308      	movs	r3, #8
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e0b4      	b.n	8006852 <UART_SetConfig+0x5a6>
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e0b0      	b.n	8006852 <UART_SetConfig+0x5a6>
 80066f0:	2320      	movs	r3, #32
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e0ac      	b.n	8006852 <UART_SetConfig+0x5a6>
 80066f8:	2340      	movs	r3, #64	@ 0x40
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fe:	e0a8      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006700:	2380      	movs	r3, #128	@ 0x80
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006706:	e0a4      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a8f      	ldr	r2, [pc, #572]	@ (800694c <UART_SetConfig+0x6a0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d130      	bne.n	8006774 <UART_SetConfig+0x4c8>
 8006712:	4b8d      	ldr	r3, [pc, #564]	@ (8006948 <UART_SetConfig+0x69c>)
 8006714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b05      	cmp	r3, #5
 800671c:	d826      	bhi.n	800676c <UART_SetConfig+0x4c0>
 800671e:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <UART_SetConfig+0x478>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	0800673d 	.word	0x0800673d
 8006728:	08006745 	.word	0x08006745
 800672c:	0800674d 	.word	0x0800674d
 8006730:	08006755 	.word	0x08006755
 8006734:	0800675d 	.word	0x0800675d
 8006738:	08006765 	.word	0x08006765
 800673c:	2300      	movs	r3, #0
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e086      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006744:	2304      	movs	r3, #4
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e082      	b.n	8006852 <UART_SetConfig+0x5a6>
 800674c:	2308      	movs	r3, #8
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e07e      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006754:	2310      	movs	r3, #16
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e07a      	b.n	8006852 <UART_SetConfig+0x5a6>
 800675c:	2320      	movs	r3, #32
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e076      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006764:	2340      	movs	r3, #64	@ 0x40
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676a:	e072      	b.n	8006852 <UART_SetConfig+0x5a6>
 800676c:	2380      	movs	r3, #128	@ 0x80
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006772:	e06e      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a75      	ldr	r2, [pc, #468]	@ (8006950 <UART_SetConfig+0x6a4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d130      	bne.n	80067e0 <UART_SetConfig+0x534>
 800677e:	4b72      	ldr	r3, [pc, #456]	@ (8006948 <UART_SetConfig+0x69c>)
 8006780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b05      	cmp	r3, #5
 8006788:	d826      	bhi.n	80067d8 <UART_SetConfig+0x52c>
 800678a:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <UART_SetConfig+0x4e4>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067a9 	.word	0x080067a9
 8006794:	080067b1 	.word	0x080067b1
 8006798:	080067b9 	.word	0x080067b9
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067c9 	.word	0x080067c9
 80067a4:	080067d1 	.word	0x080067d1
 80067a8:	2300      	movs	r3, #0
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e050      	b.n	8006852 <UART_SetConfig+0x5a6>
 80067b0:	2304      	movs	r3, #4
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e04c      	b.n	8006852 <UART_SetConfig+0x5a6>
 80067b8:	2308      	movs	r3, #8
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e048      	b.n	8006852 <UART_SetConfig+0x5a6>
 80067c0:	2310      	movs	r3, #16
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e044      	b.n	8006852 <UART_SetConfig+0x5a6>
 80067c8:	2320      	movs	r3, #32
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e040      	b.n	8006852 <UART_SetConfig+0x5a6>
 80067d0:	2340      	movs	r3, #64	@ 0x40
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d6:	e03c      	b.n	8006852 <UART_SetConfig+0x5a6>
 80067d8:	2380      	movs	r3, #128	@ 0x80
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067de:	e038      	b.n	8006852 <UART_SetConfig+0x5a6>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a5b      	ldr	r2, [pc, #364]	@ (8006954 <UART_SetConfig+0x6a8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d130      	bne.n	800684c <UART_SetConfig+0x5a0>
 80067ea:	4b57      	ldr	r3, [pc, #348]	@ (8006948 <UART_SetConfig+0x69c>)
 80067ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	2b05      	cmp	r3, #5
 80067f4:	d826      	bhi.n	8006844 <UART_SetConfig+0x598>
 80067f6:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <UART_SetConfig+0x550>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	08006815 	.word	0x08006815
 8006800:	0800681d 	.word	0x0800681d
 8006804:	08006825 	.word	0x08006825
 8006808:	0800682d 	.word	0x0800682d
 800680c:	08006835 	.word	0x08006835
 8006810:	0800683d 	.word	0x0800683d
 8006814:	2302      	movs	r3, #2
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e01a      	b.n	8006852 <UART_SetConfig+0x5a6>
 800681c:	2304      	movs	r3, #4
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006822:	e016      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006824:	2308      	movs	r3, #8
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682a:	e012      	b.n	8006852 <UART_SetConfig+0x5a6>
 800682c:	2310      	movs	r3, #16
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006832:	e00e      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006834:	2320      	movs	r3, #32
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683a:	e00a      	b.n	8006852 <UART_SetConfig+0x5a6>
 800683c:	2340      	movs	r3, #64	@ 0x40
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006842:	e006      	b.n	8006852 <UART_SetConfig+0x5a6>
 8006844:	2380      	movs	r3, #128	@ 0x80
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684a:	e002      	b.n	8006852 <UART_SetConfig+0x5a6>
 800684c:	2380      	movs	r3, #128	@ 0x80
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a3f      	ldr	r2, [pc, #252]	@ (8006954 <UART_SetConfig+0x6a8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	f040 80f8 	bne.w	8006a4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800685e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006862:	2b20      	cmp	r3, #32
 8006864:	dc46      	bgt.n	80068f4 <UART_SetConfig+0x648>
 8006866:	2b02      	cmp	r3, #2
 8006868:	f2c0 8082 	blt.w	8006970 <UART_SetConfig+0x6c4>
 800686c:	3b02      	subs	r3, #2
 800686e:	2b1e      	cmp	r3, #30
 8006870:	d87e      	bhi.n	8006970 <UART_SetConfig+0x6c4>
 8006872:	a201      	add	r2, pc, #4	@ (adr r2, 8006878 <UART_SetConfig+0x5cc>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	080068fb 	.word	0x080068fb
 800687c:	08006971 	.word	0x08006971
 8006880:	08006903 	.word	0x08006903
 8006884:	08006971 	.word	0x08006971
 8006888:	08006971 	.word	0x08006971
 800688c:	08006971 	.word	0x08006971
 8006890:	08006913 	.word	0x08006913
 8006894:	08006971 	.word	0x08006971
 8006898:	08006971 	.word	0x08006971
 800689c:	08006971 	.word	0x08006971
 80068a0:	08006971 	.word	0x08006971
 80068a4:	08006971 	.word	0x08006971
 80068a8:	08006971 	.word	0x08006971
 80068ac:	08006971 	.word	0x08006971
 80068b0:	08006923 	.word	0x08006923
 80068b4:	08006971 	.word	0x08006971
 80068b8:	08006971 	.word	0x08006971
 80068bc:	08006971 	.word	0x08006971
 80068c0:	08006971 	.word	0x08006971
 80068c4:	08006971 	.word	0x08006971
 80068c8:	08006971 	.word	0x08006971
 80068cc:	08006971 	.word	0x08006971
 80068d0:	08006971 	.word	0x08006971
 80068d4:	08006971 	.word	0x08006971
 80068d8:	08006971 	.word	0x08006971
 80068dc:	08006971 	.word	0x08006971
 80068e0:	08006971 	.word	0x08006971
 80068e4:	08006971 	.word	0x08006971
 80068e8:	08006971 	.word	0x08006971
 80068ec:	08006971 	.word	0x08006971
 80068f0:	08006963 	.word	0x08006963
 80068f4:	2b40      	cmp	r3, #64	@ 0x40
 80068f6:	d037      	beq.n	8006968 <UART_SetConfig+0x6bc>
 80068f8:	e03a      	b.n	8006970 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068fa:	f7ff f865 	bl	80059c8 <HAL_RCCEx_GetD3PCLK1Freq>
 80068fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006900:	e03c      	b.n	800697c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff f874 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006910:	e034      	b.n	800697c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006912:	f107 0318 	add.w	r3, r7, #24
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff f9c0 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006920:	e02c      	b.n	800697c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006922:	4b09      	ldr	r3, [pc, #36]	@ (8006948 <UART_SetConfig+0x69c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d016      	beq.n	800695c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800692e:	4b06      	ldr	r3, [pc, #24]	@ (8006948 <UART_SetConfig+0x69c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	08db      	lsrs	r3, r3, #3
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	4a07      	ldr	r2, [pc, #28]	@ (8006958 <UART_SetConfig+0x6ac>)
 800693a:	fa22 f303 	lsr.w	r3, r2, r3
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006940:	e01c      	b.n	800697c <UART_SetConfig+0x6d0>
 8006942:	bf00      	nop
 8006944:	40011400 	.word	0x40011400
 8006948:	58024400 	.word	0x58024400
 800694c:	40007800 	.word	0x40007800
 8006950:	40007c00 	.word	0x40007c00
 8006954:	58000c00 	.word	0x58000c00
 8006958:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800695c:	4b9d      	ldr	r3, [pc, #628]	@ (8006bd4 <UART_SetConfig+0x928>)
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006960:	e00c      	b.n	800697c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006962:	4b9d      	ldr	r3, [pc, #628]	@ (8006bd8 <UART_SetConfig+0x92c>)
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006966:	e009      	b.n	800697c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800696e:	e005      	b.n	800697c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800697a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800697c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 81de 	beq.w	8006d40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	4a94      	ldr	r2, [pc, #592]	@ (8006bdc <UART_SetConfig+0x930>)
 800698a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800698e:	461a      	mov	r2, r3
 8006990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006992:	fbb3 f3f2 	udiv	r3, r3, r2
 8006996:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	4613      	mov	r3, r2
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	4413      	add	r3, r2
 80069a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d305      	bcc.n	80069b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d903      	bls.n	80069bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069ba:	e1c1      	b.n	8006d40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069be:	2200      	movs	r2, #0
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	60fa      	str	r2, [r7, #12]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	4a84      	ldr	r2, [pc, #528]	@ (8006bdc <UART_SetConfig+0x930>)
 80069ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2200      	movs	r2, #0
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069de:	f7f9 fc7b 	bl	80002d8 <__aeabi_uldivmod>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4610      	mov	r0, r2
 80069e8:	4619      	mov	r1, r3
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	020b      	lsls	r3, r1, #8
 80069f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069f8:	0202      	lsls	r2, r0, #8
 80069fa:	6979      	ldr	r1, [r7, #20]
 80069fc:	6849      	ldr	r1, [r1, #4]
 80069fe:	0849      	lsrs	r1, r1, #1
 8006a00:	2000      	movs	r0, #0
 8006a02:	460c      	mov	r4, r1
 8006a04:	4605      	mov	r5, r0
 8006a06:	eb12 0804 	adds.w	r8, r2, r4
 8006a0a:	eb43 0905 	adc.w	r9, r3, r5
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	469a      	mov	sl, r3
 8006a16:	4693      	mov	fp, r2
 8006a18:	4652      	mov	r2, sl
 8006a1a:	465b      	mov	r3, fp
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	4649      	mov	r1, r9
 8006a20:	f7f9 fc5a 	bl	80002d8 <__aeabi_uldivmod>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4613      	mov	r3, r2
 8006a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a32:	d308      	bcc.n	8006a46 <UART_SetConfig+0x79a>
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a3a:	d204      	bcs.n	8006a46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a42:	60da      	str	r2, [r3, #12]
 8006a44:	e17c      	b.n	8006d40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a4c:	e178      	b.n	8006d40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a56:	f040 80c5 	bne.w	8006be4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	dc48      	bgt.n	8006af4 <UART_SetConfig+0x848>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	db7b      	blt.n	8006b5e <UART_SetConfig+0x8b2>
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d879      	bhi.n	8006b5e <UART_SetConfig+0x8b2>
 8006a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <UART_SetConfig+0x7c4>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006afb 	.word	0x08006afb
 8006a74:	08006b03 	.word	0x08006b03
 8006a78:	08006b5f 	.word	0x08006b5f
 8006a7c:	08006b5f 	.word	0x08006b5f
 8006a80:	08006b0b 	.word	0x08006b0b
 8006a84:	08006b5f 	.word	0x08006b5f
 8006a88:	08006b5f 	.word	0x08006b5f
 8006a8c:	08006b5f 	.word	0x08006b5f
 8006a90:	08006b1b 	.word	0x08006b1b
 8006a94:	08006b5f 	.word	0x08006b5f
 8006a98:	08006b5f 	.word	0x08006b5f
 8006a9c:	08006b5f 	.word	0x08006b5f
 8006aa0:	08006b5f 	.word	0x08006b5f
 8006aa4:	08006b5f 	.word	0x08006b5f
 8006aa8:	08006b5f 	.word	0x08006b5f
 8006aac:	08006b5f 	.word	0x08006b5f
 8006ab0:	08006b2b 	.word	0x08006b2b
 8006ab4:	08006b5f 	.word	0x08006b5f
 8006ab8:	08006b5f 	.word	0x08006b5f
 8006abc:	08006b5f 	.word	0x08006b5f
 8006ac0:	08006b5f 	.word	0x08006b5f
 8006ac4:	08006b5f 	.word	0x08006b5f
 8006ac8:	08006b5f 	.word	0x08006b5f
 8006acc:	08006b5f 	.word	0x08006b5f
 8006ad0:	08006b5f 	.word	0x08006b5f
 8006ad4:	08006b5f 	.word	0x08006b5f
 8006ad8:	08006b5f 	.word	0x08006b5f
 8006adc:	08006b5f 	.word	0x08006b5f
 8006ae0:	08006b5f 	.word	0x08006b5f
 8006ae4:	08006b5f 	.word	0x08006b5f
 8006ae8:	08006b5f 	.word	0x08006b5f
 8006aec:	08006b5f 	.word	0x08006b5f
 8006af0:	08006b51 	.word	0x08006b51
 8006af4:	2b40      	cmp	r3, #64	@ 0x40
 8006af6:	d02e      	beq.n	8006b56 <UART_SetConfig+0x8aa>
 8006af8:	e031      	b.n	8006b5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006afa:	f7fd fd2f 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8006afe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b00:	e033      	b.n	8006b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b02:	f7fd fd41 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8006b06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b08:	e02f      	b.n	8006b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe ff70 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b18:	e027      	b.n	8006b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b1a:	f107 0318 	add.w	r3, r7, #24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff f8bc 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b28:	e01f      	b.n	8006b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8006be0 <UART_SetConfig+0x934>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b36:	4b2a      	ldr	r3, [pc, #168]	@ (8006be0 <UART_SetConfig+0x934>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	08db      	lsrs	r3, r3, #3
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	4a24      	ldr	r2, [pc, #144]	@ (8006bd4 <UART_SetConfig+0x928>)
 8006b42:	fa22 f303 	lsr.w	r3, r2, r3
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b48:	e00f      	b.n	8006b6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b4a:	4b22      	ldr	r3, [pc, #136]	@ (8006bd4 <UART_SetConfig+0x928>)
 8006b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b4e:	e00c      	b.n	8006b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b50:	4b21      	ldr	r3, [pc, #132]	@ (8006bd8 <UART_SetConfig+0x92c>)
 8006b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b54:	e009      	b.n	8006b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b5c:	e005      	b.n	8006b6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80e7 	beq.w	8006d40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b76:	4a19      	ldr	r2, [pc, #100]	@ (8006bdc <UART_SetConfig+0x930>)
 8006b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b84:	005a      	lsls	r2, r3, #1
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	441a      	add	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	2b0f      	cmp	r3, #15
 8006b9c:	d916      	bls.n	8006bcc <UART_SetConfig+0x920>
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba4:	d212      	bcs.n	8006bcc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f023 030f 	bic.w	r3, r3, #15
 8006bae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006bc8:	60da      	str	r2, [r3, #12]
 8006bca:	e0b9      	b.n	8006d40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bd2:	e0b5      	b.n	8006d40 <UART_SetConfig+0xa94>
 8006bd4:	03d09000 	.word	0x03d09000
 8006bd8:	003d0900 	.word	0x003d0900
 8006bdc:	0800c474 	.word	0x0800c474
 8006be0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006be4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	dc49      	bgt.n	8006c80 <UART_SetConfig+0x9d4>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	db7c      	blt.n	8006cea <UART_SetConfig+0xa3e>
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d87a      	bhi.n	8006cea <UART_SetConfig+0xa3e>
 8006bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bfc <UART_SetConfig+0x950>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c87 	.word	0x08006c87
 8006c00:	08006c8f 	.word	0x08006c8f
 8006c04:	08006ceb 	.word	0x08006ceb
 8006c08:	08006ceb 	.word	0x08006ceb
 8006c0c:	08006c97 	.word	0x08006c97
 8006c10:	08006ceb 	.word	0x08006ceb
 8006c14:	08006ceb 	.word	0x08006ceb
 8006c18:	08006ceb 	.word	0x08006ceb
 8006c1c:	08006ca7 	.word	0x08006ca7
 8006c20:	08006ceb 	.word	0x08006ceb
 8006c24:	08006ceb 	.word	0x08006ceb
 8006c28:	08006ceb 	.word	0x08006ceb
 8006c2c:	08006ceb 	.word	0x08006ceb
 8006c30:	08006ceb 	.word	0x08006ceb
 8006c34:	08006ceb 	.word	0x08006ceb
 8006c38:	08006ceb 	.word	0x08006ceb
 8006c3c:	08006cb7 	.word	0x08006cb7
 8006c40:	08006ceb 	.word	0x08006ceb
 8006c44:	08006ceb 	.word	0x08006ceb
 8006c48:	08006ceb 	.word	0x08006ceb
 8006c4c:	08006ceb 	.word	0x08006ceb
 8006c50:	08006ceb 	.word	0x08006ceb
 8006c54:	08006ceb 	.word	0x08006ceb
 8006c58:	08006ceb 	.word	0x08006ceb
 8006c5c:	08006ceb 	.word	0x08006ceb
 8006c60:	08006ceb 	.word	0x08006ceb
 8006c64:	08006ceb 	.word	0x08006ceb
 8006c68:	08006ceb 	.word	0x08006ceb
 8006c6c:	08006ceb 	.word	0x08006ceb
 8006c70:	08006ceb 	.word	0x08006ceb
 8006c74:	08006ceb 	.word	0x08006ceb
 8006c78:	08006ceb 	.word	0x08006ceb
 8006c7c:	08006cdd 	.word	0x08006cdd
 8006c80:	2b40      	cmp	r3, #64	@ 0x40
 8006c82:	d02e      	beq.n	8006ce2 <UART_SetConfig+0xa36>
 8006c84:	e031      	b.n	8006cea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c86:	f7fd fc69 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8006c8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c8c:	e033      	b.n	8006cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c8e:	f7fd fc7b 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8006c92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c94:	e02f      	b.n	8006cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe feaa 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca4:	e027      	b.n	8006cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca6:	f107 0318 	add.w	r3, r7, #24
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe fff6 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb4:	e01f      	b.n	8006cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d6c <UART_SetConfig+0xac0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d009      	beq.n	8006cd6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d6c <UART_SetConfig+0xac0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	08db      	lsrs	r3, r3, #3
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	4a28      	ldr	r2, [pc, #160]	@ (8006d70 <UART_SetConfig+0xac4>)
 8006cce:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cd4:	e00f      	b.n	8006cf6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006cd6:	4b26      	ldr	r3, [pc, #152]	@ (8006d70 <UART_SetConfig+0xac4>)
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cda:	e00c      	b.n	8006cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cdc:	4b25      	ldr	r3, [pc, #148]	@ (8006d74 <UART_SetConfig+0xac8>)
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce0:	e009      	b.n	8006cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce8:	e005      	b.n	8006cf6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006cf4:	bf00      	nop
    }

    if (pclk != 0U)
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d021      	beq.n	8006d40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	4a1d      	ldr	r2, [pc, #116]	@ (8006d78 <UART_SetConfig+0xacc>)
 8006d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d06:	461a      	mov	r2, r3
 8006d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	441a      	add	r2, r3
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	2b0f      	cmp	r3, #15
 8006d24:	d909      	bls.n	8006d3a <UART_SetConfig+0xa8e>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2c:	d205      	bcs.n	8006d3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60da      	str	r2, [r3, #12]
 8006d38:	e002      	b.n	8006d40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2200      	movs	r2, #0
 8006d54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d5c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3748      	adds	r7, #72	@ 0x48
 8006d64:	46bd      	mov	sp, r7
 8006d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d6a:	bf00      	nop
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	03d09000 	.word	0x03d09000
 8006d74:	003d0900 	.word	0x003d0900
 8006d78:	0800c474 	.word	0x0800c474

08006d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00a      	beq.n	8006dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01a      	beq.n	8006e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e7a:	d10a      	bne.n	8006e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]
  }
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b098      	sub	sp, #96	@ 0x60
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ed0:	f7fa f944 	bl	800115c <HAL_GetTick>
 8006ed4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d12f      	bne.n	8006f44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eec:	2200      	movs	r2, #0
 8006eee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f88e 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d022      	beq.n	8006f44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e6      	bne.n	8006efe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e063      	b.n	800700c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d149      	bne.n	8006fe6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f857 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d03c      	beq.n	8006fe6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	623b      	str	r3, [r7, #32]
   return(result);
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e6      	bne.n	8006f6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f023 0301 	bic.w	r3, r3, #1
 8006fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3308      	adds	r3, #8
 8006fbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fbe:	61fa      	str	r2, [r7, #28]
 8006fc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	69b9      	ldr	r1, [r7, #24]
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	617b      	str	r3, [r7, #20]
   return(result);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e5      	bne.n	8006f9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e012      	b.n	800700c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3758      	adds	r7, #88	@ 0x58
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007024:	e04f      	b.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d04b      	beq.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702e:	f7fa f895 	bl	800115c <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	429a      	cmp	r2, r3
 800703c:	d302      	bcc.n	8007044 <UART_WaitOnFlagUntilTimeout+0x30>
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e04e      	b.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d037      	beq.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b80      	cmp	r3, #128	@ 0x80
 800705a:	d034      	beq.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b40      	cmp	r3, #64	@ 0x40
 8007060:	d031      	beq.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b08      	cmp	r3, #8
 800706e:	d110      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2208      	movs	r2, #8
 8007076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f839 	bl	80070f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2208      	movs	r2, #8
 8007082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e029      	b.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800709c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070a0:	d111      	bne.n	80070c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f81f 	bl	80070f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e00f      	b.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69da      	ldr	r2, [r3, #28]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4013      	ands	r3, r2
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	bf0c      	ite	eq
 80070d6:	2301      	moveq	r3, #1
 80070d8:	2300      	movne	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d0a0      	beq.n	8007026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b095      	sub	sp, #84	@ 0x54
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800710c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007116:	643b      	str	r3, [r7, #64]	@ 0x40
 8007118:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800711c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e6      	bne.n	80070f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3308      	adds	r3, #8
 8007130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	61fb      	str	r3, [r7, #28]
   return(result);
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	4b1e      	ldr	r3, [pc, #120]	@ (80071b8 <UART_EndRxTransfer+0xc8>)
 800713e:	4013      	ands	r3, r2
 8007140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800714a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800714c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e5      	bne.n	800712a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007162:	2b01      	cmp	r3, #1
 8007164:	d118      	bne.n	8007198 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	60bb      	str	r3, [r7, #8]
   return(result);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f023 0310 	bic.w	r3, r3, #16
 800717a:	647b      	str	r3, [r7, #68]	@ 0x44
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6979      	ldr	r1, [r7, #20]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	613b      	str	r3, [r7, #16]
   return(result);
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e6      	bne.n	8007166 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071ac:	bf00      	nop
 80071ae:	3754      	adds	r7, #84	@ 0x54
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	effffffe 	.word	0xeffffffe

080071bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e027      	b.n	8007222 <HAL_UARTEx_DisableFifoMode+0x66>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2224      	movs	r2, #36	@ 0x24
 80071de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007200:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007242:	2302      	movs	r3, #2
 8007244:	e02d      	b.n	80072a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2224      	movs	r2, #36	@ 0x24
 8007252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0201 	bic.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f850 	bl	8007328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072be:	2302      	movs	r3, #2
 80072c0:	e02d      	b.n	800731e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2224      	movs	r2, #36	@ 0x24
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0201 	bic.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f812 	bl	8007328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007348:	e031      	b.n	80073ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800734a:	2310      	movs	r3, #16
 800734c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800734e:	2310      	movs	r3, #16
 8007350:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	0e5b      	lsrs	r3, r3, #25
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	0f5b      	lsrs	r3, r3, #29
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	7b3a      	ldrb	r2, [r7, #12]
 8007376:	4911      	ldr	r1, [pc, #68]	@ (80073bc <UARTEx_SetNbDataToProcess+0x94>)
 8007378:	5c8a      	ldrb	r2, [r1, r2]
 800737a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800737e:	7b3a      	ldrb	r2, [r7, #12]
 8007380:	490f      	ldr	r1, [pc, #60]	@ (80073c0 <UARTEx_SetNbDataToProcess+0x98>)
 8007382:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007384:	fb93 f3f2 	sdiv	r3, r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	7b7a      	ldrb	r2, [r7, #13]
 8007394:	4909      	ldr	r1, [pc, #36]	@ (80073bc <UARTEx_SetNbDataToProcess+0x94>)
 8007396:	5c8a      	ldrb	r2, [r1, r2]
 8007398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800739c:	7b7a      	ldrb	r2, [r7, #13]
 800739e:	4908      	ldr	r1, [pc, #32]	@ (80073c0 <UARTEx_SetNbDataToProcess+0x98>)
 80073a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	0800c48c 	.word	0x0800c48c
 80073c0:	0800c494 	.word	0x0800c494

080073c4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e03c      	b.n	8007450 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7f9 fc4c 	bl	8000c88 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f85b 	bl	80074c4 <USART_SetConfig>
 800740e:	4603      	mov	r3, r0
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e01b      	b.n	8007450 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007426:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007436:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0201 	orr.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fd5b 	bl	8007f04 <USART_CheckIdleState>
 800744e:	4603      	mov	r3, r0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	4613      	mov	r3, r2
 8007466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007468:	e018      	b.n	800749c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d014      	beq.n	800749c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007472:	f7f9 fe73 	bl	800115c <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	429a      	cmp	r2, r3
 8007480:	d302      	bcc.n	8007488 <USART_WaitOnFlagUntilTimeout+0x30>
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e00f      	b.n	80074bc <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69da      	ldr	r2, [r3, #28]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	4013      	ands	r3, r2
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	bf0c      	ite	eq
 80074ac:	2301      	moveq	r3, #1
 80074ae:	2300      	movne	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d0d7      	beq.n	800746a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	@ 0x38
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80074d2:	2300      	movs	r3, #0
 80074d4:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4bc9      	ldr	r3, [pc, #804]	@ (8007818 <USART_SetConfig+0x354>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6812      	ldr	r2, [r2, #0]
 80074fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8007500:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800750c:	4313      	orrs	r3, r2
 800750e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699a      	ldr	r2, [r3, #24]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	4313      	orrs	r3, r2
 800751a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800751c:	4313      	orrs	r3, r2
 800751e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007526:	4313      	orrs	r3, r2
 8007528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	4bba      	ldr	r3, [pc, #744]	@ (800781c <USART_SetConfig+0x358>)
 8007532:	4013      	ands	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800753a:	430b      	orrs	r3, r1
 800753c:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	f023 010f 	bic.w	r1, r3, #15
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4ab1      	ldr	r2, [pc, #708]	@ (8007820 <USART_SetConfig+0x35c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d176      	bne.n	800764c <USART_SetConfig+0x188>
 800755e:	4bb1      	ldr	r3, [pc, #708]	@ (8007824 <USART_SetConfig+0x360>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007566:	2b28      	cmp	r3, #40	@ 0x28
 8007568:	d86c      	bhi.n	8007644 <USART_SetConfig+0x180>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <USART_SetConfig+0xac>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	08007615 	.word	0x08007615
 8007574:	08007645 	.word	0x08007645
 8007578:	08007645 	.word	0x08007645
 800757c:	08007645 	.word	0x08007645
 8007580:	08007645 	.word	0x08007645
 8007584:	08007645 	.word	0x08007645
 8007588:	08007645 	.word	0x08007645
 800758c:	08007645 	.word	0x08007645
 8007590:	0800761d 	.word	0x0800761d
 8007594:	08007645 	.word	0x08007645
 8007598:	08007645 	.word	0x08007645
 800759c:	08007645 	.word	0x08007645
 80075a0:	08007645 	.word	0x08007645
 80075a4:	08007645 	.word	0x08007645
 80075a8:	08007645 	.word	0x08007645
 80075ac:	08007645 	.word	0x08007645
 80075b0:	08007625 	.word	0x08007625
 80075b4:	08007645 	.word	0x08007645
 80075b8:	08007645 	.word	0x08007645
 80075bc:	08007645 	.word	0x08007645
 80075c0:	08007645 	.word	0x08007645
 80075c4:	08007645 	.word	0x08007645
 80075c8:	08007645 	.word	0x08007645
 80075cc:	08007645 	.word	0x08007645
 80075d0:	0800762d 	.word	0x0800762d
 80075d4:	08007645 	.word	0x08007645
 80075d8:	08007645 	.word	0x08007645
 80075dc:	08007645 	.word	0x08007645
 80075e0:	08007645 	.word	0x08007645
 80075e4:	08007645 	.word	0x08007645
 80075e8:	08007645 	.word	0x08007645
 80075ec:	08007645 	.word	0x08007645
 80075f0:	08007635 	.word	0x08007635
 80075f4:	08007645 	.word	0x08007645
 80075f8:	08007645 	.word	0x08007645
 80075fc:	08007645 	.word	0x08007645
 8007600:	08007645 	.word	0x08007645
 8007604:	08007645 	.word	0x08007645
 8007608:	08007645 	.word	0x08007645
 800760c:	08007645 	.word	0x08007645
 8007610:	0800763d 	.word	0x0800763d
 8007614:	2301      	movs	r3, #1
 8007616:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800761a:	e112      	b.n	8007842 <USART_SetConfig+0x37e>
 800761c:	2302      	movs	r3, #2
 800761e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007622:	e10e      	b.n	8007842 <USART_SetConfig+0x37e>
 8007624:	2304      	movs	r3, #4
 8007626:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800762a:	e10a      	b.n	8007842 <USART_SetConfig+0x37e>
 800762c:	2308      	movs	r3, #8
 800762e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007632:	e106      	b.n	8007842 <USART_SetConfig+0x37e>
 8007634:	2310      	movs	r3, #16
 8007636:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800763a:	e102      	b.n	8007842 <USART_SetConfig+0x37e>
 800763c:	2320      	movs	r3, #32
 800763e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007642:	e0fe      	b.n	8007842 <USART_SetConfig+0x37e>
 8007644:	2340      	movs	r3, #64	@ 0x40
 8007646:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800764a:	e0fa      	b.n	8007842 <USART_SetConfig+0x37e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a75      	ldr	r2, [pc, #468]	@ (8007828 <USART_SetConfig+0x364>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d130      	bne.n	80076b8 <USART_SetConfig+0x1f4>
 8007656:	4b73      	ldr	r3, [pc, #460]	@ (8007824 <USART_SetConfig+0x360>)
 8007658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b05      	cmp	r3, #5
 8007660:	d826      	bhi.n	80076b0 <USART_SetConfig+0x1ec>
 8007662:	a201      	add	r2, pc, #4	@ (adr r2, 8007668 <USART_SetConfig+0x1a4>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	08007681 	.word	0x08007681
 800766c:	08007689 	.word	0x08007689
 8007670:	08007691 	.word	0x08007691
 8007674:	08007699 	.word	0x08007699
 8007678:	080076a1 	.word	0x080076a1
 800767c:	080076a9 	.word	0x080076a9
 8007680:	2300      	movs	r3, #0
 8007682:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007686:	e0dc      	b.n	8007842 <USART_SetConfig+0x37e>
 8007688:	2302      	movs	r3, #2
 800768a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800768e:	e0d8      	b.n	8007842 <USART_SetConfig+0x37e>
 8007690:	2304      	movs	r3, #4
 8007692:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007696:	e0d4      	b.n	8007842 <USART_SetConfig+0x37e>
 8007698:	2308      	movs	r3, #8
 800769a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800769e:	e0d0      	b.n	8007842 <USART_SetConfig+0x37e>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80076a6:	e0cc      	b.n	8007842 <USART_SetConfig+0x37e>
 80076a8:	2320      	movs	r3, #32
 80076aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80076ae:	e0c8      	b.n	8007842 <USART_SetConfig+0x37e>
 80076b0:	2340      	movs	r3, #64	@ 0x40
 80076b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80076b6:	e0c4      	b.n	8007842 <USART_SetConfig+0x37e>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a5b      	ldr	r2, [pc, #364]	@ (800782c <USART_SetConfig+0x368>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d130      	bne.n	8007724 <USART_SetConfig+0x260>
 80076c2:	4b58      	ldr	r3, [pc, #352]	@ (8007824 <USART_SetConfig+0x360>)
 80076c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d826      	bhi.n	800771c <USART_SetConfig+0x258>
 80076ce:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <USART_SetConfig+0x210>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	080076ed 	.word	0x080076ed
 80076d8:	080076f5 	.word	0x080076f5
 80076dc:	080076fd 	.word	0x080076fd
 80076e0:	08007705 	.word	0x08007705
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	08007715 	.word	0x08007715
 80076ec:	2300      	movs	r3, #0
 80076ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80076f2:	e0a6      	b.n	8007842 <USART_SetConfig+0x37e>
 80076f4:	2302      	movs	r3, #2
 80076f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80076fa:	e0a2      	b.n	8007842 <USART_SetConfig+0x37e>
 80076fc:	2304      	movs	r3, #4
 80076fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007702:	e09e      	b.n	8007842 <USART_SetConfig+0x37e>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800770a:	e09a      	b.n	8007842 <USART_SetConfig+0x37e>
 800770c:	2310      	movs	r3, #16
 800770e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007712:	e096      	b.n	8007842 <USART_SetConfig+0x37e>
 8007714:	2320      	movs	r3, #32
 8007716:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800771a:	e092      	b.n	8007842 <USART_SetConfig+0x37e>
 800771c:	2340      	movs	r3, #64	@ 0x40
 800771e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007722:	e08e      	b.n	8007842 <USART_SetConfig+0x37e>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a41      	ldr	r2, [pc, #260]	@ (8007830 <USART_SetConfig+0x36c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	f040 8086 	bne.w	800783c <USART_SetConfig+0x378>
 8007730:	4b3c      	ldr	r3, [pc, #240]	@ (8007824 <USART_SetConfig+0x360>)
 8007732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007734:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007738:	2b28      	cmp	r3, #40	@ 0x28
 800773a:	d87b      	bhi.n	8007834 <USART_SetConfig+0x370>
 800773c:	a201      	add	r2, pc, #4	@ (adr r2, 8007744 <USART_SetConfig+0x280>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	080077e9 	.word	0x080077e9
 8007748:	08007835 	.word	0x08007835
 800774c:	08007835 	.word	0x08007835
 8007750:	08007835 	.word	0x08007835
 8007754:	08007835 	.word	0x08007835
 8007758:	08007835 	.word	0x08007835
 800775c:	08007835 	.word	0x08007835
 8007760:	08007835 	.word	0x08007835
 8007764:	080077f1 	.word	0x080077f1
 8007768:	08007835 	.word	0x08007835
 800776c:	08007835 	.word	0x08007835
 8007770:	08007835 	.word	0x08007835
 8007774:	08007835 	.word	0x08007835
 8007778:	08007835 	.word	0x08007835
 800777c:	08007835 	.word	0x08007835
 8007780:	08007835 	.word	0x08007835
 8007784:	080077f9 	.word	0x080077f9
 8007788:	08007835 	.word	0x08007835
 800778c:	08007835 	.word	0x08007835
 8007790:	08007835 	.word	0x08007835
 8007794:	08007835 	.word	0x08007835
 8007798:	08007835 	.word	0x08007835
 800779c:	08007835 	.word	0x08007835
 80077a0:	08007835 	.word	0x08007835
 80077a4:	08007801 	.word	0x08007801
 80077a8:	08007835 	.word	0x08007835
 80077ac:	08007835 	.word	0x08007835
 80077b0:	08007835 	.word	0x08007835
 80077b4:	08007835 	.word	0x08007835
 80077b8:	08007835 	.word	0x08007835
 80077bc:	08007835 	.word	0x08007835
 80077c0:	08007835 	.word	0x08007835
 80077c4:	08007809 	.word	0x08007809
 80077c8:	08007835 	.word	0x08007835
 80077cc:	08007835 	.word	0x08007835
 80077d0:	08007835 	.word	0x08007835
 80077d4:	08007835 	.word	0x08007835
 80077d8:	08007835 	.word	0x08007835
 80077dc:	08007835 	.word	0x08007835
 80077e0:	08007835 	.word	0x08007835
 80077e4:	08007811 	.word	0x08007811
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80077ee:	e028      	b.n	8007842 <USART_SetConfig+0x37e>
 80077f0:	2302      	movs	r3, #2
 80077f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80077f6:	e024      	b.n	8007842 <USART_SetConfig+0x37e>
 80077f8:	2304      	movs	r3, #4
 80077fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80077fe:	e020      	b.n	8007842 <USART_SetConfig+0x37e>
 8007800:	2308      	movs	r3, #8
 8007802:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007806:	e01c      	b.n	8007842 <USART_SetConfig+0x37e>
 8007808:	2310      	movs	r3, #16
 800780a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800780e:	e018      	b.n	8007842 <USART_SetConfig+0x37e>
 8007810:	2320      	movs	r3, #32
 8007812:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007816:	e014      	b.n	8007842 <USART_SetConfig+0x37e>
 8007818:	cfff69f3 	.word	0xcfff69f3
 800781c:	ffffc0f6 	.word	0xffffc0f6
 8007820:	40011000 	.word	0x40011000
 8007824:	58024400 	.word	0x58024400
 8007828:	40004400 	.word	0x40004400
 800782c:	40004800 	.word	0x40004800
 8007830:	40011400 	.word	0x40011400
 8007834:	2340      	movs	r3, #64	@ 0x40
 8007836:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800783a:	e002      	b.n	8007842 <USART_SetConfig+0x37e>
 800783c:	2340      	movs	r3, #64	@ 0x40
 800783e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 8007842:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007846:	2b20      	cmp	r3, #32
 8007848:	f200 8329 	bhi.w	8007e9e <USART_SetConfig+0x9da>
 800784c:	a201      	add	r2, pc, #4	@ (adr r2, 8007854 <USART_SetConfig+0x390>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	080078d9 	.word	0x080078d9
 8007858:	0800798f 	.word	0x0800798f
 800785c:	08007a45 	.word	0x08007a45
 8007860:	08007e9f 	.word	0x08007e9f
 8007864:	08007aff 	.word	0x08007aff
 8007868:	08007e9f 	.word	0x08007e9f
 800786c:	08007e9f 	.word	0x08007e9f
 8007870:	08007e9f 	.word	0x08007e9f
 8007874:	08007bb9 	.word	0x08007bb9
 8007878:	08007e9f 	.word	0x08007e9f
 800787c:	08007e9f 	.word	0x08007e9f
 8007880:	08007e9f 	.word	0x08007e9f
 8007884:	08007e9f 	.word	0x08007e9f
 8007888:	08007e9f 	.word	0x08007e9f
 800788c:	08007e9f 	.word	0x08007e9f
 8007890:	08007e9f 	.word	0x08007e9f
 8007894:	08007d31 	.word	0x08007d31
 8007898:	08007e9f 	.word	0x08007e9f
 800789c:	08007e9f 	.word	0x08007e9f
 80078a0:	08007e9f 	.word	0x08007e9f
 80078a4:	08007e9f 	.word	0x08007e9f
 80078a8:	08007e9f 	.word	0x08007e9f
 80078ac:	08007e9f 	.word	0x08007e9f
 80078b0:	08007e9f 	.word	0x08007e9f
 80078b4:	08007e9f 	.word	0x08007e9f
 80078b8:	08007e9f 	.word	0x08007e9f
 80078bc:	08007e9f 	.word	0x08007e9f
 80078c0:	08007e9f 	.word	0x08007e9f
 80078c4:	08007e9f 	.word	0x08007e9f
 80078c8:	08007e9f 	.word	0x08007e9f
 80078cc:	08007e9f 	.word	0x08007e9f
 80078d0:	08007e9f 	.word	0x08007e9f
 80078d4:	08007ded 	.word	0x08007ded
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80078d8:	f7fc fe40 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 80078dc:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d044      	beq.n	8007970 <USART_SetConfig+0x4ac>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d03e      	beq.n	800796c <USART_SetConfig+0x4a8>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d038      	beq.n	8007968 <USART_SetConfig+0x4a4>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d032      	beq.n	8007964 <USART_SetConfig+0x4a0>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007902:	2b04      	cmp	r3, #4
 8007904:	d02c      	beq.n	8007960 <USART_SetConfig+0x49c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790a:	2b05      	cmp	r3, #5
 800790c:	d026      	beq.n	800795c <USART_SetConfig+0x498>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007912:	2b06      	cmp	r3, #6
 8007914:	d020      	beq.n	8007958 <USART_SetConfig+0x494>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791a:	2b07      	cmp	r3, #7
 800791c:	d01a      	beq.n	8007954 <USART_SetConfig+0x490>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007922:	2b08      	cmp	r3, #8
 8007924:	d014      	beq.n	8007950 <USART_SetConfig+0x48c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792a:	2b09      	cmp	r3, #9
 800792c:	d00e      	beq.n	800794c <USART_SetConfig+0x488>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	2b0a      	cmp	r3, #10
 8007934:	d008      	beq.n	8007948 <USART_SetConfig+0x484>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793a:	2b0b      	cmp	r3, #11
 800793c:	d102      	bne.n	8007944 <USART_SetConfig+0x480>
 800793e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007942:	e016      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007944:	2301      	movs	r3, #1
 8007946:	e014      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007948:	2380      	movs	r3, #128	@ 0x80
 800794a:	e012      	b.n	8007972 <USART_SetConfig+0x4ae>
 800794c:	2340      	movs	r3, #64	@ 0x40
 800794e:	e010      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007950:	2320      	movs	r3, #32
 8007952:	e00e      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007954:	2310      	movs	r3, #16
 8007956:	e00c      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007958:	230c      	movs	r3, #12
 800795a:	e00a      	b.n	8007972 <USART_SetConfig+0x4ae>
 800795c:	230a      	movs	r3, #10
 800795e:	e008      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007960:	2308      	movs	r3, #8
 8007962:	e006      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007964:	2306      	movs	r3, #6
 8007966:	e004      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007968:	2304      	movs	r3, #4
 800796a:	e002      	b.n	8007972 <USART_SetConfig+0x4ae>
 800796c:	2302      	movs	r3, #2
 800796e:	e000      	b.n	8007972 <USART_SetConfig+0x4ae>
 8007970:	2301      	movs	r3, #1
 8007972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007974:	fbb2 f3f3 	udiv	r3, r2, r3
 8007978:	005a      	lsls	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	441a      	add	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	fbb2 f3f3 	udiv	r3, r2, r3
 800798a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800798c:	e28b      	b.n	8007ea6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800798e:	f7fc fdfb 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8007992:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007998:	2b00      	cmp	r3, #0
 800799a:	d044      	beq.n	8007a26 <USART_SetConfig+0x562>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d03e      	beq.n	8007a22 <USART_SetConfig+0x55e>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d038      	beq.n	8007a1e <USART_SetConfig+0x55a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d032      	beq.n	8007a1a <USART_SetConfig+0x556>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d02c      	beq.n	8007a16 <USART_SetConfig+0x552>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	2b05      	cmp	r3, #5
 80079c2:	d026      	beq.n	8007a12 <USART_SetConfig+0x54e>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c8:	2b06      	cmp	r3, #6
 80079ca:	d020      	beq.n	8007a0e <USART_SetConfig+0x54a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d0:	2b07      	cmp	r3, #7
 80079d2:	d01a      	beq.n	8007a0a <USART_SetConfig+0x546>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d014      	beq.n	8007a06 <USART_SetConfig+0x542>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e0:	2b09      	cmp	r3, #9
 80079e2:	d00e      	beq.n	8007a02 <USART_SetConfig+0x53e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e8:	2b0a      	cmp	r3, #10
 80079ea:	d008      	beq.n	80079fe <USART_SetConfig+0x53a>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	2b0b      	cmp	r3, #11
 80079f2:	d102      	bne.n	80079fa <USART_SetConfig+0x536>
 80079f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079f8:	e016      	b.n	8007a28 <USART_SetConfig+0x564>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e014      	b.n	8007a28 <USART_SetConfig+0x564>
 80079fe:	2380      	movs	r3, #128	@ 0x80
 8007a00:	e012      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a02:	2340      	movs	r3, #64	@ 0x40
 8007a04:	e010      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a06:	2320      	movs	r3, #32
 8007a08:	e00e      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a0a:	2310      	movs	r3, #16
 8007a0c:	e00c      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	e00a      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a12:	230a      	movs	r3, #10
 8007a14:	e008      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a16:	2308      	movs	r3, #8
 8007a18:	e006      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a1a:	2306      	movs	r3, #6
 8007a1c:	e004      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a1e:	2304      	movs	r3, #4
 8007a20:	e002      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e000      	b.n	8007a28 <USART_SetConfig+0x564>
 8007a26:	2301      	movs	r3, #1
 8007a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2e:	005a      	lsls	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	441a      	add	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a40:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007a42:	e230      	b.n	8007ea6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a44:	f107 0318 	add.w	r3, r7, #24
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fd ffd3 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d044      	beq.n	8007ae2 <USART_SetConfig+0x61e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d03e      	beq.n	8007ade <USART_SetConfig+0x61a>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d038      	beq.n	8007ada <USART_SetConfig+0x616>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d032      	beq.n	8007ad6 <USART_SetConfig+0x612>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d02c      	beq.n	8007ad2 <USART_SetConfig+0x60e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7c:	2b05      	cmp	r3, #5
 8007a7e:	d026      	beq.n	8007ace <USART_SetConfig+0x60a>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	2b06      	cmp	r3, #6
 8007a86:	d020      	beq.n	8007aca <USART_SetConfig+0x606>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8c:	2b07      	cmp	r3, #7
 8007a8e:	d01a      	beq.n	8007ac6 <USART_SetConfig+0x602>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d014      	beq.n	8007ac2 <USART_SetConfig+0x5fe>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	d00e      	beq.n	8007abe <USART_SetConfig+0x5fa>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	2b0a      	cmp	r3, #10
 8007aa6:	d008      	beq.n	8007aba <USART_SetConfig+0x5f6>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aac:	2b0b      	cmp	r3, #11
 8007aae:	d102      	bne.n	8007ab6 <USART_SetConfig+0x5f2>
 8007ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ab4:	e016      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e014      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007aba:	2380      	movs	r3, #128	@ 0x80
 8007abc:	e012      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007abe:	2340      	movs	r3, #64	@ 0x40
 8007ac0:	e010      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ac2:	2320      	movs	r3, #32
 8007ac4:	e00e      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ac6:	2310      	movs	r3, #16
 8007ac8:	e00c      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007aca:	230c      	movs	r3, #12
 8007acc:	e00a      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ace:	230a      	movs	r3, #10
 8007ad0:	e008      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ad2:	2308      	movs	r3, #8
 8007ad4:	e006      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ad6:	2306      	movs	r3, #6
 8007ad8:	e004      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ada:	2304      	movs	r3, #4
 8007adc:	e002      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e000      	b.n	8007ae4 <USART_SetConfig+0x620>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae8:	005a      	lsls	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	085b      	lsrs	r3, r3, #1
 8007af0:	441a      	add	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afa:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8007afc:	e1d3      	b.n	8007ea6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007afe:	f107 030c 	add.w	r3, r7, #12
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe f8ca 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d044      	beq.n	8007b9c <USART_SetConfig+0x6d8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d03e      	beq.n	8007b98 <USART_SetConfig+0x6d4>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d038      	beq.n	8007b94 <USART_SetConfig+0x6d0>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d032      	beq.n	8007b90 <USART_SetConfig+0x6cc>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d02c      	beq.n	8007b8c <USART_SetConfig+0x6c8>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b36:	2b05      	cmp	r3, #5
 8007b38:	d026      	beq.n	8007b88 <USART_SetConfig+0x6c4>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	2b06      	cmp	r3, #6
 8007b40:	d020      	beq.n	8007b84 <USART_SetConfig+0x6c0>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b46:	2b07      	cmp	r3, #7
 8007b48:	d01a      	beq.n	8007b80 <USART_SetConfig+0x6bc>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d014      	beq.n	8007b7c <USART_SetConfig+0x6b8>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	2b09      	cmp	r3, #9
 8007b58:	d00e      	beq.n	8007b78 <USART_SetConfig+0x6b4>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5e:	2b0a      	cmp	r3, #10
 8007b60:	d008      	beq.n	8007b74 <USART_SetConfig+0x6b0>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b66:	2b0b      	cmp	r3, #11
 8007b68:	d102      	bne.n	8007b70 <USART_SetConfig+0x6ac>
 8007b6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b6e:	e016      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e014      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b74:	2380      	movs	r3, #128	@ 0x80
 8007b76:	e012      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b78:	2340      	movs	r3, #64	@ 0x40
 8007b7a:	e010      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b7c:	2320      	movs	r3, #32
 8007b7e:	e00e      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b80:	2310      	movs	r3, #16
 8007b82:	e00c      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b84:	230c      	movs	r3, #12
 8007b86:	e00a      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b88:	230a      	movs	r3, #10
 8007b8a:	e008      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	e006      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b90:	2306      	movs	r3, #6
 8007b92:	e004      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b94:	2304      	movs	r3, #4
 8007b96:	e002      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e000      	b.n	8007b9e <USART_SetConfig+0x6da>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba2:	005a      	lsls	r2, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	441a      	add	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8007bb6:	e176      	b.n	8007ea6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bb8:	4b89      	ldr	r3, [pc, #548]	@ (8007de0 <USART_SetConfig+0x91c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d05d      	beq.n	8007c80 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 8007bc4:	4b86      	ldr	r3, [pc, #536]	@ (8007de0 <USART_SetConfig+0x91c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	08db      	lsrs	r3, r3, #3
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	4a85      	ldr	r2, [pc, #532]	@ (8007de4 <USART_SetConfig+0x920>)
 8007bd0:	40da      	lsrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d044      	beq.n	8007c64 <USART_SetConfig+0x7a0>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d03e      	beq.n	8007c60 <USART_SetConfig+0x79c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d038      	beq.n	8007c5c <USART_SetConfig+0x798>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d032      	beq.n	8007c58 <USART_SetConfig+0x794>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d02c      	beq.n	8007c54 <USART_SetConfig+0x790>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d026      	beq.n	8007c50 <USART_SetConfig+0x78c>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c06:	2b06      	cmp	r3, #6
 8007c08:	d020      	beq.n	8007c4c <USART_SetConfig+0x788>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	2b07      	cmp	r3, #7
 8007c10:	d01a      	beq.n	8007c48 <USART_SetConfig+0x784>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d014      	beq.n	8007c44 <USART_SetConfig+0x780>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	2b09      	cmp	r3, #9
 8007c20:	d00e      	beq.n	8007c40 <USART_SetConfig+0x77c>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	2b0a      	cmp	r3, #10
 8007c28:	d008      	beq.n	8007c3c <USART_SetConfig+0x778>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2e:	2b0b      	cmp	r3, #11
 8007c30:	d102      	bne.n	8007c38 <USART_SetConfig+0x774>
 8007c32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c36:	e016      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e014      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c3c:	2380      	movs	r3, #128	@ 0x80
 8007c3e:	e012      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c40:	2340      	movs	r3, #64	@ 0x40
 8007c42:	e010      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c44:	2320      	movs	r3, #32
 8007c46:	e00e      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	e00c      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c4c:	230c      	movs	r3, #12
 8007c4e:	e00a      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c50:	230a      	movs	r3, #10
 8007c52:	e008      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c54:	2308      	movs	r3, #8
 8007c56:	e006      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c58:	2306      	movs	r3, #6
 8007c5a:	e004      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	e002      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e000      	b.n	8007c66 <USART_SetConfig+0x7a2>
 8007c64:	2301      	movs	r3, #1
 8007c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6a:	005a      	lsls	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	441a      	add	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8007c7e:	e112      	b.n	8007ea6 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d044      	beq.n	8007d12 <USART_SetConfig+0x84e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d03e      	beq.n	8007d0e <USART_SetConfig+0x84a>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d038      	beq.n	8007d0a <USART_SetConfig+0x846>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d032      	beq.n	8007d06 <USART_SetConfig+0x842>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	d02c      	beq.n	8007d02 <USART_SetConfig+0x83e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	d026      	beq.n	8007cfe <USART_SetConfig+0x83a>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	2b06      	cmp	r3, #6
 8007cb6:	d020      	beq.n	8007cfa <USART_SetConfig+0x836>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbc:	2b07      	cmp	r3, #7
 8007cbe:	d01a      	beq.n	8007cf6 <USART_SetConfig+0x832>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d014      	beq.n	8007cf2 <USART_SetConfig+0x82e>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ccc:	2b09      	cmp	r3, #9
 8007cce:	d00e      	beq.n	8007cee <USART_SetConfig+0x82a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	2b0a      	cmp	r3, #10
 8007cd6:	d008      	beq.n	8007cea <USART_SetConfig+0x826>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cdc:	2b0b      	cmp	r3, #11
 8007cde:	d102      	bne.n	8007ce6 <USART_SetConfig+0x822>
 8007ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ce4:	e016      	b.n	8007d14 <USART_SetConfig+0x850>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e014      	b.n	8007d14 <USART_SetConfig+0x850>
 8007cea:	2380      	movs	r3, #128	@ 0x80
 8007cec:	e012      	b.n	8007d14 <USART_SetConfig+0x850>
 8007cee:	2340      	movs	r3, #64	@ 0x40
 8007cf0:	e010      	b.n	8007d14 <USART_SetConfig+0x850>
 8007cf2:	2320      	movs	r3, #32
 8007cf4:	e00e      	b.n	8007d14 <USART_SetConfig+0x850>
 8007cf6:	2310      	movs	r3, #16
 8007cf8:	e00c      	b.n	8007d14 <USART_SetConfig+0x850>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	e00a      	b.n	8007d14 <USART_SetConfig+0x850>
 8007cfe:	230a      	movs	r3, #10
 8007d00:	e008      	b.n	8007d14 <USART_SetConfig+0x850>
 8007d02:	2308      	movs	r3, #8
 8007d04:	e006      	b.n	8007d14 <USART_SetConfig+0x850>
 8007d06:	2306      	movs	r3, #6
 8007d08:	e004      	b.n	8007d14 <USART_SetConfig+0x850>
 8007d0a:	2304      	movs	r3, #4
 8007d0c:	e002      	b.n	8007d14 <USART_SetConfig+0x850>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e000      	b.n	8007d14 <USART_SetConfig+0x850>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4a33      	ldr	r2, [pc, #204]	@ (8007de4 <USART_SetConfig+0x920>)
 8007d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1a:	005a      	lsls	r2, r3, #1
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	085b      	lsrs	r3, r3, #1
 8007d22:	441a      	add	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007d2e:	e0ba      	b.n	8007ea6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d044      	beq.n	8007dc2 <USART_SetConfig+0x8fe>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d03e      	beq.n	8007dbe <USART_SetConfig+0x8fa>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d038      	beq.n	8007dba <USART_SetConfig+0x8f6>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d032      	beq.n	8007db6 <USART_SetConfig+0x8f2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d02c      	beq.n	8007db2 <USART_SetConfig+0x8ee>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5c:	2b05      	cmp	r3, #5
 8007d5e:	d026      	beq.n	8007dae <USART_SetConfig+0x8ea>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d64:	2b06      	cmp	r3, #6
 8007d66:	d020      	beq.n	8007daa <USART_SetConfig+0x8e6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	2b07      	cmp	r3, #7
 8007d6e:	d01a      	beq.n	8007da6 <USART_SetConfig+0x8e2>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d014      	beq.n	8007da2 <USART_SetConfig+0x8de>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d00e      	beq.n	8007d9e <USART_SetConfig+0x8da>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d84:	2b0a      	cmp	r3, #10
 8007d86:	d008      	beq.n	8007d9a <USART_SetConfig+0x8d6>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	2b0b      	cmp	r3, #11
 8007d8e:	d102      	bne.n	8007d96 <USART_SetConfig+0x8d2>
 8007d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d94:	e016      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e014      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007d9a:	2380      	movs	r3, #128	@ 0x80
 8007d9c:	e012      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007d9e:	2340      	movs	r3, #64	@ 0x40
 8007da0:	e010      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007da2:	2320      	movs	r3, #32
 8007da4:	e00e      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007da6:	2310      	movs	r3, #16
 8007da8:	e00c      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007daa:	230c      	movs	r3, #12
 8007dac:	e00a      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007dae:	230a      	movs	r3, #10
 8007db0:	e008      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007db2:	2308      	movs	r3, #8
 8007db4:	e006      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007db6:	2306      	movs	r3, #6
 8007db8:	e004      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007dba:	2304      	movs	r3, #4
 8007dbc:	e002      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e000      	b.n	8007dc4 <USART_SetConfig+0x900>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4a08      	ldr	r2, [pc, #32]	@ (8007de8 <USART_SetConfig+0x924>)
 8007dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dca:	005a      	lsls	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	441a      	add	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ddc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007dde:	e062      	b.n	8007ea6 <USART_SetConfig+0x9e2>
 8007de0:	58024400 	.word	0x58024400
 8007de4:	03d09000 	.word	0x03d09000
 8007de8:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d044      	beq.n	8007e7e <USART_SetConfig+0x9ba>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d03e      	beq.n	8007e7a <USART_SetConfig+0x9b6>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d038      	beq.n	8007e76 <USART_SetConfig+0x9b2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d032      	beq.n	8007e72 <USART_SetConfig+0x9ae>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d02c      	beq.n	8007e6e <USART_SetConfig+0x9aa>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e18:	2b05      	cmp	r3, #5
 8007e1a:	d026      	beq.n	8007e6a <USART_SetConfig+0x9a6>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e20:	2b06      	cmp	r3, #6
 8007e22:	d020      	beq.n	8007e66 <USART_SetConfig+0x9a2>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e28:	2b07      	cmp	r3, #7
 8007e2a:	d01a      	beq.n	8007e62 <USART_SetConfig+0x99e>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d014      	beq.n	8007e5e <USART_SetConfig+0x99a>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	2b09      	cmp	r3, #9
 8007e3a:	d00e      	beq.n	8007e5a <USART_SetConfig+0x996>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	2b0a      	cmp	r3, #10
 8007e42:	d008      	beq.n	8007e56 <USART_SetConfig+0x992>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	2b0b      	cmp	r3, #11
 8007e4a:	d102      	bne.n	8007e52 <USART_SetConfig+0x98e>
 8007e4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e50:	e016      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e014      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e56:	2380      	movs	r3, #128	@ 0x80
 8007e58:	e012      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e5a:	2340      	movs	r3, #64	@ 0x40
 8007e5c:	e010      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e5e:	2320      	movs	r3, #32
 8007e60:	e00e      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e62:	2310      	movs	r3, #16
 8007e64:	e00c      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e66:	230c      	movs	r3, #12
 8007e68:	e00a      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e6a:	230a      	movs	r3, #10
 8007e6c:	e008      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e6e:	2308      	movs	r3, #8
 8007e70:	e006      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e72:	2306      	movs	r3, #6
 8007e74:	e004      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e76:	2304      	movs	r3, #4
 8007e78:	e002      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e000      	b.n	8007e80 <USART_SetConfig+0x9bc>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e88:	005a      	lsls	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007e9c:	e003      	b.n	8007ea6 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 8007ea4:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	2b0f      	cmp	r3, #15
 8007eaa:	d916      	bls.n	8007eda <USART_SetConfig+0xa16>
 8007eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eb2:	d212      	bcs.n	8007eda <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f023 030f 	bic.w	r3, r3, #15
 8007ebc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007ed6:	60da      	str	r2, [r3, #12]
 8007ed8:	e002      	b.n	8007ee0 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8007ef8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3738      	adds	r7, #56	@ 0x38
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f12:	f7f9 f923 	bl	800115c <HAL_GetTick>
 8007f16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	d10e      	bne.n	8007f44 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff fa8f 	bl	8007458 <USART_WaitOnFlagUntilTimeout>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e01e      	b.n	8007f82 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0304 	and.w	r3, r3, #4
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d10e      	bne.n	8007f70 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fa79 	bl	8007458 <USART_WaitOnFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e008      	b.n	8007f82 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_USARTEx_EnableSlaveMode+0x16>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e043      	b.n	8008028 <HAL_USARTEx_EnableSlaveMode+0x9e>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fe6:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0201 	orr.w	r2, r2, #1
 8007ff6:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0201 	orr.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008042:	2b01      	cmp	r3, #1
 8008044:	d101      	bne.n	800804a <HAL_USARTEx_DisableFifoMode+0x16>
 8008046:	2302      	movs	r3, #2
 8008048:	e027      	b.n	800809a <HAL_USARTEx_DisableFifoMode+0x66>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0201 	bic.w	r2, r2, #1
 8008070:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008078:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d101      	bne.n	80080be <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80080ba:	2302      	movs	r3, #2
 80080bc:	e02d      	b.n	800811a <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0201 	bic.w	r2, r2, #1
 80080e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f850 	bl	80081a0 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8008136:	2302      	movs	r3, #2
 8008138:	e02d      	b.n	8008196 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0201 	bic.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f812 	bl	80081a0 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081bc:	e02f      	b.n	800821e <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081be:	2310      	movs	r3, #16
 80081c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081c2:	2310      	movs	r3, #16
 80081c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80081cc:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80081dc:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f003 0307 	and.w	r3, r3, #7
 80081e4:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	7b3a      	ldrb	r2, [r7, #12]
 80081ea:	4910      	ldr	r1, [pc, #64]	@ (800822c <USARTEx_SetNbDataToProcess+0x8c>)
 80081ec:	5c8a      	ldrb	r2, [r1, r2]
 80081ee:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 80081f2:	7b3a      	ldrb	r2, [r7, #12]
 80081f4:	490e      	ldr	r1, [pc, #56]	@ (8008230 <USARTEx_SetNbDataToProcess+0x90>)
 80081f6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	7b7a      	ldrb	r2, [r7, #13]
 8008206:	4909      	ldr	r1, [pc, #36]	@ (800822c <USARTEx_SetNbDataToProcess+0x8c>)
 8008208:	5c8a      	ldrb	r2, [r1, r2]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800820e:	7b7a      	ldrb	r2, [r7, #13]
 8008210:	4907      	ldr	r1, [pc, #28]	@ (8008230 <USARTEx_SetNbDataToProcess+0x90>)
 8008212:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008214:	fb93 f3f2 	sdiv	r3, r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	0800c49c 	.word	0x0800c49c
 8008230:	0800c4a4 	.word	0x0800c4a4

08008234 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008234:	b084      	sub	sp, #16
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	f107 001c 	add.w	r0, r7, #28
 8008242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008246:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800824a:	2b01      	cmp	r3, #1
 800824c:	d121      	bne.n	8008292 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008252:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	4b2c      	ldr	r3, [pc, #176]	@ (8008310 <USB_CoreInit+0xdc>)
 8008260:	4013      	ands	r3, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008272:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008276:	2b01      	cmp	r3, #1
 8008278:	d105      	bne.n	8008286 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 faf6 	bl	8009878 <USB_CoreReset>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e01b      	b.n	80082ca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 faea 	bl	8009878 <USB_CoreReset>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d106      	bne.n	80082be <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80082bc:	e005      	b.n	80082ca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082ca:	7fbb      	ldrb	r3, [r7, #30]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d116      	bne.n	80082fe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082de:	4b0d      	ldr	r3, [pc, #52]	@ (8008314 <USB_CoreInit+0xe0>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f043 0206 	orr.w	r2, r3, #6
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f043 0220 	orr.w	r2, r3, #32
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800830a:	b004      	add	sp, #16
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	ffbdffbf 	.word	0xffbdffbf
 8008314:	03ee0000 	.word	0x03ee0000

08008318 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d165      	bne.n	80083f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	4a41      	ldr	r2, [pc, #260]	@ (8008434 <USB_SetTurnaroundTime+0x11c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d906      	bls.n	8008342 <USB_SetTurnaroundTime+0x2a>
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	4a40      	ldr	r2, [pc, #256]	@ (8008438 <USB_SetTurnaroundTime+0x120>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d202      	bcs.n	8008342 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800833c:	230f      	movs	r3, #15
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	e062      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	4a3c      	ldr	r2, [pc, #240]	@ (8008438 <USB_SetTurnaroundTime+0x120>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d306      	bcc.n	8008358 <USB_SetTurnaroundTime+0x40>
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	4a3b      	ldr	r2, [pc, #236]	@ (800843c <USB_SetTurnaroundTime+0x124>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d202      	bcs.n	8008358 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008352:	230e      	movs	r3, #14
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	e057      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4a38      	ldr	r2, [pc, #224]	@ (800843c <USB_SetTurnaroundTime+0x124>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d306      	bcc.n	800836e <USB_SetTurnaroundTime+0x56>
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4a37      	ldr	r2, [pc, #220]	@ (8008440 <USB_SetTurnaroundTime+0x128>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d202      	bcs.n	800836e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008368:	230d      	movs	r3, #13
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	e04c      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	4a33      	ldr	r2, [pc, #204]	@ (8008440 <USB_SetTurnaroundTime+0x128>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d306      	bcc.n	8008384 <USB_SetTurnaroundTime+0x6c>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	4a32      	ldr	r2, [pc, #200]	@ (8008444 <USB_SetTurnaroundTime+0x12c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d802      	bhi.n	8008384 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800837e:	230c      	movs	r3, #12
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e041      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4a2f      	ldr	r2, [pc, #188]	@ (8008444 <USB_SetTurnaroundTime+0x12c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d906      	bls.n	800839a <USB_SetTurnaroundTime+0x82>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4a2e      	ldr	r2, [pc, #184]	@ (8008448 <USB_SetTurnaroundTime+0x130>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d802      	bhi.n	800839a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008394:	230b      	movs	r3, #11
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e036      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4a2a      	ldr	r2, [pc, #168]	@ (8008448 <USB_SetTurnaroundTime+0x130>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d906      	bls.n	80083b0 <USB_SetTurnaroundTime+0x98>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	4a29      	ldr	r2, [pc, #164]	@ (800844c <USB_SetTurnaroundTime+0x134>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d802      	bhi.n	80083b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083aa:	230a      	movs	r3, #10
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	e02b      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4a26      	ldr	r2, [pc, #152]	@ (800844c <USB_SetTurnaroundTime+0x134>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d906      	bls.n	80083c6 <USB_SetTurnaroundTime+0xae>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4a25      	ldr	r2, [pc, #148]	@ (8008450 <USB_SetTurnaroundTime+0x138>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d202      	bcs.n	80083c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083c0:	2309      	movs	r3, #9
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	e020      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4a21      	ldr	r2, [pc, #132]	@ (8008450 <USB_SetTurnaroundTime+0x138>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d306      	bcc.n	80083dc <USB_SetTurnaroundTime+0xc4>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a20      	ldr	r2, [pc, #128]	@ (8008454 <USB_SetTurnaroundTime+0x13c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d802      	bhi.n	80083dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80083d6:	2308      	movs	r3, #8
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	e015      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4a1d      	ldr	r2, [pc, #116]	@ (8008454 <USB_SetTurnaroundTime+0x13c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d906      	bls.n	80083f2 <USB_SetTurnaroundTime+0xda>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008458 <USB_SetTurnaroundTime+0x140>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d202      	bcs.n	80083f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80083ec:	2307      	movs	r3, #7
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	e00a      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80083f2:	2306      	movs	r3, #6
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	e007      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80083fe:	2309      	movs	r3, #9
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	e001      	b.n	8008408 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008404:	2309      	movs	r3, #9
 8008406:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	029b      	lsls	r3, r3, #10
 800841c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008420:	431a      	orrs	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	371c      	adds	r7, #28
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	00d8acbf 	.word	0x00d8acbf
 8008438:	00e4e1c0 	.word	0x00e4e1c0
 800843c:	00f42400 	.word	0x00f42400
 8008440:	01067380 	.word	0x01067380
 8008444:	011a499f 	.word	0x011a499f
 8008448:	01312cff 	.word	0x01312cff
 800844c:	014ca43f 	.word	0x014ca43f
 8008450:	016e3600 	.word	0x016e3600
 8008454:	01a6ab1f 	.word	0x01a6ab1f
 8008458:	01e84800 	.word	0x01e84800

0800845c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f043 0201 	orr.w	r2, r3, #1
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f023 0201 	bic.w	r2, r3, #1
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d115      	bne.n	80084ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80084ce:	200a      	movs	r0, #10
 80084d0:	f7f8 fe50 	bl	8001174 <HAL_Delay>
      ms += 10U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	330a      	adds	r3, #10
 80084d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 f93b 	bl	8009756 <USB_GetMode>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d01e      	beq.n	8008524 <USB_SetCurrentMode+0x84>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80084ea:	d9f0      	bls.n	80084ce <USB_SetCurrentMode+0x2e>
 80084ec:	e01a      	b.n	8008524 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d115      	bne.n	8008520 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008500:	200a      	movs	r0, #10
 8008502:	f7f8 fe37 	bl	8001174 <HAL_Delay>
      ms += 10U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	330a      	adds	r3, #10
 800850a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 f922 	bl	8009756 <USB_GetMode>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <USB_SetCurrentMode+0x84>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2bc7      	cmp	r3, #199	@ 0xc7
 800851c:	d9f0      	bls.n	8008500 <USB_SetCurrentMode+0x60>
 800851e:	e001      	b.n	8008524 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e005      	b.n	8008530 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2bc8      	cmp	r3, #200	@ 0xc8
 8008528:	d101      	bne.n	800852e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e000      	b.n	8008530 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008538:	b084      	sub	sp, #16
 800853a:	b580      	push	{r7, lr}
 800853c:	b086      	sub	sp, #24
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
 8008556:	e009      	b.n	800856c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	3340      	adds	r3, #64	@ 0x40
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	2200      	movs	r2, #0
 8008564:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	3301      	adds	r3, #1
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2b0e      	cmp	r3, #14
 8008570:	d9f2      	bls.n	8008558 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008572:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008576:	2b00      	cmp	r3, #0
 8008578:	d11c      	bne.n	80085b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008588:	f043 0302 	orr.w	r3, r3, #2
 800858c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008592:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	e005      	b.n	80085c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085c6:	461a      	mov	r2, r3
 80085c8:	2300      	movs	r3, #0
 80085ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d10d      	bne.n	80085f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80085d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d104      	bne.n	80085e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80085dc:	2100      	movs	r1, #0
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f968 	bl	80088b4 <USB_SetDevSpeed>
 80085e4:	e008      	b.n	80085f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80085e6:	2101      	movs	r1, #1
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f963 	bl	80088b4 <USB_SetDevSpeed>
 80085ee:	e003      	b.n	80085f8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80085f0:	2103      	movs	r1, #3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f95e 	bl	80088b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085f8:	2110      	movs	r1, #16
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f8fa 	bl	80087f4 <USB_FlushTxFifo>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f924 	bl	8008858 <USB_FlushRxFifo>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008620:	461a      	mov	r2, r3
 8008622:	2300      	movs	r3, #0
 8008624:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800862c:	461a      	mov	r2, r3
 800862e:	2300      	movs	r3, #0
 8008630:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008638:	461a      	mov	r2, r3
 800863a:	2300      	movs	r3, #0
 800863c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800863e:	2300      	movs	r3, #0
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	e043      	b.n	80086cc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008656:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800865a:	d118      	bne.n	800868e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800866e:	461a      	mov	r2, r3
 8008670:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e013      	b.n	80086a0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008684:	461a      	mov	r2, r3
 8008686:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800868a:	6013      	str	r3, [r2, #0]
 800868c:	e008      	b.n	80086a0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800869a:	461a      	mov	r2, r3
 800869c:	2300      	movs	r3, #0
 800869e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ac:	461a      	mov	r2, r3
 80086ae:	2300      	movs	r3, #0
 80086b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086be:	461a      	mov	r2, r3
 80086c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	3301      	adds	r3, #1
 80086ca:	613b      	str	r3, [r7, #16]
 80086cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086d0:	461a      	mov	r2, r3
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d3b5      	bcc.n	8008644 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]
 80086dc:	e043      	b.n	8008766 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086f4:	d118      	bne.n	8008728 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008708:	461a      	mov	r2, r3
 800870a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	e013      	b.n	800873a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871e:	461a      	mov	r2, r3
 8008720:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	e008      	b.n	800873a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008734:	461a      	mov	r2, r3
 8008736:	2300      	movs	r3, #0
 8008738:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008746:	461a      	mov	r2, r3
 8008748:	2300      	movs	r3, #0
 800874a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008758:	461a      	mov	r2, r3
 800875a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800875e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	3301      	adds	r3, #1
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800876a:	461a      	mov	r2, r3
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	4293      	cmp	r3, r2
 8008770:	d3b5      	bcc.n	80086de <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008784:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008792:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008794:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008798:	2b00      	cmp	r3, #0
 800879a:	d105      	bne.n	80087a8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	f043 0210 	orr.w	r2, r3, #16
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	4b0f      	ldr	r3, [pc, #60]	@ (80087ec <USB_DevInit+0x2b4>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	f043 0208 	orr.w	r2, r3, #8
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d105      	bne.n	80087dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699a      	ldr	r2, [r3, #24]
 80087d4:	4b06      	ldr	r3, [pc, #24]	@ (80087f0 <USB_DevInit+0x2b8>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087e8:	b004      	add	sp, #16
 80087ea:	4770      	bx	lr
 80087ec:	803c3800 	.word	0x803c3800
 80087f0:	40000004 	.word	0x40000004

080087f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800880e:	d901      	bls.n	8008814 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e01b      	b.n	800884c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	daf2      	bge.n	8008802 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	019b      	lsls	r3, r3, #6
 8008824:	f043 0220 	orr.w	r2, r3, #32
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008838:	d901      	bls.n	800883e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e006      	b.n	800884c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b20      	cmp	r3, #32
 8008848:	d0f0      	beq.n	800882c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008870:	d901      	bls.n	8008876 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e018      	b.n	80088a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	daf2      	bge.n	8008864 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2210      	movs	r2, #16
 8008886:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008894:	d901      	bls.n	800889a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e006      	b.n	80088a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f003 0310 	and.w	r3, r3, #16
 80088a2:	2b10      	cmp	r3, #16
 80088a4:	d0f0      	beq.n	8008888 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	68f9      	ldr	r1, [r7, #12]
 80088d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088d4:	4313      	orrs	r3, r2
 80088d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 0306 	and.w	r3, r3, #6
 80088fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]
 800890a:	e00a      	b.n	8008922 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d002      	beq.n	8008918 <USB_GetDevSpeed+0x32>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b06      	cmp	r3, #6
 8008916:	d102      	bne.n	800891e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008918:	2302      	movs	r3, #2
 800891a:	75fb      	strb	r3, [r7, #23]
 800891c:	e001      	b.n	8008922 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800891e:	230f      	movs	r3, #15
 8008920:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
}
 8008924:	4618      	mov	r0, r3
 8008926:	371c      	adds	r7, #28
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	785b      	ldrb	r3, [r3, #1]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d139      	bne.n	80089c0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	f003 030f 	and.w	r3, r3, #15
 800895c:	2101      	movs	r1, #1
 800895e:	fa01 f303 	lsl.w	r3, r1, r3
 8008962:	b29b      	uxth	r3, r3
 8008964:	68f9      	ldr	r1, [r7, #12]
 8008966:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800896a:	4313      	orrs	r3, r2
 800896c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d153      	bne.n	8008a2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	791b      	ldrb	r3, [r3, #4]
 800899e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	059b      	lsls	r3, r3, #22
 80089a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089a8:	431a      	orrs	r2, r3
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	0159      	lsls	r1, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	440b      	add	r3, r1
 80089b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b6:	4619      	mov	r1, r3
 80089b8:	4b20      	ldr	r3, [pc, #128]	@ (8008a3c <USB_ActivateEndpoint+0x10c>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	600b      	str	r3, [r1, #0]
 80089be:	e035      	b.n	8008a2c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089c6:	69da      	ldr	r2, [r3, #28]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	f003 030f 	and.w	r3, r3, #15
 80089d0:	2101      	movs	r1, #1
 80089d2:	fa01 f303 	lsl.w	r3, r1, r3
 80089d6:	041b      	lsls	r3, r3, #16
 80089d8:	68f9      	ldr	r1, [r7, #12]
 80089da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089de:	4313      	orrs	r3, r2
 80089e0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d119      	bne.n	8008a2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	791b      	ldrb	r3, [r3, #4]
 8008a12:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a14:	430b      	orrs	r3, r1
 8008a16:	431a      	orrs	r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	0159      	lsls	r1, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	440b      	add	r3, r1
 8008a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a24:	4619      	mov	r1, r3
 8008a26:	4b05      	ldr	r3, [pc, #20]	@ (8008a3c <USB_ActivateEndpoint+0x10c>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	10008000 	.word	0x10008000

08008a40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d161      	bne.n	8008b20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a72:	d11f      	bne.n	8008ab4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 030f 	and.w	r3, r3, #15
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	43db      	mvns	r3, r3
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ade:	69da      	ldr	r2, [r3, #28]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	f003 030f 	and.w	r3, r3, #15
 8008ae8:	2101      	movs	r1, #1
 8008aea:	fa01 f303 	lsl.w	r3, r1, r3
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	43db      	mvns	r3, r3
 8008af2:	68f9      	ldr	r1, [r7, #12]
 8008af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008af8:	4013      	ands	r3, r2
 8008afa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	0159      	lsls	r1, r3, #5
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	440b      	add	r3, r1
 8008b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b16:	4619      	mov	r1, r3
 8008b18:	4b35      	ldr	r3, [pc, #212]	@ (8008bf0 <USB_DeactivateEndpoint+0x1b0>)
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	600b      	str	r3, [r1, #0]
 8008b1e:	e060      	b.n	8008be2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b36:	d11f      	bne.n	8008b78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	0151      	lsls	r1, r2, #5
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	440a      	add	r2, r1
 8008b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	0151      	lsls	r1, r2, #5
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	2101      	movs	r1, #1
 8008b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	43db      	mvns	r3, r3
 8008b92:	68f9      	ldr	r1, [r7, #12]
 8008b94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b98:	4013      	ands	r3, r2
 8008b9a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ba2:	69da      	ldr	r2, [r3, #28]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	2101      	movs	r1, #1
 8008bae:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb2:	041b      	lsls	r3, r3, #16
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	68f9      	ldr	r1, [r7, #12]
 8008bb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	0159      	lsls	r1, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	440b      	add	r3, r1
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4b05      	ldr	r3, [pc, #20]	@ (8008bf4 <USB_DeactivateEndpoint+0x1b4>)
 8008bde:	4013      	ands	r3, r2
 8008be0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	ec337800 	.word	0xec337800
 8008bf4:	eff37800 	.word	0xeff37800

08008bf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	@ 0x28
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	4613      	mov	r3, r2
 8008c04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	785b      	ldrb	r3, [r3, #1]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	f040 8181 	bne.w	8008f1c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d132      	bne.n	8008c88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	0159      	lsls	r1, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	440b      	add	r3, r1
 8008c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4ba5      	ldr	r3, [pc, #660]	@ (8008ed4 <USB_EPStartXfer+0x2dc>)
 8008c40:	4013      	ands	r3, r2
 8008c42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	0151      	lsls	r1, r2, #5
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	440a      	add	r2, r1
 8008c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c70:	691a      	ldr	r2, [r3, #16]
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	0159      	lsls	r1, r3, #5
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	440b      	add	r3, r1
 8008c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4b95      	ldr	r3, [pc, #596]	@ (8008ed8 <USB_EPStartXfer+0x2e0>)
 8008c82:	4013      	ands	r3, r2
 8008c84:	610b      	str	r3, [r1, #16]
 8008c86:	e092      	b.n	8008dae <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c94:	691a      	ldr	r2, [r3, #16]
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	0159      	lsls	r1, r3, #5
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	440b      	add	r3, r1
 8008c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8008ed8 <USB_EPStartXfer+0x2e0>)
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	0159      	lsls	r1, r3, #5
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	440b      	add	r3, r1
 8008cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4b83      	ldr	r3, [pc, #524]	@ (8008ed4 <USB_EPStartXfer+0x2dc>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d11a      	bne.n	8008d08 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	691a      	ldr	r2, [r3, #16]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d903      	bls.n	8008ce6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	0151      	lsls	r1, r2, #5
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	440a      	add	r2, r1
 8008cfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d04:	6113      	str	r3, [r2, #16]
 8008d06:	e01b      	b.n	8008d40 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d14:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6919      	ldr	r1, [r3, #16]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	440b      	add	r3, r1
 8008d20:	1e59      	subs	r1, r3, #1
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d2a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8008edc <USB_EPStartXfer+0x2e4>)
 8008d2e:	400b      	ands	r3, r1
 8008d30:	69b9      	ldr	r1, [r7, #24]
 8008d32:	0148      	lsls	r0, r1, #5
 8008d34:	69f9      	ldr	r1, [r7, #28]
 8008d36:	4401      	add	r1, r0
 8008d38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d4c:	691a      	ldr	r2, [r3, #16]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d56:	69b9      	ldr	r1, [r7, #24]
 8008d58:	0148      	lsls	r0, r1, #5
 8008d5a:	69f9      	ldr	r1, [r7, #28]
 8008d5c:	4401      	add	r1, r0
 8008d5e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d62:	4313      	orrs	r3, r2
 8008d64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	791b      	ldrb	r3, [r3, #4]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d11f      	bne.n	8008dae <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d88:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008d8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008da8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008dac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d14b      	bne.n	8008e4c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d009      	beq.n	8008dd0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dc8:	461a      	mov	r2, r3
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	791b      	ldrb	r3, [r3, #4]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d128      	bne.n	8008e2a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d110      	bne.n	8008e0a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	0151      	lsls	r1, r2, #5
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	440a      	add	r2, r1
 8008dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	e00f      	b.n	8008e2a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	0151      	lsls	r1, r2, #5
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	440a      	add	r2, r1
 8008e20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	0151      	lsls	r1, r2, #5
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	440a      	add	r2, r1
 8008e40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e44:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	e16a      	b.n	8009122 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d015      	beq.n	8008ea0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 8152 	beq.w	8009122 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	2101      	movs	r1, #1
 8008e90:	fa01 f303 	lsl.w	r3, r1, r3
 8008e94:	69f9      	ldr	r1, [r7, #28]
 8008e96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	634b      	str	r3, [r1, #52]	@ 0x34
 8008e9e:	e140      	b.n	8009122 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d117      	bne.n	8008ee0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	0151      	lsls	r1, r2, #5
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	440a      	add	r2, r1
 8008ec6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008eca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	e016      	b.n	8008f00 <USB_EPStartXfer+0x308>
 8008ed2:	bf00      	nop
 8008ed4:	e007ffff 	.word	0xe007ffff
 8008ed8:	fff80000 	.word	0xfff80000
 8008edc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	69fa      	ldr	r2, [r7, #28]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008efe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	68d9      	ldr	r1, [r3, #12]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	781a      	ldrb	r2, [r3, #0]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	b298      	uxth	r0, r3
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	4603      	mov	r3, r0
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 f9b9 	bl	800928c <USB_WritePacket>
 8008f1a:	e102      	b.n	8009122 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f28:	691a      	ldr	r2, [r3, #16]
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	0159      	lsls	r1, r3, #5
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	440b      	add	r3, r1
 8008f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f36:	4619      	mov	r1, r3
 8008f38:	4b7c      	ldr	r3, [pc, #496]	@ (800912c <USB_EPStartXfer+0x534>)
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	0159      	lsls	r1, r3, #5
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	440b      	add	r3, r1
 8008f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4b75      	ldr	r3, [pc, #468]	@ (8009130 <USB_EPStartXfer+0x538>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d12f      	bne.n	8008fc6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	689a      	ldr	r2, [r3, #8]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f94:	69b9      	ldr	r1, [r7, #24]
 8008f96:	0148      	lsls	r0, r1, #5
 8008f98:	69f9      	ldr	r1, [r7, #28]
 8008f9a:	4401      	add	r1, r0
 8008f9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fc2:	6113      	str	r3, [r2, #16]
 8008fc4:	e05f      	b.n	8009086 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d123      	bne.n	8009016 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fe4:	69b9      	ldr	r1, [r7, #24]
 8008fe6:	0148      	lsls	r0, r1, #5
 8008fe8:	69f9      	ldr	r1, [r7, #28]
 8008fea:	4401      	add	r1, r0
 8008fec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	0151      	lsls	r1, r2, #5
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	440a      	add	r2, r1
 800900a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800900e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009012:	6113      	str	r3, [r2, #16]
 8009014:	e037      	b.n	8009086 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	691a      	ldr	r2, [r3, #16]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	4413      	add	r3, r2
 8009020:	1e5a      	subs	r2, r3, #1
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	fbb2 f3f3 	udiv	r3, r2, r3
 800902a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	8afa      	ldrh	r2, [r7, #22]
 8009032:	fb03 f202 	mul.w	r2, r3, r2
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009046:	691a      	ldr	r2, [r3, #16]
 8009048:	8afb      	ldrh	r3, [r7, #22]
 800904a:	04d9      	lsls	r1, r3, #19
 800904c:	4b39      	ldr	r3, [pc, #228]	@ (8009134 <USB_EPStartXfer+0x53c>)
 800904e:	400b      	ands	r3, r1
 8009050:	69b9      	ldr	r1, [r7, #24]
 8009052:	0148      	lsls	r0, r1, #5
 8009054:	69f9      	ldr	r1, [r7, #28]
 8009056:	4401      	add	r1, r0
 8009058:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800905c:	4313      	orrs	r3, r2
 800905e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009076:	69b9      	ldr	r1, [r7, #24]
 8009078:	0148      	lsls	r0, r1, #5
 800907a:	69f9      	ldr	r1, [r7, #28]
 800907c:	4401      	add	r1, r0
 800907e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009082:	4313      	orrs	r3, r2
 8009084:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d10d      	bne.n	80090a8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d009      	beq.n	80090a8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	68d9      	ldr	r1, [r3, #12]
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a4:	460a      	mov	r2, r1
 80090a6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	791b      	ldrb	r3, [r3, #4]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d128      	bne.n	8009102 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d110      	bne.n	80090e2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	0151      	lsls	r1, r2, #5
 80090d2:	69fa      	ldr	r2, [r7, #28]
 80090d4:	440a      	add	r2, r1
 80090d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	e00f      	b.n	8009102 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	0151      	lsls	r1, r2, #5
 80090f4:	69fa      	ldr	r2, [r7, #28]
 80090f6:	440a      	add	r2, r1
 80090f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009100:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	440a      	add	r2, r1
 8009118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800911c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009120:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3720      	adds	r7, #32
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	fff80000 	.word	0xfff80000
 8009130:	e007ffff 	.word	0xe007ffff
 8009134:	1ff80000 	.word	0x1ff80000

08009138 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	785b      	ldrb	r3, [r3, #1]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d14a      	bne.n	80091ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800916a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800916e:	f040 8086 	bne.w	800927e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	7812      	ldrb	r2, [r2, #0]
 8009186:	0151      	lsls	r1, r2, #5
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	440a      	add	r2, r1
 800918c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009190:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009194:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	0151      	lsls	r1, r2, #5
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3301      	adds	r3, #1
 80091be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d902      	bls.n	80091d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	75fb      	strb	r3, [r7, #23]
          break;
 80091ce:	e056      	b.n	800927e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091e8:	d0e7      	beq.n	80091ba <USB_EPStopXfer+0x82>
 80091ea:	e048      	b.n	800927e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009204:	d13b      	bne.n	800927e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	0151      	lsls	r1, r2, #5
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	440a      	add	r2, r1
 8009220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009224:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009228:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	7812      	ldrb	r2, [r2, #0]
 800923e:	0151      	lsls	r1, r2, #5
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	440a      	add	r2, r1
 8009244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009248:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800924c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f242 7210 	movw	r2, #10000	@ 0x2710
 800925a:	4293      	cmp	r3, r2
 800925c:	d902      	bls.n	8009264 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	75fb      	strb	r3, [r7, #23]
          break;
 8009262:	e00c      	b.n	800927e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800927c:	d0e7      	beq.n	800924e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009280:	4618      	mov	r0, r3
 8009282:	371c      	adds	r7, #28
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800928c:	b480      	push	{r7}
 800928e:	b089      	sub	sp, #36	@ 0x24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4611      	mov	r1, r2
 8009298:	461a      	mov	r2, r3
 800929a:	460b      	mov	r3, r1
 800929c:	71fb      	strb	r3, [r7, #7]
 800929e:	4613      	mov	r3, r2
 80092a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80092aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d123      	bne.n	80092fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092b2:	88bb      	ldrh	r3, [r7, #4]
 80092b4:	3303      	adds	r3, #3
 80092b6:	089b      	lsrs	r3, r3, #2
 80092b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092ba:	2300      	movs	r3, #0
 80092bc:	61bb      	str	r3, [r7, #24]
 80092be:	e018      	b.n	80092f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	031a      	lsls	r2, r3, #12
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092cc:	461a      	mov	r2, r3
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	3301      	adds	r3, #1
 80092d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	3301      	adds	r3, #1
 80092de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	3301      	adds	r3, #1
 80092e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	3301      	adds	r3, #1
 80092ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	3301      	adds	r3, #1
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d3e2      	bcc.n	80092c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3724      	adds	r7, #36	@ 0x24
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009308:	b480      	push	{r7}
 800930a:	b08b      	sub	sp, #44	@ 0x2c
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4613      	mov	r3, r2
 8009314:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800931e:	88fb      	ldrh	r3, [r7, #6]
 8009320:	089b      	lsrs	r3, r3, #2
 8009322:	b29b      	uxth	r3, r3
 8009324:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009326:	88fb      	ldrh	r3, [r7, #6]
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800932e:	2300      	movs	r3, #0
 8009330:	623b      	str	r3, [r7, #32]
 8009332:	e014      	b.n	800935e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	3301      	adds	r3, #1
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	3301      	adds	r3, #1
 800934a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800934c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934e:	3301      	adds	r3, #1
 8009350:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009354:	3301      	adds	r3, #1
 8009356:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	3301      	adds	r3, #1
 800935c:	623b      	str	r3, [r7, #32]
 800935e:	6a3a      	ldr	r2, [r7, #32]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	429a      	cmp	r2, r3
 8009364:	d3e6      	bcc.n	8009334 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009366:	8bfb      	ldrh	r3, [r7, #30]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01e      	beq.n	80093aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009376:	461a      	mov	r2, r3
 8009378:	f107 0310 	add.w	r3, r7, #16
 800937c:	6812      	ldr	r2, [r2, #0]
 800937e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	b2db      	uxtb	r3, r3
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
 800938c:	b2da      	uxtb	r2, r3
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	701a      	strb	r2, [r3, #0]
      i++;
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	3301      	adds	r3, #1
 8009396:	623b      	str	r3, [r7, #32]
      pDest++;
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	3301      	adds	r3, #1
 800939c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800939e:	8bfb      	ldrh	r3, [r7, #30]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093a4:	8bfb      	ldrh	r3, [r7, #30]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1ea      	bne.n	8009380 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	372c      	adds	r7, #44	@ 0x2c
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d12c      	bne.n	800942e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	db12      	blt.n	800940c <USB_EPSetStall+0x54>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00f      	beq.n	800940c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	440a      	add	r2, r1
 8009402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009406:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800940a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	0151      	lsls	r1, r2, #5
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	440a      	add	r2, r1
 8009422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009426:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	e02b      	b.n	8009486 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	db12      	blt.n	8009466 <USB_EPSetStall+0xae>
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00f      	beq.n	8009466 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	0151      	lsls	r1, r2, #5
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	440a      	add	r2, r1
 800945c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009460:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009464:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009484:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d128      	bne.n	8009502 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	0151      	lsls	r1, r2, #5
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	440a      	add	r2, r1
 80094c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	791b      	ldrb	r3, [r3, #4]
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d003      	beq.n	80094e0 <USB_EPClearStall+0x4c>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	791b      	ldrb	r3, [r3, #4]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d138      	bne.n	8009552 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	0151      	lsls	r1, r2, #5
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	440a      	add	r2, r1
 80094f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	e027      	b.n	8009552 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	440a      	add	r2, r1
 8009518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800951c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009520:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	791b      	ldrb	r3, [r3, #4]
 8009526:	2b03      	cmp	r3, #3
 8009528:	d003      	beq.n	8009532 <USB_EPClearStall+0x9e>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	791b      	ldrb	r3, [r3, #4]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d10f      	bne.n	8009552 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	0151      	lsls	r1, r2, #5
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	440a      	add	r2, r1
 8009548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009550:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800957e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009582:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009594:	68f9      	ldr	r1, [r7, #12]
 8009596:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800959a:	4313      	orrs	r3, r2
 800959c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80095c6:	f023 0303 	bic.w	r3, r3, #3
 80095ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095da:	f023 0302 	bic.w	r3, r3, #2
 80095de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009608:	f023 0303 	bic.w	r3, r3, #3
 800960c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800961c:	f043 0302 	orr.w	r3, r3, #2
 8009620:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	695b      	ldr	r3, [r3, #20]
 800963c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	4013      	ands	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009648:	68fb      	ldr	r3, [r7, #12]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	4013      	ands	r3, r2
 8009678:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	0c1b      	lsrs	r3, r3, #16
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	4013      	ands	r3, r2
 80096ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	b29b      	uxth	r3, r3
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096be:	b480      	push	{r7}
 80096c0:	b085      	sub	sp, #20
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4013      	ands	r3, r2
 80096ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096ec:	68bb      	ldr	r3, [r7, #8]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b087      	sub	sp, #28
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800971a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800971c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	f003 030f 	and.w	r3, r3, #15
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	fa22 f303 	lsr.w	r3, r2, r3
 800972a:	01db      	lsls	r3, r3, #7
 800972c:	b2db      	uxtb	r3, r3
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4013      	ands	r3, r2
 8009746:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009748:	68bb      	ldr	r3, [r7, #8]
}
 800974a:	4618      	mov	r0, r3
 800974c:	371c      	adds	r7, #28
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009756:	b480      	push	{r7}
 8009758:	b083      	sub	sp, #12
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	f003 0301 	and.w	r3, r3, #1
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800978e:	4619      	mov	r1, r3
 8009790:	4b09      	ldr	r3, [pc, #36]	@ (80097b8 <USB_ActivateSetup+0x44>)
 8009792:	4013      	ands	r3, r2
 8009794:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	fffff800 	.word	0xfffff800

080097bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	460b      	mov	r3, r1
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	333c      	adds	r3, #60	@ 0x3c
 80097d2:	3304      	adds	r3, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	4a26      	ldr	r2, [pc, #152]	@ (8009874 <USB_EP0_OutStart+0xb8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d90a      	bls.n	80097f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097f0:	d101      	bne.n	80097f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e037      	b.n	8009866 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097fc:	461a      	mov	r2, r3
 80097fe:	2300      	movs	r3, #0
 8009800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009814:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009824:	f043 0318 	orr.w	r3, r3, #24
 8009828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009838:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800983c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800983e:	7afb      	ldrb	r3, [r7, #11]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d10f      	bne.n	8009864 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800984a:	461a      	mov	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800985e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	4f54300a 	.word	0x4f54300a

08009878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	3301      	adds	r3, #1
 8009888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009890:	d901      	bls.n	8009896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e01b      	b.n	80098ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	daf2      	bge.n	8009884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f043 0201 	orr.w	r2, r3, #1
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098ba:	d901      	bls.n	80098c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e006      	b.n	80098ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d0f0      	beq.n	80098ae <USB_CoreReset+0x36>

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
	...

080098dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80098e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80098ec:	f002 fd1a 	bl	800c324 <USBD_static_malloc>
 80098f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	32b0      	adds	r2, #176	@ 0xb0
 8009902:	2100      	movs	r1, #0
 8009904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009908:	2302      	movs	r3, #2
 800990a:	e0d4      	b.n	8009ab6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800990c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009910:	2100      	movs	r1, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f002 fd4a 	bl	800c3ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	32b0      	adds	r2, #176	@ 0xb0
 8009922:	68f9      	ldr	r1, [r7, #12]
 8009924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	32b0      	adds	r2, #176	@ 0xb0
 8009932:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	7c1b      	ldrb	r3, [r3, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d138      	bne.n	80099b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009944:	4b5e      	ldr	r3, [pc, #376]	@ (8009ac0 <USBD_CDC_Init+0x1e4>)
 8009946:	7819      	ldrb	r1, [r3, #0]
 8009948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800994c:	2202      	movs	r2, #2
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f002 fbc5 	bl	800c0de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009954:	4b5a      	ldr	r3, [pc, #360]	@ (8009ac0 <USBD_CDC_Init+0x1e4>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	f003 020f 	and.w	r2, r3, #15
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	3324      	adds	r3, #36	@ 0x24
 800996a:	2201      	movs	r2, #1
 800996c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800996e:	4b55      	ldr	r3, [pc, #340]	@ (8009ac4 <USBD_CDC_Init+0x1e8>)
 8009970:	7819      	ldrb	r1, [r3, #0]
 8009972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009976:	2202      	movs	r2, #2
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f002 fbb0 	bl	800c0de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800997e:	4b51      	ldr	r3, [pc, #324]	@ (8009ac4 <USBD_CDC_Init+0x1e8>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	f003 020f 	and.w	r2, r3, #15
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4613      	mov	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009996:	2201      	movs	r2, #1
 8009998:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800999a:	4b4b      	ldr	r3, [pc, #300]	@ (8009ac8 <USBD_CDC_Init+0x1ec>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	f003 020f 	and.w	r2, r3, #15
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	3326      	adds	r3, #38	@ 0x26
 80099b0:	2210      	movs	r2, #16
 80099b2:	801a      	strh	r2, [r3, #0]
 80099b4:	e035      	b.n	8009a22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80099b6:	4b42      	ldr	r3, [pc, #264]	@ (8009ac0 <USBD_CDC_Init+0x1e4>)
 80099b8:	7819      	ldrb	r1, [r3, #0]
 80099ba:	2340      	movs	r3, #64	@ 0x40
 80099bc:	2202      	movs	r2, #2
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f002 fb8d 	bl	800c0de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80099c4:	4b3e      	ldr	r3, [pc, #248]	@ (8009ac0 <USBD_CDC_Init+0x1e4>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	440b      	add	r3, r1
 80099d8:	3324      	adds	r3, #36	@ 0x24
 80099da:	2201      	movs	r2, #1
 80099dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099de:	4b39      	ldr	r3, [pc, #228]	@ (8009ac4 <USBD_CDC_Init+0x1e8>)
 80099e0:	7819      	ldrb	r1, [r3, #0]
 80099e2:	2340      	movs	r3, #64	@ 0x40
 80099e4:	2202      	movs	r2, #2
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f002 fb79 	bl	800c0de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099ec:	4b35      	ldr	r3, [pc, #212]	@ (8009ac4 <USBD_CDC_Init+0x1e8>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 020f 	and.w	r2, r3, #15
 80099f4:	6879      	ldr	r1, [r7, #4]
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	440b      	add	r3, r1
 8009a00:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a04:	2201      	movs	r2, #1
 8009a06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a08:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac8 <USBD_CDC_Init+0x1ec>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	f003 020f 	and.w	r2, r3, #15
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	3326      	adds	r3, #38	@ 0x26
 8009a1e:	2210      	movs	r2, #16
 8009a20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a22:	4b29      	ldr	r3, [pc, #164]	@ (8009ac8 <USBD_CDC_Init+0x1ec>)
 8009a24:	7819      	ldrb	r1, [r3, #0]
 8009a26:	2308      	movs	r3, #8
 8009a28:	2203      	movs	r2, #3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f002 fb57 	bl	800c0de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009a30:	4b25      	ldr	r3, [pc, #148]	@ (8009ac8 <USBD_CDC_Init+0x1ec>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	f003 020f 	and.w	r2, r3, #15
 8009a38:	6879      	ldr	r1, [r7, #4]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	440b      	add	r3, r1
 8009a44:	3324      	adds	r3, #36	@ 0x24
 8009a46:	2201      	movs	r2, #1
 8009a48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	33b0      	adds	r3, #176	@ 0xb0
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009a80:	2302      	movs	r3, #2
 8009a82:	e018      	b.n	8009ab6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	7c1b      	ldrb	r3, [r3, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac4 <USBD_CDC_Init+0x1e8>)
 8009a8e:	7819      	ldrb	r1, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f002 fc0e 	bl	800c2bc <USBD_LL_PrepareReceive>
 8009aa0:	e008      	b.n	8009ab4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009aa2:	4b08      	ldr	r3, [pc, #32]	@ (8009ac4 <USBD_CDC_Init+0x1e8>)
 8009aa4:	7819      	ldrb	r1, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009aac:	2340      	movs	r3, #64	@ 0x40
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f002 fc04 	bl	800c2bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	24000097 	.word	0x24000097
 8009ac4:	24000098 	.word	0x24000098
 8009ac8:	24000099 	.word	0x24000099

08009acc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8009bc4 <USBD_CDC_DeInit+0xf8>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f002 fb23 	bl	800c12a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009ae4:	4b37      	ldr	r3, [pc, #220]	@ (8009bc4 <USBD_CDC_DeInit+0xf8>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	f003 020f 	and.w	r2, r3, #15
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	440b      	add	r3, r1
 8009af8:	3324      	adds	r3, #36	@ 0x24
 8009afa:	2200      	movs	r2, #0
 8009afc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009afe:	4b32      	ldr	r3, [pc, #200]	@ (8009bc8 <USBD_CDC_DeInit+0xfc>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f002 fb10 	bl	800c12a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009bc8 <USBD_CDC_DeInit+0xfc>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	f003 020f 	and.w	r2, r3, #15
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	440b      	add	r3, r1
 8009b1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b22:	2200      	movs	r2, #0
 8009b24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009b26:	4b29      	ldr	r3, [pc, #164]	@ (8009bcc <USBD_CDC_DeInit+0x100>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f002 fafc 	bl	800c12a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009b32:	4b26      	ldr	r3, [pc, #152]	@ (8009bcc <USBD_CDC_DeInit+0x100>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	f003 020f 	and.w	r2, r3, #15
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4413      	add	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	3324      	adds	r3, #36	@ 0x24
 8009b48:	2200      	movs	r2, #0
 8009b4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009bcc <USBD_CDC_DeInit+0x100>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	f003 020f 	and.w	r2, r3, #15
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	440b      	add	r3, r1
 8009b60:	3326      	adds	r3, #38	@ 0x26
 8009b62:	2200      	movs	r2, #0
 8009b64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	32b0      	adds	r2, #176	@ 0xb0
 8009b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01f      	beq.n	8009bb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	33b0      	adds	r3, #176	@ 0xb0
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	32b0      	adds	r2, #176	@ 0xb0
 8009b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f002 fbd0 	bl	800c340 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	32b0      	adds	r2, #176	@ 0xb0
 8009baa:	2100      	movs	r1, #0
 8009bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	24000097 	.word	0x24000097
 8009bc8:	24000098 	.word	0x24000098
 8009bcc:	24000099 	.word	0x24000099

08009bd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	32b0      	adds	r2, #176	@ 0xb0
 8009be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e0bf      	b.n	8009d80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d050      	beq.n	8009cae <USBD_CDC_Setup+0xde>
 8009c0c:	2b20      	cmp	r3, #32
 8009c0e:	f040 80af 	bne.w	8009d70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	88db      	ldrh	r3, [r3, #6]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d03a      	beq.n	8009c90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b25b      	sxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da1b      	bge.n	8009c5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	33b0      	adds	r3, #176	@ 0xb0
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009c3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	88d2      	ldrh	r2, [r2, #6]
 8009c40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	88db      	ldrh	r3, [r3, #6]
 8009c46:	2b07      	cmp	r3, #7
 8009c48:	bf28      	it	cs
 8009c4a:	2307      	movcs	r3, #7
 8009c4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	89fa      	ldrh	r2, [r7, #14]
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 fdbd 	bl	800b7d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009c5a:	e090      	b.n	8009d7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	785a      	ldrb	r2, [r3, #1]
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	88db      	ldrh	r3, [r3, #6]
 8009c6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8009c6c:	d803      	bhi.n	8009c76 <USBD_CDC_Setup+0xa6>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	88db      	ldrh	r3, [r3, #6]
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	e000      	b.n	8009c78 <USBD_CDC_Setup+0xa8>
 8009c76:	2240      	movs	r2, #64	@ 0x40
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c7e:	6939      	ldr	r1, [r7, #16]
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009c86:	461a      	mov	r2, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fdcf 	bl	800b82c <USBD_CtlPrepareRx>
      break;
 8009c8e:	e076      	b.n	8009d7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	33b0      	adds	r3, #176	@ 0xb0
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	7850      	ldrb	r0, [r2, #1]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	4798      	blx	r3
      break;
 8009cac:	e067      	b.n	8009d7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b0b      	cmp	r3, #11
 8009cb4:	d851      	bhi.n	8009d5a <USBD_CDC_Setup+0x18a>
 8009cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cbc <USBD_CDC_Setup+0xec>)
 8009cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbc:	08009ced 	.word	0x08009ced
 8009cc0:	08009d69 	.word	0x08009d69
 8009cc4:	08009d5b 	.word	0x08009d5b
 8009cc8:	08009d5b 	.word	0x08009d5b
 8009ccc:	08009d5b 	.word	0x08009d5b
 8009cd0:	08009d5b 	.word	0x08009d5b
 8009cd4:	08009d5b 	.word	0x08009d5b
 8009cd8:	08009d5b 	.word	0x08009d5b
 8009cdc:	08009d5b 	.word	0x08009d5b
 8009ce0:	08009d5b 	.word	0x08009d5b
 8009ce4:	08009d17 	.word	0x08009d17
 8009ce8:	08009d41 	.word	0x08009d41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d107      	bne.n	8009d08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009cf8:	f107 030a 	add.w	r3, r7, #10
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 fd67 	bl	800b7d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d06:	e032      	b.n	8009d6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f001 fce5 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009d10:	2303      	movs	r3, #3
 8009d12:	75fb      	strb	r3, [r7, #23]
          break;
 8009d14:	e02b      	b.n	8009d6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d107      	bne.n	8009d32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d22:	f107 030d 	add.w	r3, r7, #13
 8009d26:	2201      	movs	r2, #1
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 fd52 	bl	800b7d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d30:	e01d      	b.n	8009d6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 fcd0 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d3e:	e016      	b.n	8009d6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d00f      	beq.n	8009d6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 fcc3 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009d54:	2303      	movs	r3, #3
 8009d56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d58:	e008      	b.n	8009d6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 fcbc 	bl	800b6da <USBD_CtlError>
          ret = USBD_FAIL;
 8009d62:	2303      	movs	r3, #3
 8009d64:	75fb      	strb	r3, [r7, #23]
          break;
 8009d66:	e002      	b.n	8009d6e <USBD_CDC_Setup+0x19e>
          break;
 8009d68:	bf00      	nop
 8009d6a:	e008      	b.n	8009d7e <USBD_CDC_Setup+0x1ae>
          break;
 8009d6c:	bf00      	nop
      }
      break;
 8009d6e:	e006      	b.n	8009d7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 fcb1 	bl	800b6da <USBD_CtlError>
      ret = USBD_FAIL;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	32b0      	adds	r2, #176	@ 0xb0
 8009da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e065      	b.n	8009e7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	32b0      	adds	r2, #176	@ 0xb0
 8009dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	f003 020f 	and.w	r2, r3, #15
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	3318      	adds	r3, #24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d02f      	beq.n	8009e3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ddc:	78fb      	ldrb	r3, [r7, #3]
 8009dde:	f003 020f 	and.w	r2, r3, #15
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	4613      	mov	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	440b      	add	r3, r1
 8009dee:	3318      	adds	r3, #24
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	f003 010f 	and.w	r1, r3, #15
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	440b      	add	r3, r1
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4403      	add	r3, r0
 8009e04:	331c      	adds	r3, #28
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e0c:	fb01 f303 	mul.w	r3, r1, r3
 8009e10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d112      	bne.n	8009e3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009e16:	78fb      	ldrb	r3, [r7, #3]
 8009e18:	f003 020f 	and.w	r2, r3, #15
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	440b      	add	r3, r1
 8009e28:	3318      	adds	r3, #24
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e2e:	78f9      	ldrb	r1, [r7, #3]
 8009e30:	2300      	movs	r3, #0
 8009e32:	2200      	movs	r2, #0
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f002 fa20 	bl	800c27a <USBD_LL_Transmit>
 8009e3a:	e01f      	b.n	8009e7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	33b0      	adds	r3, #176	@ 0xb0
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d010      	beq.n	8009e7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	33b0      	adds	r3, #176	@ 0xb0
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009e78:	78fa      	ldrb	r2, [r7, #3]
 8009e7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	32b0      	adds	r2, #176	@ 0xb0
 8009e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	32b0      	adds	r2, #176	@ 0xb0
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e01a      	b.n	8009eee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f002 fa1e 	bl	800c2fe <USBD_LL_GetRxDataSize>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	33b0      	adds	r3, #176	@ 0xb0
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	32b0      	adds	r2, #176	@ 0xb0
 8009f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e024      	b.n	8009f62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	33b0      	adds	r3, #176	@ 0xb0
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d019      	beq.n	8009f60 <USBD_CDC_EP0_RxReady+0x6a>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009f32:	2bff      	cmp	r3, #255	@ 0xff
 8009f34:	d014      	beq.n	8009f60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	33b0      	adds	r3, #176	@ 0xb0
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009f4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	22ff      	movs	r2, #255	@ 0xff
 8009f5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f74:	2182      	movs	r1, #130	@ 0x82
 8009f76:	4818      	ldr	r0, [pc, #96]	@ (8009fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f78:	f000 fd4f 	bl	800aa1a <USBD_GetEpDesc>
 8009f7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f7e:	2101      	movs	r1, #1
 8009f80:	4815      	ldr	r0, [pc, #84]	@ (8009fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f82:	f000 fd4a 	bl	800aa1a <USBD_GetEpDesc>
 8009f86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f88:	2181      	movs	r1, #129	@ 0x81
 8009f8a:	4813      	ldr	r0, [pc, #76]	@ (8009fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f8c:	f000 fd45 	bl	800aa1a <USBD_GetEpDesc>
 8009f90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2210      	movs	r2, #16
 8009f9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d006      	beq.n	8009fb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fac:	711a      	strb	r2, [r3, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d006      	beq.n	8009fc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fc0:	711a      	strb	r2, [r3, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2243      	movs	r2, #67	@ 0x43
 8009fca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fcc:	4b02      	ldr	r3, [pc, #8]	@ (8009fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	24000054 	.word	0x24000054

08009fdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fe4:	2182      	movs	r1, #130	@ 0x82
 8009fe6:	4818      	ldr	r0, [pc, #96]	@ (800a048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009fe8:	f000 fd17 	bl	800aa1a <USBD_GetEpDesc>
 8009fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4815      	ldr	r0, [pc, #84]	@ (800a048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ff2:	f000 fd12 	bl	800aa1a <USBD_GetEpDesc>
 8009ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ff8:	2181      	movs	r1, #129	@ 0x81
 8009ffa:	4813      	ldr	r0, [pc, #76]	@ (800a048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ffc:	f000 fd0d 	bl	800aa1a <USBD_GetEpDesc>
 800a000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2210      	movs	r2, #16
 800a00c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d006      	beq.n	800a022 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2200      	movs	r2, #0
 800a018:	711a      	strb	r2, [r3, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f042 0202 	orr.w	r2, r2, #2
 800a020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d006      	beq.n	800a036 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	711a      	strb	r2, [r3, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f042 0202 	orr.w	r2, r2, #2
 800a034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2243      	movs	r2, #67	@ 0x43
 800a03a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a03c:	4b02      	ldr	r3, [pc, #8]	@ (800a048 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	24000054 	.word	0x24000054

0800a04c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a054:	2182      	movs	r1, #130	@ 0x82
 800a056:	4818      	ldr	r0, [pc, #96]	@ (800a0b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a058:	f000 fcdf 	bl	800aa1a <USBD_GetEpDesc>
 800a05c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a05e:	2101      	movs	r1, #1
 800a060:	4815      	ldr	r0, [pc, #84]	@ (800a0b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a062:	f000 fcda 	bl	800aa1a <USBD_GetEpDesc>
 800a066:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a068:	2181      	movs	r1, #129	@ 0x81
 800a06a:	4813      	ldr	r0, [pc, #76]	@ (800a0b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a06c:	f000 fcd5 	bl	800aa1a <USBD_GetEpDesc>
 800a070:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2210      	movs	r2, #16
 800a07c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d006      	beq.n	800a092 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	2200      	movs	r2, #0
 800a088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a08c:	711a      	strb	r2, [r3, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d006      	beq.n	800a0a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0a0:	711a      	strb	r2, [r3, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2243      	movs	r2, #67	@ 0x43
 800a0aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0ac:	4b02      	ldr	r3, [pc, #8]	@ (800a0b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	24000054 	.word	0x24000054

0800a0bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	220a      	movs	r2, #10
 800a0c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0ca:	4b03      	ldr	r3, [pc, #12]	@ (800a0d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	24000010 	.word	0x24000010

0800a0dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e009      	b.n	800a104 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	33b0      	adds	r3, #176	@ 0xb0
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	32b0      	adds	r2, #176	@ 0xb0
 800a126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a132:	2303      	movs	r3, #3
 800a134:	e008      	b.n	800a148 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	32b0      	adds	r2, #176	@ 0xb0
 800a168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a174:	2303      	movs	r3, #3
 800a176:	e004      	b.n	800a182 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
	...

0800a190 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	32b0      	adds	r2, #176	@ 0xb0
 800a1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e025      	b.n	800a202 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d11f      	bne.n	800a200 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a1c8:	4b10      	ldr	r3, [pc, #64]	@ (800a20c <USBD_CDC_TransmitPacket+0x7c>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f003 020f 	and.w	r2, r3, #15
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4403      	add	r3, r0
 800a1e2:	3318      	adds	r3, #24
 800a1e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a1e6:	4b09      	ldr	r3, [pc, #36]	@ (800a20c <USBD_CDC_TransmitPacket+0x7c>)
 800a1e8:	7819      	ldrb	r1, [r3, #0]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f002 f83f 	bl	800c27a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	24000097 	.word	0x24000097

0800a210 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	32b0      	adds	r2, #176	@ 0xb0
 800a222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a226:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	32b0      	adds	r2, #176	@ 0xb0
 800a232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e018      	b.n	800a270 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	7c1b      	ldrb	r3, [r3, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10a      	bne.n	800a25c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a246:	4b0c      	ldr	r3, [pc, #48]	@ (800a278 <USBD_CDC_ReceivePacket+0x68>)
 800a248:	7819      	ldrb	r1, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f002 f831 	bl	800c2bc <USBD_LL_PrepareReceive>
 800a25a:	e008      	b.n	800a26e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a25c:	4b06      	ldr	r3, [pc, #24]	@ (800a278 <USBD_CDC_ReceivePacket+0x68>)
 800a25e:	7819      	ldrb	r1, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a266:	2340      	movs	r3, #64	@ 0x40
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f002 f827 	bl	800c2bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	24000098 	.word	0x24000098

0800a27c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d101      	bne.n	800a294 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a290:	2303      	movs	r3, #3
 800a292:	e01f      	b.n	800a2d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	79fa      	ldrb	r2, [r7, #7]
 800a2c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f001 fe9d 	bl	800c008 <USBD_LL_Init>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e025      	b.n	800a340 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	32ae      	adds	r2, #174	@ 0xae
 800a306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00f      	beq.n	800a330 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	32ae      	adds	r2, #174	@ 0xae
 800a31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a320:	f107 020e 	add.w	r2, r7, #14
 800a324:	4610      	mov	r0, r2
 800a326:	4798      	blx	r3
 800a328:	4602      	mov	r2, r0
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 fea9 	bl	800c0a8 <USBD_LL_Start>
 800a356:	4603      	mov	r3, r0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a368:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	460b      	mov	r3, r1
 800a380:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d009      	beq.n	800a3a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	78fa      	ldrb	r2, [r7, #3]
 800a39a:	4611      	mov	r1, r2
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	4798      	blx	r3
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	78fa      	ldrb	r2, [r7, #3]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	4798      	blx	r3
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f001 f936 	bl	800b666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a408:	461a      	mov	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a416:	f003 031f 	and.w	r3, r3, #31
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d01a      	beq.n	800a454 <USBD_LL_SetupStage+0x72>
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d822      	bhi.n	800a468 <USBD_LL_SetupStage+0x86>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <USBD_LL_SetupStage+0x4a>
 800a426:	2b01      	cmp	r3, #1
 800a428:	d00a      	beq.n	800a440 <USBD_LL_SetupStage+0x5e>
 800a42a:	e01d      	b.n	800a468 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fb63 	bl	800ab00 <USBD_StdDevReq>
 800a43a:	4603      	mov	r3, r0
 800a43c:	73fb      	strb	r3, [r7, #15]
      break;
 800a43e:	e020      	b.n	800a482 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fbcb 	bl	800abe4 <USBD_StdItfReq>
 800a44e:	4603      	mov	r3, r0
 800a450:	73fb      	strb	r3, [r7, #15]
      break;
 800a452:	e016      	b.n	800a482 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fc2d 	bl	800acbc <USBD_StdEPReq>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]
      break;
 800a466:	e00c      	b.n	800a482 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a46e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a472:	b2db      	uxtb	r3, r3
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 fe76 	bl	800c168 <USBD_LL_StallEP>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]
      break;
 800a480:	bf00      	nop
  }

  return ret;
 800a482:	7bfb      	ldrb	r3, [r7, #15]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	460b      	mov	r3, r1
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d16e      	bne.n	800a582 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a4aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	f040 8098 	bne.w	800a5e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d913      	bls.n	800a4ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	689a      	ldr	r2, [r3, #8]
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	bf28      	it	cs
 800a4de:	4613      	movcs	r3, r2
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6879      	ldr	r1, [r7, #4]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f001 f9be 	bl	800b866 <USBD_CtlContinueRx>
 800a4ea:	e07d      	b.n	800a5e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a4f2:	f003 031f 	and.w	r3, r3, #31
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d014      	beq.n	800a524 <USBD_LL_DataOutStage+0x98>
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d81d      	bhi.n	800a53a <USBD_LL_DataOutStage+0xae>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d002      	beq.n	800a508 <USBD_LL_DataOutStage+0x7c>
 800a502:	2b01      	cmp	r3, #1
 800a504:	d003      	beq.n	800a50e <USBD_LL_DataOutStage+0x82>
 800a506:	e018      	b.n	800a53a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a508:	2300      	movs	r3, #0
 800a50a:	75bb      	strb	r3, [r7, #22]
            break;
 800a50c:	e018      	b.n	800a540 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a514:	b2db      	uxtb	r3, r3
 800a516:	4619      	mov	r1, r3
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 fa64 	bl	800a9e6 <USBD_CoreFindIF>
 800a51e:	4603      	mov	r3, r0
 800a520:	75bb      	strb	r3, [r7, #22]
            break;
 800a522:	e00d      	b.n	800a540 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	4619      	mov	r1, r3
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 fa66 	bl	800aa00 <USBD_CoreFindEP>
 800a534:	4603      	mov	r3, r0
 800a536:	75bb      	strb	r3, [r7, #22]
            break;
 800a538:	e002      	b.n	800a540 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	75bb      	strb	r3, [r7, #22]
            break;
 800a53e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a540:	7dbb      	ldrb	r3, [r7, #22]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d119      	bne.n	800a57a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d113      	bne.n	800a57a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a552:	7dba      	ldrb	r2, [r7, #22]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	32ae      	adds	r2, #174	@ 0xae
 800a558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00b      	beq.n	800a57a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a562:	7dba      	ldrb	r2, [r7, #22]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a56a:	7dba      	ldrb	r2, [r7, #22]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	32ae      	adds	r2, #174	@ 0xae
 800a570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f001 f984 	bl	800b888 <USBD_CtlSendStatus>
 800a580:	e032      	b.n	800a5e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a582:	7afb      	ldrb	r3, [r7, #11]
 800a584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	4619      	mov	r1, r3
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 fa37 	bl	800aa00 <USBD_CoreFindEP>
 800a592:	4603      	mov	r3, r0
 800a594:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a596:	7dbb      	ldrb	r3, [r7, #22]
 800a598:	2bff      	cmp	r3, #255	@ 0xff
 800a59a:	d025      	beq.n	800a5e8 <USBD_LL_DataOutStage+0x15c>
 800a59c:	7dbb      	ldrb	r3, [r7, #22]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d122      	bne.n	800a5e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d117      	bne.n	800a5de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a5ae:	7dba      	ldrb	r2, [r7, #22]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	32ae      	adds	r2, #174	@ 0xae
 800a5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00f      	beq.n	800a5de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a5be:	7dba      	ldrb	r2, [r7, #22]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a5c6:	7dba      	ldrb	r2, [r7, #22]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	32ae      	adds	r2, #174	@ 0xae
 800a5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	7afa      	ldrb	r2, [r7, #11]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	4798      	blx	r3
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	e000      	b.n	800a5ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b086      	sub	sp, #24
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	607a      	str	r2, [r7, #4]
 800a5fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d16f      	bne.n	800a6e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3314      	adds	r3, #20
 800a60a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a612:	2b02      	cmp	r3, #2
 800a614:	d15a      	bne.n	800a6cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	689a      	ldr	r2, [r3, #8]
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d914      	bls.n	800a64c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	1ad2      	subs	r2, r2, r3
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	461a      	mov	r2, r3
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f001 f8e6 	bl	800b80a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a63e:	2300      	movs	r3, #0
 800a640:	2200      	movs	r2, #0
 800a642:	2100      	movs	r1, #0
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f001 fe39 	bl	800c2bc <USBD_LL_PrepareReceive>
 800a64a:	e03f      	b.n	800a6cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	429a      	cmp	r2, r3
 800a656:	d11c      	bne.n	800a692 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a660:	429a      	cmp	r2, r3
 800a662:	d316      	bcc.n	800a692 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a66e:	429a      	cmp	r2, r3
 800a670:	d20f      	bcs.n	800a692 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a672:	2200      	movs	r2, #0
 800a674:	2100      	movs	r1, #0
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f001 f8c7 	bl	800b80a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a684:	2300      	movs	r3, #0
 800a686:	2200      	movs	r2, #0
 800a688:	2100      	movs	r1, #0
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f001 fe16 	bl	800c2bc <USBD_LL_PrepareReceive>
 800a690:	e01c      	b.n	800a6cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d10f      	bne.n	800a6be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d009      	beq.n	800a6be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6be:	2180      	movs	r1, #128	@ 0x80
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f001 fd51 	bl	800c168 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f001 f8f1 	bl	800b8ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d03a      	beq.n	800a74c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff fe42 	bl	800a360 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a6e4:	e032      	b.n	800a74c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a6e6:	7afb      	ldrb	r3, [r7, #11]
 800a6e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 f985 	bl	800aa00 <USBD_CoreFindEP>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6fa:	7dfb      	ldrb	r3, [r7, #23]
 800a6fc:	2bff      	cmp	r3, #255	@ 0xff
 800a6fe:	d025      	beq.n	800a74c <USBD_LL_DataInStage+0x15a>
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d122      	bne.n	800a74c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d11c      	bne.n	800a74c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a712:	7dfa      	ldrb	r2, [r7, #23]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	32ae      	adds	r2, #174	@ 0xae
 800a718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d014      	beq.n	800a74c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a722:	7dfa      	ldrb	r2, [r7, #23]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a72a:	7dfa      	ldrb	r2, [r7, #23]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	32ae      	adds	r2, #174	@ 0xae
 800a730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	7afa      	ldrb	r2, [r7, #11]
 800a738:	4611      	mov	r1, r2
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	4798      	blx	r3
 800a73e:	4603      	mov	r3, r0
 800a740:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a742:	7dbb      	ldrb	r3, [r7, #22]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a748:	7dbb      	ldrb	r3, [r7, #22]
 800a74a:	e000      	b.n	800a74e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d014      	beq.n	800a7bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00e      	beq.n	800a7bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	6852      	ldr	r2, [r2, #4]
 800a7aa:	b2d2      	uxtb	r2, r2
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	4798      	blx	r3
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7bc:	2340      	movs	r3, #64	@ 0x40
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 fc8b 	bl	800c0de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2240      	movs	r2, #64	@ 0x40
 800a7d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7d8:	2340      	movs	r3, #64	@ 0x40
 800a7da:	2200      	movs	r2, #0
 800a7dc:	2180      	movs	r1, #128	@ 0x80
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f001 fc7d 	bl	800c0de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2240      	movs	r2, #64	@ 0x40
 800a7ee:	621a      	str	r2, [r3, #32]

  return ret;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	460b      	mov	r3, r1
 800a804:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	78fa      	ldrb	r2, [r7, #3]
 800a80a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d006      	beq.n	800a83c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a834:	b2da      	uxtb	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2204      	movs	r2, #4
 800a840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a852:	b480      	push	{r7}
 800a854:	b083      	sub	sp, #12
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b04      	cmp	r3, #4
 800a864:	d106      	bne.n	800a874 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b03      	cmp	r3, #3
 800a894:	d110      	bne.n	800a8b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00b      	beq.n	800a8b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a6:	69db      	ldr	r3, [r3, #28]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	32ae      	adds	r2, #174	@ 0xae
 800a8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e01c      	b.n	800a91e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d115      	bne.n	800a91c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32ae      	adds	r2, #174	@ 0xae
 800a8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32ae      	adds	r2, #174	@ 0xae
 800a90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	4611      	mov	r1, r2
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	460b      	mov	r3, r1
 800a930:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	32ae      	adds	r2, #174	@ 0xae
 800a93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a944:	2303      	movs	r3, #3
 800a946:	e01c      	b.n	800a982 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b03      	cmp	r3, #3
 800a952:	d115      	bne.n	800a980 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	32ae      	adds	r2, #174	@ 0xae
 800a95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00b      	beq.n	800a980 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	32ae      	adds	r2, #174	@ 0xae
 800a972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a978:	78fa      	ldrb	r2, [r7, #3]
 800a97a:	4611      	mov	r1, r2
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00e      	beq.n	800a9dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6852      	ldr	r2, [r2, #4]
 800a9ca:	b2d2      	uxtb	r2, r2
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	4798      	blx	r3
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b086      	sub	sp, #24
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	460b      	mov	r3, r1
 800aa24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	885b      	ldrh	r3, [r3, #2]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	7812      	ldrb	r2, [r2, #0]
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d91f      	bls.n	800aa80 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa46:	e013      	b.n	800aa70 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa48:	f107 030a 	add.w	r3, r7, #10
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6978      	ldr	r0, [r7, #20]
 800aa50:	f000 f81b 	bl	800aa8a <USBD_GetNextDesc>
 800aa54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	785b      	ldrb	r3, [r3, #1]
 800aa5a:	2b05      	cmp	r3, #5
 800aa5c:	d108      	bne.n	800aa70 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	789b      	ldrb	r3, [r3, #2]
 800aa66:	78fa      	ldrb	r2, [r7, #3]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d008      	beq.n	800aa7e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	885b      	ldrh	r3, [r3, #2]
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	897b      	ldrh	r3, [r7, #10]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d8e5      	bhi.n	800aa48 <USBD_GetEpDesc+0x2e>
 800aa7c:	e000      	b.n	800aa80 <USBD_GetEpDesc+0x66>
          break;
 800aa7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa80:	693b      	ldr	r3, [r7, #16]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	7812      	ldrb	r2, [r2, #0]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aab4:	68fb      	ldr	r3, [r7, #12]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b087      	sub	sp, #28
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3301      	adds	r3, #1
 800aad8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aae0:	8a3b      	ldrh	r3, [r7, #16]
 800aae2:	021b      	lsls	r3, r3, #8
 800aae4:	b21a      	sxth	r2, r3
 800aae6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	b21b      	sxth	r3, r3
 800aaee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aaf0:	89fb      	ldrh	r3, [r7, #14]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
	...

0800ab00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab16:	2b40      	cmp	r3, #64	@ 0x40
 800ab18:	d005      	beq.n	800ab26 <USBD_StdDevReq+0x26>
 800ab1a:	2b40      	cmp	r3, #64	@ 0x40
 800ab1c:	d857      	bhi.n	800abce <USBD_StdDevReq+0xce>
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00f      	beq.n	800ab42 <USBD_StdDevReq+0x42>
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d153      	bne.n	800abce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	32ae      	adds	r2, #174	@ 0xae
 800ab30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	4798      	blx	r3
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab40:	e04a      	b.n	800abd8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	2b09      	cmp	r3, #9
 800ab48:	d83b      	bhi.n	800abc2 <USBD_StdDevReq+0xc2>
 800ab4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab50 <USBD_StdDevReq+0x50>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800aba5 	.word	0x0800aba5
 800ab54:	0800abb9 	.word	0x0800abb9
 800ab58:	0800abc3 	.word	0x0800abc3
 800ab5c:	0800abaf 	.word	0x0800abaf
 800ab60:	0800abc3 	.word	0x0800abc3
 800ab64:	0800ab83 	.word	0x0800ab83
 800ab68:	0800ab79 	.word	0x0800ab79
 800ab6c:	0800abc3 	.word	0x0800abc3
 800ab70:	0800ab9b 	.word	0x0800ab9b
 800ab74:	0800ab8d 	.word	0x0800ab8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa3c 	bl	800aff8 <USBD_GetDescriptor>
          break;
 800ab80:	e024      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fbcb 	bl	800b320 <USBD_SetAddress>
          break;
 800ab8a:	e01f      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fc0a 	bl	800b3a8 <USBD_SetConfig>
 800ab94:	4603      	mov	r3, r0
 800ab96:	73fb      	strb	r3, [r7, #15]
          break;
 800ab98:	e018      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fcad 	bl	800b4fc <USBD_GetConfig>
          break;
 800aba2:	e013      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fcde 	bl	800b568 <USBD_GetStatus>
          break;
 800abac:	e00e      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fd0d 	bl	800b5d0 <USBD_SetFeature>
          break;
 800abb6:	e009      	b.n	800abcc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fd31 	bl	800b622 <USBD_ClrFeature>
          break;
 800abc0:	e004      	b.n	800abcc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fd88 	bl	800b6da <USBD_CtlError>
          break;
 800abca:	bf00      	nop
      }
      break;
 800abcc:	e004      	b.n	800abd8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fd82 	bl	800b6da <USBD_CtlError>
      break;
 800abd6:	bf00      	nop
  }

  return ret;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop

0800abe4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abfa:	2b40      	cmp	r3, #64	@ 0x40
 800abfc:	d005      	beq.n	800ac0a <USBD_StdItfReq+0x26>
 800abfe:	2b40      	cmp	r3, #64	@ 0x40
 800ac00:	d852      	bhi.n	800aca8 <USBD_StdItfReq+0xc4>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <USBD_StdItfReq+0x26>
 800ac06:	2b20      	cmp	r3, #32
 800ac08:	d14e      	bne.n	800aca8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	3b01      	subs	r3, #1
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d840      	bhi.n	800ac9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	889b      	ldrh	r3, [r3, #4]
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d836      	bhi.n	800ac90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	889b      	ldrh	r3, [r3, #4]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff fedb 	bl	800a9e6 <USBD_CoreFindIF>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	2bff      	cmp	r3, #255	@ 0xff
 800ac38:	d01d      	beq.n	800ac76 <USBD_StdItfReq+0x92>
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d11a      	bne.n	800ac76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac40:	7bba      	ldrb	r2, [r7, #14]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	32ae      	adds	r2, #174	@ 0xae
 800ac46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00f      	beq.n	800ac70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac50:	7bba      	ldrb	r2, [r7, #14]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac58:	7bba      	ldrb	r2, [r7, #14]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	32ae      	adds	r2, #174	@ 0xae
 800ac5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac6e:	e004      	b.n	800ac7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac70:	2303      	movs	r3, #3
 800ac72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac74:	e001      	b.n	800ac7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac76:	2303      	movs	r3, #3
 800ac78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	88db      	ldrh	r3, [r3, #6]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d110      	bne.n	800aca4 <USBD_StdItfReq+0xc0>
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10d      	bne.n	800aca4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fdfd 	bl	800b888 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac8e:	e009      	b.n	800aca4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fd21 	bl	800b6da <USBD_CtlError>
          break;
 800ac98:	e004      	b.n	800aca4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fd1c 	bl	800b6da <USBD_CtlError>
          break;
 800aca2:	e000      	b.n	800aca6 <USBD_StdItfReq+0xc2>
          break;
 800aca4:	bf00      	nop
      }
      break;
 800aca6:	e004      	b.n	800acb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fd15 	bl	800b6da <USBD_CtlError>
      break;
 800acb0:	bf00      	nop
  }

  return ret;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	889b      	ldrh	r3, [r3, #4]
 800acce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acd8:	2b40      	cmp	r3, #64	@ 0x40
 800acda:	d007      	beq.n	800acec <USBD_StdEPReq+0x30>
 800acdc:	2b40      	cmp	r3, #64	@ 0x40
 800acde:	f200 817f 	bhi.w	800afe0 <USBD_StdEPReq+0x324>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d02a      	beq.n	800ad3c <USBD_StdEPReq+0x80>
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	f040 817a 	bne.w	800afe0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff fe85 	bl	800aa00 <USBD_CoreFindEP>
 800acf6:	4603      	mov	r3, r0
 800acf8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acfa:	7b7b      	ldrb	r3, [r7, #13]
 800acfc:	2bff      	cmp	r3, #255	@ 0xff
 800acfe:	f000 8174 	beq.w	800afea <USBD_StdEPReq+0x32e>
 800ad02:	7b7b      	ldrb	r3, [r7, #13]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f040 8170 	bne.w	800afea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad0a:	7b7a      	ldrb	r2, [r7, #13]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad12:	7b7a      	ldrb	r2, [r7, #13]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	32ae      	adds	r2, #174	@ 0xae
 800ad18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 8163 	beq.w	800afea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad24:	7b7a      	ldrb	r2, [r7, #13]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	32ae      	adds	r2, #174	@ 0xae
 800ad2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	4798      	blx	r3
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad3a:	e156      	b.n	800afea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	785b      	ldrb	r3, [r3, #1]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d008      	beq.n	800ad56 <USBD_StdEPReq+0x9a>
 800ad44:	2b03      	cmp	r3, #3
 800ad46:	f300 8145 	bgt.w	800afd4 <USBD_StdEPReq+0x318>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 809b 	beq.w	800ae86 <USBD_StdEPReq+0x1ca>
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d03c      	beq.n	800adce <USBD_StdEPReq+0x112>
 800ad54:	e13e      	b.n	800afd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d002      	beq.n	800ad68 <USBD_StdEPReq+0xac>
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	d016      	beq.n	800ad94 <USBD_StdEPReq+0xd8>
 800ad66:	e02c      	b.n	800adc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00d      	beq.n	800ad8a <USBD_StdEPReq+0xce>
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
 800ad70:	2b80      	cmp	r3, #128	@ 0x80
 800ad72:	d00a      	beq.n	800ad8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f001 f9f5 	bl	800c168 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad7e:	2180      	movs	r1, #128	@ 0x80
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 f9f1 	bl	800c168 <USBD_LL_StallEP>
 800ad86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad88:	e020      	b.n	800adcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fca4 	bl	800b6da <USBD_CtlError>
              break;
 800ad92:	e01b      	b.n	800adcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	885b      	ldrh	r3, [r3, #2]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10e      	bne.n	800adba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <USBD_StdEPReq+0xfe>
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	2b80      	cmp	r3, #128	@ 0x80
 800ada6:	d008      	beq.n	800adba <USBD_StdEPReq+0xfe>
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	88db      	ldrh	r3, [r3, #6]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d104      	bne.n	800adba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 f9d7 	bl	800c168 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fd64 	bl	800b888 <USBD_CtlSendStatus>

              break;
 800adc0:	e004      	b.n	800adcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fc88 	bl	800b6da <USBD_CtlError>
              break;
 800adca:	bf00      	nop
          }
          break;
 800adcc:	e107      	b.n	800afde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b02      	cmp	r3, #2
 800add8:	d002      	beq.n	800ade0 <USBD_StdEPReq+0x124>
 800adda:	2b03      	cmp	r3, #3
 800addc:	d016      	beq.n	800ae0c <USBD_StdEPReq+0x150>
 800adde:	e04b      	b.n	800ae78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00d      	beq.n	800ae02 <USBD_StdEPReq+0x146>
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	2b80      	cmp	r3, #128	@ 0x80
 800adea:	d00a      	beq.n	800ae02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f001 f9b9 	bl	800c168 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adf6:	2180      	movs	r1, #128	@ 0x80
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 f9b5 	bl	800c168 <USBD_LL_StallEP>
 800adfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae00:	e040      	b.n	800ae84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fc68 	bl	800b6da <USBD_CtlError>
              break;
 800ae0a:	e03b      	b.n	800ae84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	885b      	ldrh	r3, [r3, #2]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d136      	bne.n	800ae82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae14:	7bbb      	ldrb	r3, [r7, #14]
 800ae16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 f9bf 	bl	800c1a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fd2d 	bl	800b888 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fde4 	bl	800aa00 <USBD_CoreFindEP>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae3c:	7b7b      	ldrb	r3, [r7, #13]
 800ae3e:	2bff      	cmp	r3, #255	@ 0xff
 800ae40:	d01f      	beq.n	800ae82 <USBD_StdEPReq+0x1c6>
 800ae42:	7b7b      	ldrb	r3, [r7, #13]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d11c      	bne.n	800ae82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae48:	7b7a      	ldrb	r2, [r7, #13]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae50:	7b7a      	ldrb	r2, [r7, #13]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32ae      	adds	r2, #174	@ 0xae
 800ae56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d010      	beq.n	800ae82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae60:	7b7a      	ldrb	r2, [r7, #13]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	32ae      	adds	r2, #174	@ 0xae
 800ae66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	4798      	blx	r3
 800ae72:	4603      	mov	r3, r0
 800ae74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae76:	e004      	b.n	800ae82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fc2d 	bl	800b6da <USBD_CtlError>
              break;
 800ae80:	e000      	b.n	800ae84 <USBD_StdEPReq+0x1c8>
              break;
 800ae82:	bf00      	nop
          }
          break;
 800ae84:	e0ab      	b.n	800afde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d002      	beq.n	800ae98 <USBD_StdEPReq+0x1dc>
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d032      	beq.n	800aefc <USBD_StdEPReq+0x240>
 800ae96:	e097      	b.n	800afc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d007      	beq.n	800aeae <USBD_StdEPReq+0x1f2>
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
 800aea0:	2b80      	cmp	r3, #128	@ 0x80
 800aea2:	d004      	beq.n	800aeae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fc17 	bl	800b6da <USBD_CtlError>
                break;
 800aeac:	e091      	b.n	800afd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da0b      	bge.n	800aece <USBD_StdEPReq+0x212>
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aebc:	4613      	mov	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	3310      	adds	r3, #16
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	4413      	add	r3, r2
 800aeca:	3304      	adds	r3, #4
 800aecc:	e00b      	b.n	800aee6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	3304      	adds	r3, #4
 800aee6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2202      	movs	r2, #2
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fc6d 	bl	800b7d4 <USBD_CtlSendData>
              break;
 800aefa:	e06a      	b.n	800afd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aefc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af00:	2b00      	cmp	r3, #0
 800af02:	da11      	bge.n	800af28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af04:	7bbb      	ldrb	r3, [r7, #14]
 800af06:	f003 020f 	and.w	r2, r3, #15
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	440b      	add	r3, r1
 800af16:	3324      	adds	r3, #36	@ 0x24
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d117      	bne.n	800af4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fbda 	bl	800b6da <USBD_CtlError>
                  break;
 800af26:	e054      	b.n	800afd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	f003 020f 	and.w	r2, r3, #15
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d104      	bne.n	800af4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fbc7 	bl	800b6da <USBD_CtlError>
                  break;
 800af4c:	e041      	b.n	800afd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af52:	2b00      	cmp	r3, #0
 800af54:	da0b      	bge.n	800af6e <USBD_StdEPReq+0x2b2>
 800af56:	7bbb      	ldrb	r3, [r7, #14]
 800af58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af5c:	4613      	mov	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	3310      	adds	r3, #16
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	4413      	add	r3, r2
 800af6a:	3304      	adds	r3, #4
 800af6c:	e00b      	b.n	800af86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af74:	4613      	mov	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	4413      	add	r3, r2
 800af84:	3304      	adds	r3, #4
 800af86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <USBD_StdEPReq+0x2d8>
 800af8e:	7bbb      	ldrb	r3, [r7, #14]
 800af90:	2b80      	cmp	r3, #128	@ 0x80
 800af92:	d103      	bne.n	800af9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	e00e      	b.n	800afba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 f91f 	bl	800c1e4 <USBD_LL_IsStallEP>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	e002      	b.n	800afba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2202      	movs	r2, #2
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fc07 	bl	800b7d4 <USBD_CtlSendData>
              break;
 800afc6:	e004      	b.n	800afd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fb85 	bl	800b6da <USBD_CtlError>
              break;
 800afd0:	bf00      	nop
          }
          break;
 800afd2:	e004      	b.n	800afde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fb7f 	bl	800b6da <USBD_CtlError>
          break;
 800afdc:	bf00      	nop
      }
      break;
 800afde:	e005      	b.n	800afec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fb79 	bl	800b6da <USBD_CtlError>
      break;
 800afe8:	e000      	b.n	800afec <USBD_StdEPReq+0x330>
      break;
 800afea:	bf00      	nop
  }

  return ret;
 800afec:	7bfb      	ldrb	r3, [r7, #15]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b002:	2300      	movs	r3, #0
 800b004:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b006:	2300      	movs	r3, #0
 800b008:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	885b      	ldrh	r3, [r3, #2]
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	b29b      	uxth	r3, r3
 800b016:	3b01      	subs	r3, #1
 800b018:	2b0e      	cmp	r3, #14
 800b01a:	f200 8152 	bhi.w	800b2c2 <USBD_GetDescriptor+0x2ca>
 800b01e:	a201      	add	r2, pc, #4	@ (adr r2, 800b024 <USBD_GetDescriptor+0x2c>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b095 	.word	0x0800b095
 800b028:	0800b0ad 	.word	0x0800b0ad
 800b02c:	0800b0ed 	.word	0x0800b0ed
 800b030:	0800b2c3 	.word	0x0800b2c3
 800b034:	0800b2c3 	.word	0x0800b2c3
 800b038:	0800b263 	.word	0x0800b263
 800b03c:	0800b28f 	.word	0x0800b28f
 800b040:	0800b2c3 	.word	0x0800b2c3
 800b044:	0800b2c3 	.word	0x0800b2c3
 800b048:	0800b2c3 	.word	0x0800b2c3
 800b04c:	0800b2c3 	.word	0x0800b2c3
 800b050:	0800b2c3 	.word	0x0800b2c3
 800b054:	0800b2c3 	.word	0x0800b2c3
 800b058:	0800b2c3 	.word	0x0800b2c3
 800b05c:	0800b061 	.word	0x0800b061
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	7c12      	ldrb	r2, [r2, #16]
 800b078:	f107 0108 	add.w	r1, r7, #8
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b082:	e126      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fb27 	bl	800b6da <USBD_CtlError>
        err++;
 800b08c:	7afb      	ldrb	r3, [r7, #11]
 800b08e:	3301      	adds	r3, #1
 800b090:	72fb      	strb	r3, [r7, #11]
      break;
 800b092:	e11e      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	7c12      	ldrb	r2, [r2, #16]
 800b0a0:	f107 0108 	add.w	r1, r7, #8
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	4798      	blx	r3
 800b0a8:	60f8      	str	r0, [r7, #12]
      break;
 800b0aa:	e112      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	7c1b      	ldrb	r3, [r3, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10d      	bne.n	800b0d0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0bc:	f107 0208 	add.w	r2, r7, #8
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4798      	blx	r3
 800b0c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0ce:	e100      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d8:	f107 0208 	add.w	r2, r7, #8
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	701a      	strb	r2, [r3, #0]
      break;
 800b0ea:	e0f2      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	885b      	ldrh	r3, [r3, #2]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	f200 80ac 	bhi.w	800b250 <USBD_GetDescriptor+0x258>
 800b0f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b100 <USBD_GetDescriptor+0x108>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b119 	.word	0x0800b119
 800b104:	0800b14d 	.word	0x0800b14d
 800b108:	0800b181 	.word	0x0800b181
 800b10c:	0800b1b5 	.word	0x0800b1b5
 800b110:	0800b1e9 	.word	0x0800b1e9
 800b114:	0800b21d 	.word	0x0800b21d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	7c12      	ldrb	r2, [r2, #16]
 800b130:	f107 0108 	add.w	r1, r7, #8
 800b134:	4610      	mov	r0, r2
 800b136:	4798      	blx	r3
 800b138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b13a:	e091      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 facb 	bl	800b6da <USBD_CtlError>
            err++;
 800b144:	7afb      	ldrb	r3, [r7, #11]
 800b146:	3301      	adds	r3, #1
 800b148:	72fb      	strb	r3, [r7, #11]
          break;
 800b14a:	e089      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00b      	beq.n	800b170 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	7c12      	ldrb	r2, [r2, #16]
 800b164:	f107 0108 	add.w	r1, r7, #8
 800b168:	4610      	mov	r0, r2
 800b16a:	4798      	blx	r3
 800b16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b16e:	e077      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fab1 	bl	800b6da <USBD_CtlError>
            err++;
 800b178:	7afb      	ldrb	r3, [r7, #11]
 800b17a:	3301      	adds	r3, #1
 800b17c:	72fb      	strb	r3, [r7, #11]
          break;
 800b17e:	e06f      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00b      	beq.n	800b1a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	7c12      	ldrb	r2, [r2, #16]
 800b198:	f107 0108 	add.w	r1, r7, #8
 800b19c:	4610      	mov	r0, r2
 800b19e:	4798      	blx	r3
 800b1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a2:	e05d      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa97 	bl	800b6da <USBD_CtlError>
            err++;
 800b1ac:	7afb      	ldrb	r3, [r7, #11]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b2:	e055      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	7c12      	ldrb	r2, [r2, #16]
 800b1cc:	f107 0108 	add.w	r1, r7, #8
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	4798      	blx	r3
 800b1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1d6:	e043      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fa7d 	bl	800b6da <USBD_CtlError>
            err++;
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1e6:	e03b      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00b      	beq.n	800b20c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	7c12      	ldrb	r2, [r2, #16]
 800b200:	f107 0108 	add.w	r1, r7, #8
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20a:	e029      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa63 	bl	800b6da <USBD_CtlError>
            err++;
 800b214:	7afb      	ldrb	r3, [r7, #11]
 800b216:	3301      	adds	r3, #1
 800b218:	72fb      	strb	r3, [r7, #11]
          break;
 800b21a:	e021      	b.n	800b260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00b      	beq.n	800b240 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	7c12      	ldrb	r2, [r2, #16]
 800b234:	f107 0108 	add.w	r1, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b23e:	e00f      	b.n	800b260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fa49 	bl	800b6da <USBD_CtlError>
            err++;
 800b248:	7afb      	ldrb	r3, [r7, #11]
 800b24a:	3301      	adds	r3, #1
 800b24c:	72fb      	strb	r3, [r7, #11]
          break;
 800b24e:	e007      	b.n	800b260 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fa41 	bl	800b6da <USBD_CtlError>
          err++;
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	3301      	adds	r3, #1
 800b25c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b25e:	bf00      	nop
      }
      break;
 800b260:	e037      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	7c1b      	ldrb	r3, [r3, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d109      	bne.n	800b27e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b272:	f107 0208 	add.w	r2, r7, #8
 800b276:	4610      	mov	r0, r2
 800b278:	4798      	blx	r3
 800b27a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b27c:	e029      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fa2a 	bl	800b6da <USBD_CtlError>
        err++;
 800b286:	7afb      	ldrb	r3, [r7, #11]
 800b288:	3301      	adds	r3, #1
 800b28a:	72fb      	strb	r3, [r7, #11]
      break;
 800b28c:	e021      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7c1b      	ldrb	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10d      	bne.n	800b2b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b29e:	f107 0208 	add.w	r2, r7, #8
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	4798      	blx	r3
 800b2a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	2207      	movs	r2, #7
 800b2ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2b0:	e00f      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fa10 	bl	800b6da <USBD_CtlError>
        err++;
 800b2ba:	7afb      	ldrb	r3, [r7, #11]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	72fb      	strb	r3, [r7, #11]
      break;
 800b2c0:	e007      	b.n	800b2d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa08 	bl	800b6da <USBD_CtlError>
      err++;
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d0:	bf00      	nop
  }

  if (err != 0U)
 800b2d2:	7afb      	ldrb	r3, [r7, #11]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d11e      	bne.n	800b316 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	88db      	ldrh	r3, [r3, #6]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d016      	beq.n	800b30e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b2e0:	893b      	ldrh	r3, [r7, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00e      	beq.n	800b304 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	88da      	ldrh	r2, [r3, #6]
 800b2ea:	893b      	ldrh	r3, [r7, #8]
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	bf28      	it	cs
 800b2f0:	4613      	movcs	r3, r2
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2f6:	893b      	ldrh	r3, [r7, #8]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fa69 	bl	800b7d4 <USBD_CtlSendData>
 800b302:	e009      	b.n	800b318 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f9e7 	bl	800b6da <USBD_CtlError>
 800b30c:	e004      	b.n	800b318 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 faba 	bl	800b888 <USBD_CtlSendStatus>
 800b314:	e000      	b.n	800b318 <USBD_GetDescriptor+0x320>
    return;
 800b316:	bf00      	nop
  }
}
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop

0800b320 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	889b      	ldrh	r3, [r3, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d131      	bne.n	800b396 <USBD_SetAddress+0x76>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88db      	ldrh	r3, [r3, #6]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d12d      	bne.n	800b396 <USBD_SetAddress+0x76>
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	885b      	ldrh	r3, [r3, #2]
 800b33e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b340:	d829      	bhi.n	800b396 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	885b      	ldrh	r3, [r3, #2]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b34c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b03      	cmp	r3, #3
 800b358:	d104      	bne.n	800b364 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f9bc 	bl	800b6da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b362:	e01d      	b.n	800b3a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	7bfa      	ldrb	r2, [r7, #15]
 800b368:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 ff63 	bl	800c23c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa86 	bl	800b888 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d004      	beq.n	800b38c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2202      	movs	r2, #2
 800b386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38a:	e009      	b.n	800b3a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b394:	e004      	b.n	800b3a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f99e 	bl	800b6da <USBD_CtlError>
  }
}
 800b39e:	bf00      	nop
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	885b      	ldrh	r3, [r3, #2]
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	4b4e      	ldr	r3, [pc, #312]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d905      	bls.n	800b3d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f985 	bl	800b6da <USBD_CtlError>
    return USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e08c      	b.n	800b4ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d002      	beq.n	800b3e6 <USBD_SetConfig+0x3e>
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d029      	beq.n	800b438 <USBD_SetConfig+0x90>
 800b3e4:	e075      	b.n	800b4d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3e6:	4b44      	ldr	r3, [pc, #272]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d020      	beq.n	800b430 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3ee:	4b42      	ldr	r3, [pc, #264]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3f8:	4b3f      	ldr	r3, [pc, #252]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7fe ffb9 	bl	800a376 <USBD_SetClassConfig>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f962 	bl	800b6da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b41e:	e065      	b.n	800b4ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fa31 	bl	800b888 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2203      	movs	r2, #3
 800b42a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b42e:	e05d      	b.n	800b4ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa29 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b436:	e059      	b.n	800b4ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b438:	4b2f      	ldr	r3, [pc, #188]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d112      	bne.n	800b466 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b448:	4b2b      	ldr	r3, [pc, #172]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	461a      	mov	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b452:	4b29      	ldr	r3, [pc, #164]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7fe ffa8 	bl	800a3ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fa12 	bl	800b888 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b464:	e042      	b.n	800b4ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b466:	4b24      	ldr	r3, [pc, #144]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	429a      	cmp	r2, r3
 800b472:	d02a      	beq.n	800b4ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7fe ff96 	bl	800a3ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b482:	4b1d      	ldr	r3, [pc, #116]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b48c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7fe ff6f 	bl	800a376 <USBD_SetClassConfig>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00f      	beq.n	800b4c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f918 	bl	800b6da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7fe ff7b 	bl	800a3ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4c0:	e014      	b.n	800b4ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9e0 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b4c8:	e010      	b.n	800b4ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f9dc 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b4d0:	e00c      	b.n	800b4ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f900 	bl	800b6da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4da:	4b07      	ldr	r3, [pc, #28]	@ (800b4f8 <USBD_SetConfig+0x150>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7fe ff64 	bl	800a3ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ea:	bf00      	nop
  }

  return ret;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	240003c8 	.word	0x240003c8

0800b4fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	88db      	ldrh	r3, [r3, #6]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d004      	beq.n	800b518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f8e2 	bl	800b6da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b516:	e023      	b.n	800b560 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	dc02      	bgt.n	800b52a <USBD_GetConfig+0x2e>
 800b524:	2b00      	cmp	r3, #0
 800b526:	dc03      	bgt.n	800b530 <USBD_GetConfig+0x34>
 800b528:	e015      	b.n	800b556 <USBD_GetConfig+0x5a>
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d00b      	beq.n	800b546 <USBD_GetConfig+0x4a>
 800b52e:	e012      	b.n	800b556 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3308      	adds	r3, #8
 800b53a:	2201      	movs	r2, #1
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f948 	bl	800b7d4 <USBD_CtlSendData>
        break;
 800b544:	e00c      	b.n	800b560 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	3304      	adds	r3, #4
 800b54a:	2201      	movs	r2, #1
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f940 	bl	800b7d4 <USBD_CtlSendData>
        break;
 800b554:	e004      	b.n	800b560 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f8be 	bl	800b6da <USBD_CtlError>
        break;
 800b55e:	bf00      	nop
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	3b01      	subs	r3, #1
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d81e      	bhi.n	800b5be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	88db      	ldrh	r3, [r3, #6]
 800b584:	2b02      	cmp	r3, #2
 800b586:	d004      	beq.n	800b592 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f8a5 	bl	800b6da <USBD_CtlError>
        break;
 800b590:	e01a      	b.n	800b5c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d005      	beq.n	800b5ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	f043 0202 	orr.w	r2, r3, #2
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	330c      	adds	r3, #12
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f90c 	bl	800b7d4 <USBD_CtlSendData>
      break;
 800b5bc:	e004      	b.n	800b5c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f88a 	bl	800b6da <USBD_CtlError>
      break;
 800b5c6:	bf00      	nop
  }
}
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	885b      	ldrh	r3, [r3, #2]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d107      	bne.n	800b5f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f94c 	bl	800b888 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5f0:	e013      	b.n	800b61a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	885b      	ldrh	r3, [r3, #2]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d10b      	bne.n	800b612 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	889b      	ldrh	r3, [r3, #4]
 800b5fe:	0a1b      	lsrs	r3, r3, #8
 800b600:	b29b      	uxth	r3, r3
 800b602:	b2da      	uxtb	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f93c 	bl	800b888 <USBD_CtlSendStatus>
}
 800b610:	e003      	b.n	800b61a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f860 	bl	800b6da <USBD_CtlError>
}
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b632:	b2db      	uxtb	r3, r3
 800b634:	3b01      	subs	r3, #1
 800b636:	2b02      	cmp	r3, #2
 800b638:	d80b      	bhi.n	800b652 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	885b      	ldrh	r3, [r3, #2]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d10c      	bne.n	800b65c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f91c 	bl	800b888 <USBD_CtlSendStatus>
      }
      break;
 800b650:	e004      	b.n	800b65c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f840 	bl	800b6da <USBD_CtlError>
      break;
 800b65a:	e000      	b.n	800b65e <USBD_ClrFeature+0x3c>
      break;
 800b65c:	bf00      	nop
  }
}
 800b65e:	bf00      	nop
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	781a      	ldrb	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3301      	adds	r3, #1
 800b680:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3301      	adds	r3, #1
 800b68e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff fa16 	bl	800aac2 <SWAPBYTE>
 800b696:	4603      	mov	r3, r0
 800b698:	461a      	mov	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff fa09 	bl	800aac2 <SWAPBYTE>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f7ff f9fc 	bl	800aac2 <SWAPBYTE>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	80da      	strh	r2, [r3, #6]
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6e4:	2180      	movs	r1, #128	@ 0x80
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fd3e 	bl	800c168 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fd3a 	bl	800c168 <USBD_LL_StallEP>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d042      	beq.n	800b798 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b716:	6938      	ldr	r0, [r7, #16]
 800b718:	f000 f842 	bl	800b7a0 <USBD_GetLen>
 800b71c:	4603      	mov	r3, r0
 800b71e:	3301      	adds	r3, #1
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b726:	d808      	bhi.n	800b73a <USBD_GetString+0x3e>
 800b728:	6938      	ldr	r0, [r7, #16]
 800b72a:	f000 f839 	bl	800b7a0 <USBD_GetLen>
 800b72e:	4603      	mov	r3, r0
 800b730:	3301      	adds	r3, #1
 800b732:	b29b      	uxth	r3, r3
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	b29a      	uxth	r2, r3
 800b738:	e001      	b.n	800b73e <USBD_GetString+0x42>
 800b73a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	4413      	add	r3, r2
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	3301      	adds	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	4413      	add	r3, r2
 800b75a:	2203      	movs	r2, #3
 800b75c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	3301      	adds	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b764:	e013      	b.n	800b78e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	4413      	add	r3, r2
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	7812      	ldrb	r2, [r2, #0]
 800b770:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	3301      	adds	r3, #1
 800b776:	613b      	str	r3, [r7, #16]
    idx++;
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	3301      	adds	r3, #1
 800b77c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	4413      	add	r3, r2
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
    idx++;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	3301      	adds	r3, #1
 800b78c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e7      	bne.n	800b766 <USBD_GetString+0x6a>
 800b796:	e000      	b.n	800b79a <USBD_GetString+0x9e>
    return;
 800b798:	bf00      	nop
  }
}
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7b0:	e005      	b.n	800b7be <USBD_GetLen+0x1e>
  {
    len++;
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1f5      	bne.n	800b7b2 <USBD_GetLen+0x12>
  }

  return len;
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 fd3d 	bl	800c27a <USBD_LL_Transmit>

  return USBD_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	2100      	movs	r1, #0
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 fd2c 	bl	800c27a <USBD_LL_Transmit>

  return USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2203      	movs	r2, #3
 800b83c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	2100      	movs	r1, #0
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f000 fd30 	bl	800c2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	2100      	movs	r1, #0
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 fd1f 	bl	800c2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2204      	movs	r2, #4
 800b894:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b898:	2300      	movs	r3, #0
 800b89a:	2200      	movs	r2, #0
 800b89c:	2100      	movs	r1, #0
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fceb 	bl	800c27a <USBD_LL_Transmit>

  return USBD_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2205      	movs	r2, #5
 800b8ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8be:	2300      	movs	r3, #0
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fcf9 	bl	800c2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4913      	ldr	r1, [pc, #76]	@ (800b928 <MX_USB_DEVICE_Init+0x54>)
 800b8dc:	4813      	ldr	r0, [pc, #76]	@ (800b92c <MX_USB_DEVICE_Init+0x58>)
 800b8de:	f7fe fccd 	bl	800a27c <USBD_Init>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b8e8:	f7f5 f8e0 	bl	8000aac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b8ec:	4910      	ldr	r1, [pc, #64]	@ (800b930 <MX_USB_DEVICE_Init+0x5c>)
 800b8ee:	480f      	ldr	r0, [pc, #60]	@ (800b92c <MX_USB_DEVICE_Init+0x58>)
 800b8f0:	f7fe fcf4 	bl	800a2dc <USBD_RegisterClass>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b8fa:	f7f5 f8d7 	bl	8000aac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b8fe:	490d      	ldr	r1, [pc, #52]	@ (800b934 <MX_USB_DEVICE_Init+0x60>)
 800b900:	480a      	ldr	r0, [pc, #40]	@ (800b92c <MX_USB_DEVICE_Init+0x58>)
 800b902:	f7fe fbeb 	bl	800a0dc <USBD_CDC_RegisterInterface>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b90c:	f7f5 f8ce 	bl	8000aac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b910:	4806      	ldr	r0, [pc, #24]	@ (800b92c <MX_USB_DEVICE_Init+0x58>)
 800b912:	f7fe fd19 	bl	800a348 <USBD_Start>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b91c:	f7f5 f8c6 	bl	8000aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800b920:	f7f7 fe52 	bl	80035c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b924:	bf00      	nop
 800b926:	bd80      	pop	{r7, pc}
 800b928:	240000b0 	.word	0x240000b0
 800b92c:	240003cc 	.word	0x240003cc
 800b930:	2400001c 	.word	0x2400001c
 800b934:	2400009c 	.word	0x2400009c

0800b938 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b93c:	2200      	movs	r2, #0
 800b93e:	4905      	ldr	r1, [pc, #20]	@ (800b954 <CDC_Init_FS+0x1c>)
 800b940:	4805      	ldr	r0, [pc, #20]	@ (800b958 <CDC_Init_FS+0x20>)
 800b942:	f7fe fbe5 	bl	800a110 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b946:	4905      	ldr	r1, [pc, #20]	@ (800b95c <CDC_Init_FS+0x24>)
 800b948:	4803      	ldr	r0, [pc, #12]	@ (800b958 <CDC_Init_FS+0x20>)
 800b94a:	f7fe fc03 	bl	800a154 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b94e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b950:	4618      	mov	r0, r3
 800b952:	bd80      	pop	{r7, pc}
 800b954:	24000ea8 	.word	0x24000ea8
 800b958:	240003cc 	.word	0x240003cc
 800b95c:	240006a8 	.word	0x240006a8

0800b960 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b960:	b480      	push	{r7}
 800b962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b964:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b966:	4618      	mov	r0, r3
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	6039      	str	r1, [r7, #0]
 800b97a:	71fb      	strb	r3, [r7, #7]
 800b97c:	4613      	mov	r3, r2
 800b97e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	2b23      	cmp	r3, #35	@ 0x23
 800b984:	d84a      	bhi.n	800ba1c <CDC_Control_FS+0xac>
 800b986:	a201      	add	r2, pc, #4	@ (adr r2, 800b98c <CDC_Control_FS+0x1c>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800ba1d 	.word	0x0800ba1d
 800b990:	0800ba1d 	.word	0x0800ba1d
 800b994:	0800ba1d 	.word	0x0800ba1d
 800b998:	0800ba1d 	.word	0x0800ba1d
 800b99c:	0800ba1d 	.word	0x0800ba1d
 800b9a0:	0800ba1d 	.word	0x0800ba1d
 800b9a4:	0800ba1d 	.word	0x0800ba1d
 800b9a8:	0800ba1d 	.word	0x0800ba1d
 800b9ac:	0800ba1d 	.word	0x0800ba1d
 800b9b0:	0800ba1d 	.word	0x0800ba1d
 800b9b4:	0800ba1d 	.word	0x0800ba1d
 800b9b8:	0800ba1d 	.word	0x0800ba1d
 800b9bc:	0800ba1d 	.word	0x0800ba1d
 800b9c0:	0800ba1d 	.word	0x0800ba1d
 800b9c4:	0800ba1d 	.word	0x0800ba1d
 800b9c8:	0800ba1d 	.word	0x0800ba1d
 800b9cc:	0800ba1d 	.word	0x0800ba1d
 800b9d0:	0800ba1d 	.word	0x0800ba1d
 800b9d4:	0800ba1d 	.word	0x0800ba1d
 800b9d8:	0800ba1d 	.word	0x0800ba1d
 800b9dc:	0800ba1d 	.word	0x0800ba1d
 800b9e0:	0800ba1d 	.word	0x0800ba1d
 800b9e4:	0800ba1d 	.word	0x0800ba1d
 800b9e8:	0800ba1d 	.word	0x0800ba1d
 800b9ec:	0800ba1d 	.word	0x0800ba1d
 800b9f0:	0800ba1d 	.word	0x0800ba1d
 800b9f4:	0800ba1d 	.word	0x0800ba1d
 800b9f8:	0800ba1d 	.word	0x0800ba1d
 800b9fc:	0800ba1d 	.word	0x0800ba1d
 800ba00:	0800ba1d 	.word	0x0800ba1d
 800ba04:	0800ba1d 	.word	0x0800ba1d
 800ba08:	0800ba1d 	.word	0x0800ba1d
 800ba0c:	0800ba1d 	.word	0x0800ba1d
 800ba10:	0800ba1d 	.word	0x0800ba1d
 800ba14:	0800ba1d 	.word	0x0800ba1d
 800ba18:	0800ba1d 	.word	0x0800ba1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba1c:	bf00      	nop
  }

  return (USBD_OK);
 800ba1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN 6 */

	  if((Buf[0]>>0)&1==1)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <CDC_Receive_FS+0x22>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 800ba42:	2201      	movs	r2, #1
 800ba44:	2101      	movs	r1, #1
 800ba46:	481c      	ldr	r0, [pc, #112]	@ (800bab8 <CDC_Receive_FS+0x8c>)
 800ba48:	f7f6 facc 	bl	8001fe4 <HAL_GPIO_WritePin>
 800ba4c:	e004      	b.n	800ba58 <CDC_Receive_FS+0x2c>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2101      	movs	r1, #1
 800ba52:	4819      	ldr	r0, [pc, #100]	@ (800bab8 <CDC_Receive_FS+0x8c>)
 800ba54:	f7f6 fac6 	bl	8001fe4 <HAL_GPIO_WritePin>
	  }
	  if((Buf[0]>>1)&1==1)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d006      	beq.n	800ba76 <CDC_Receive_FS+0x4a>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ba6e:	4812      	ldr	r0, [pc, #72]	@ (800bab8 <CDC_Receive_FS+0x8c>)
 800ba70:	f7f6 fab8 	bl	8001fe4 <HAL_GPIO_WritePin>
 800ba74:	e005      	b.n	800ba82 <CDC_Receive_FS+0x56>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800ba76:	2200      	movs	r2, #0
 800ba78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ba7c:	480e      	ldr	r0, [pc, #56]	@ (800bab8 <CDC_Receive_FS+0x8c>)
 800ba7e:	f7f6 fab1 	bl	8001fe4 <HAL_GPIO_WritePin>
	  }
	  if((Buf[0]>>2)&1==1)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	089b      	lsrs	r3, r3, #2
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d005      	beq.n	800ba9e <CDC_Receive_FS+0x72>
	  {
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
 800ba92:	2201      	movs	r2, #1
 800ba94:	2102      	movs	r1, #2
 800ba96:	4809      	ldr	r0, [pc, #36]	@ (800babc <CDC_Receive_FS+0x90>)
 800ba98:	f7f6 faa4 	bl	8001fe4 <HAL_GPIO_WritePin>
 800ba9c:	e004      	b.n	800baa8 <CDC_Receive_FS+0x7c>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET);
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2102      	movs	r1, #2
 800baa2:	4806      	ldr	r0, [pc, #24]	@ (800babc <CDC_Receive_FS+0x90>)
 800baa4:	f7f6 fa9e 	bl	8001fe4 <HAL_GPIO_WritePin>
	  }

  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800baa8:	4805      	ldr	r0, [pc, #20]	@ (800bac0 <CDC_Receive_FS+0x94>)
 800baaa:	f7fe fbb1 	bl	800a210 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800baae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	58020400 	.word	0x58020400
 800babc:	58021000 	.word	0x58021000
 800bac0:	240003cc 	.word	0x240003cc

0800bac4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  //USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  //if (hcdc->TxState != 0){
  // return USBD_BUSY;
  //}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bad4:	887b      	ldrh	r3, [r7, #2]
 800bad6:	461a      	mov	r2, r3
 800bad8:	6879      	ldr	r1, [r7, #4]
 800bada:	4806      	ldr	r0, [pc, #24]	@ (800baf4 <CDC_Transmit_FS+0x30>)
 800badc:	f7fe fb18 	bl	800a110 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bae0:	4804      	ldr	r0, [pc, #16]	@ (800baf4 <CDC_Transmit_FS+0x30>)
 800bae2:	f7fe fb55 	bl	800a190 <USBD_CDC_TransmitPacket>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800baea:	7bfb      	ldrb	r3, [r7, #15]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	240003cc 	.word	0x240003cc

0800baf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	4613      	mov	r3, r2
 800bb04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bb0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	371c      	adds	r7, #28
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
	...

0800bb1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	6039      	str	r1, [r7, #0]
 800bb26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2212      	movs	r2, #18
 800bb2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb2e:	4b03      	ldr	r3, [pc, #12]	@ (800bb3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	240000d0 	.word	0x240000d0

0800bb40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	6039      	str	r1, [r7, #0]
 800bb4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2204      	movs	r2, #4
 800bb50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb52:	4b03      	ldr	r3, [pc, #12]	@ (800bb60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	240000e4 	.word	0x240000e4

0800bb64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	6039      	str	r1, [r7, #0]
 800bb6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb70:	79fb      	ldrb	r3, [r7, #7]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d105      	bne.n	800bb82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb76:	683a      	ldr	r2, [r7, #0]
 800bb78:	4907      	ldr	r1, [pc, #28]	@ (800bb98 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb7a:	4808      	ldr	r0, [pc, #32]	@ (800bb9c <USBD_FS_ProductStrDescriptor+0x38>)
 800bb7c:	f7ff fdbe 	bl	800b6fc <USBD_GetString>
 800bb80:	e004      	b.n	800bb8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	4904      	ldr	r1, [pc, #16]	@ (800bb98 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb86:	4805      	ldr	r0, [pc, #20]	@ (800bb9c <USBD_FS_ProductStrDescriptor+0x38>)
 800bb88:	f7ff fdb8 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb8c:	4b02      	ldr	r3, [pc, #8]	@ (800bb98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	240016a8 	.word	0x240016a8
 800bb9c:	0800c41c 	.word	0x0800c41c

0800bba0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	6039      	str	r1, [r7, #0]
 800bbaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	4904      	ldr	r1, [pc, #16]	@ (800bbc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bbb0:	4804      	ldr	r0, [pc, #16]	@ (800bbc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bbb2:	f7ff fda3 	bl	800b6fc <USBD_GetString>
  return USBD_StrDesc;
 800bbb6:	4b02      	ldr	r3, [pc, #8]	@ (800bbc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	240016a8 	.word	0x240016a8
 800bbc4:	0800c434 	.word	0x0800c434

0800bbc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	6039      	str	r1, [r7, #0]
 800bbd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	221a      	movs	r2, #26
 800bbd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbda:	f000 f843 	bl	800bc64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bbde:	4b02      	ldr	r3, [pc, #8]	@ (800bbe8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	240000e8 	.word	0x240000e8

0800bbec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	6039      	str	r1, [r7, #0]
 800bbf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d105      	bne.n	800bc0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	4907      	ldr	r1, [pc, #28]	@ (800bc20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc02:	4808      	ldr	r0, [pc, #32]	@ (800bc24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc04:	f7ff fd7a 	bl	800b6fc <USBD_GetString>
 800bc08:	e004      	b.n	800bc14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	4904      	ldr	r1, [pc, #16]	@ (800bc20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc0e:	4805      	ldr	r0, [pc, #20]	@ (800bc24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc10:	f7ff fd74 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc14:	4b02      	ldr	r3, [pc, #8]	@ (800bc20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	240016a8 	.word	0x240016a8
 800bc24:	0800c448 	.word	0x0800c448

0800bc28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	6039      	str	r1, [r7, #0]
 800bc32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc34:	79fb      	ldrb	r3, [r7, #7]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d105      	bne.n	800bc46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	4907      	ldr	r1, [pc, #28]	@ (800bc5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc3e:	4808      	ldr	r0, [pc, #32]	@ (800bc60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc40:	f7ff fd5c 	bl	800b6fc <USBD_GetString>
 800bc44:	e004      	b.n	800bc50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	4904      	ldr	r1, [pc, #16]	@ (800bc5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc4a:	4805      	ldr	r0, [pc, #20]	@ (800bc60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc4c:	f7ff fd56 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc50:	4b02      	ldr	r3, [pc, #8]	@ (800bc5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	240016a8 	.word	0x240016a8
 800bc60:	0800c454 	.word	0x0800c454

0800bc64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc6a:	4b0f      	ldr	r3, [pc, #60]	@ (800bca8 <Get_SerialNum+0x44>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc70:	4b0e      	ldr	r3, [pc, #56]	@ (800bcac <Get_SerialNum+0x48>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc76:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb0 <Get_SerialNum+0x4c>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4413      	add	r3, r2
 800bc82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d009      	beq.n	800bc9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc8a:	2208      	movs	r2, #8
 800bc8c:	4909      	ldr	r1, [pc, #36]	@ (800bcb4 <Get_SerialNum+0x50>)
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f000 f814 	bl	800bcbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc94:	2204      	movs	r2, #4
 800bc96:	4908      	ldr	r1, [pc, #32]	@ (800bcb8 <Get_SerialNum+0x54>)
 800bc98:	68b8      	ldr	r0, [r7, #8]
 800bc9a:	f000 f80f 	bl	800bcbc <IntToUnicode>
  }
}
 800bc9e:	bf00      	nop
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	1ff1e800 	.word	0x1ff1e800
 800bcac:	1ff1e804 	.word	0x1ff1e804
 800bcb0:	1ff1e808 	.word	0x1ff1e808
 800bcb4:	240000ea 	.word	0x240000ea
 800bcb8:	240000fa 	.word	0x240000fa

0800bcbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcce:	2300      	movs	r3, #0
 800bcd0:	75fb      	strb	r3, [r7, #23]
 800bcd2:	e027      	b.n	800bd24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	0f1b      	lsrs	r3, r3, #28
 800bcd8:	2b09      	cmp	r3, #9
 800bcda:	d80b      	bhi.n	800bcf4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	0f1b      	lsrs	r3, r3, #28
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	4619      	mov	r1, r3
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	440b      	add	r3, r1
 800bcec:	3230      	adds	r2, #48	@ 0x30
 800bcee:	b2d2      	uxtb	r2, r2
 800bcf0:	701a      	strb	r2, [r3, #0]
 800bcf2:	e00a      	b.n	800bd0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	0f1b      	lsrs	r3, r3, #28
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	4619      	mov	r1, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	440b      	add	r3, r1
 800bd04:	3237      	adds	r2, #55	@ 0x37
 800bd06:	b2d2      	uxtb	r2, r2
 800bd08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	011b      	lsls	r3, r3, #4
 800bd0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	3301      	adds	r3, #1
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	4413      	add	r3, r2
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	3301      	adds	r3, #1
 800bd22:	75fb      	strb	r3, [r7, #23]
 800bd24:	7dfa      	ldrb	r2, [r7, #23]
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d3d3      	bcc.n	800bcd4 <IntToUnicode+0x18>
  }
}
 800bd2c:	bf00      	nop
 800bd2e:	bf00      	nop
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
	...

0800bd3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b0ba      	sub	sp, #232	@ 0xe8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800bd48:	2200      	movs	r2, #0
 800bd4a:	601a      	str	r2, [r3, #0]
 800bd4c:	605a      	str	r2, [r3, #4]
 800bd4e:	609a      	str	r2, [r3, #8]
 800bd50:	60da      	str	r2, [r3, #12]
 800bd52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bd54:	f107 0310 	add.w	r3, r7, #16
 800bd58:	22c0      	movs	r2, #192	@ 0xc0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 fb25 	bl	800c3ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a2c      	ldr	r2, [pc, #176]	@ (800be18 <HAL_PCD_MspInit+0xdc>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d151      	bne.n	800be10 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bd6c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bd70:	f04f 0300 	mov.w	r3, #0
 800bd74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bd78:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800bd7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bd80:	f107 0310 	add.w	r3, r7, #16
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7f8 fc15 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d001      	beq.n	800bd94 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800bd90:	f7f4 fe8c 	bl	8000aac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bd94:	f7f7 fc18 	bl	80035c8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd98:	4b20      	ldr	r3, [pc, #128]	@ (800be1c <HAL_PCD_MspInit+0xe0>)
 800bd9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd9e:	4a1f      	ldr	r2, [pc, #124]	@ (800be1c <HAL_PCD_MspInit+0xe0>)
 800bda0:	f043 0301 	orr.w	r3, r3, #1
 800bda4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bda8:	4b1c      	ldr	r3, [pc, #112]	@ (800be1c <HAL_PCD_MspInit+0xe0>)
 800bdaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	60fb      	str	r3, [r7, #12]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800bdb6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800bdba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bdd0:	230a      	movs	r3, #10
 800bdd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdd6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800bdda:	4619      	mov	r1, r3
 800bddc:	4810      	ldr	r0, [pc, #64]	@ (800be20 <HAL_PCD_MspInit+0xe4>)
 800bdde:	f7f5 ff51 	bl	8001c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bde2:	4b0e      	ldr	r3, [pc, #56]	@ (800be1c <HAL_PCD_MspInit+0xe0>)
 800bde4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bde8:	4a0c      	ldr	r2, [pc, #48]	@ (800be1c <HAL_PCD_MspInit+0xe0>)
 800bdea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bdee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bdf2:	4b0a      	ldr	r3, [pc, #40]	@ (800be1c <HAL_PCD_MspInit+0xe0>)
 800bdf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bdf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdfc:	60bb      	str	r3, [r7, #8]
 800bdfe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be00:	2200      	movs	r2, #0
 800be02:	2100      	movs	r1, #0
 800be04:	2065      	movs	r0, #101	@ 0x65
 800be06:	f7f5 fad4 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be0a:	2065      	movs	r0, #101	@ 0x65
 800be0c:	f7f5 faeb 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800be10:	bf00      	nop
 800be12:	37e8      	adds	r7, #232	@ 0xe8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	40080000 	.word	0x40080000
 800be1c:	58024400 	.word	0x58024400
 800be20:	58020000 	.word	0x58020000

0800be24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be38:	4619      	mov	r1, r3
 800be3a:	4610      	mov	r0, r2
 800be3c:	f7fe fad1 	bl	800a3e2 <USBD_LL_SetupStage>
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800be5a:	78fa      	ldrb	r2, [r7, #3]
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	4613      	mov	r3, r2
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	440b      	add	r3, r1
 800be68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	78fb      	ldrb	r3, [r7, #3]
 800be70:	4619      	mov	r1, r3
 800be72:	f7fe fb0b 	bl	800a48c <USBD_LL_DataOutStage>
}
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b082      	sub	sp, #8
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	460b      	mov	r3, r1
 800be88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800be90:	78fa      	ldrb	r2, [r7, #3]
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	4613      	mov	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	440b      	add	r3, r1
 800be9e:	3320      	adds	r3, #32
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	78fb      	ldrb	r3, [r7, #3]
 800bea4:	4619      	mov	r1, r3
 800bea6:	f7fe fba4 	bl	800a5f2 <USBD_LL_DataInStage>
}
 800beaa:	bf00      	nop
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fe fcde 	bl	800a882 <USBD_LL_SOF>
}
 800bec6:	bf00      	nop
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b084      	sub	sp, #16
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bed6:	2301      	movs	r3, #1
 800bed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	79db      	ldrb	r3, [r3, #7]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d102      	bne.n	800bee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bee2:	2300      	movs	r3, #0
 800bee4:	73fb      	strb	r3, [r7, #15]
 800bee6:	e008      	b.n	800befa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	79db      	ldrb	r3, [r3, #7]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d102      	bne.n	800bef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bef0:	2301      	movs	r3, #1
 800bef2:	73fb      	strb	r3, [r7, #15]
 800bef4:	e001      	b.n	800befa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bef6:	f7f4 fdd9 	bl	8000aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf00:	7bfa      	ldrb	r2, [r7, #15]
 800bf02:	4611      	mov	r1, r2
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fe fc78 	bl	800a7fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fe fc20 	bl	800a756 <USBD_LL_Reset>
}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe fc73 	bl	800a81a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	6812      	ldr	r2, [r2, #0]
 800bf42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	7adb      	ldrb	r3, [r3, #11]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d005      	beq.n	800bf60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf54:	4b04      	ldr	r3, [pc, #16]	@ (800bf68 <HAL_PCD_SuspendCallback+0x48>)
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	4a03      	ldr	r2, [pc, #12]	@ (800bf68 <HAL_PCD_SuspendCallback+0x48>)
 800bf5a:	f043 0306 	orr.w	r3, r3, #6
 800bf5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	e000ed00 	.word	0xe000ed00

0800bf6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fc69 	bl	800a852 <USBD_LL_Resume>
}
 800bf80:	bf00      	nop
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf9a:	78fa      	ldrb	r2, [r7, #3]
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe fcc1 	bl	800a926 <USBD_LL_IsoOUTIncomplete>
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfbe:	78fa      	ldrb	r2, [r7, #3]
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe fc7d 	bl	800a8c2 <USBD_LL_IsoINIncomplete>
}
 800bfc8:	bf00      	nop
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fcd3 	bl	800a98a <USBD_LL_DevConnected>
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fe fcd0 	bl	800a9a0 <USBD_LL_DevDisconnected>
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d13e      	bne.n	800c096 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c018:	4a21      	ldr	r2, [pc, #132]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a1f      	ldr	r2, [pc, #124]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c024:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c028:	4b1d      	ldr	r3, [pc, #116]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c02a:	4a1e      	ldr	r2, [pc, #120]	@ (800c0a4 <USBD_LL_Init+0x9c>)
 800c02c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c02e:	4b1c      	ldr	r3, [pc, #112]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c030:	2209      	movs	r2, #9
 800c032:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c034:	4b1a      	ldr	r3, [pc, #104]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c036:	2202      	movs	r2, #2
 800c038:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c03a:	4b19      	ldr	r3, [pc, #100]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c040:	4b17      	ldr	r3, [pc, #92]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c042:	2202      	movs	r2, #2
 800c044:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c046:	4b16      	ldr	r3, [pc, #88]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c048:	2200      	movs	r2, #0
 800c04a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c04c:	4b14      	ldr	r3, [pc, #80]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c04e:	2200      	movs	r2, #0
 800c050:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c052:	4b13      	ldr	r3, [pc, #76]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c054:	2200      	movs	r2, #0
 800c056:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c058:	4b11      	ldr	r3, [pc, #68]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c05e:	4b10      	ldr	r3, [pc, #64]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c060:	2200      	movs	r2, #0
 800c062:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c064:	4b0e      	ldr	r3, [pc, #56]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c066:	2200      	movs	r2, #0
 800c068:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c06a:	480d      	ldr	r0, [pc, #52]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c06c:	f7f5 ffd3 	bl	8002016 <HAL_PCD_Init>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c076:	f7f4 fd19 	bl	8000aac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c07a:	2180      	movs	r1, #128	@ 0x80
 800c07c:	4808      	ldr	r0, [pc, #32]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c07e:	f7f7 fa28 	bl	80034d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c082:	2240      	movs	r2, #64	@ 0x40
 800c084:	2100      	movs	r1, #0
 800c086:	4806      	ldr	r0, [pc, #24]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c088:	f7f7 f9dc 	bl	8003444 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c08c:	2280      	movs	r2, #128	@ 0x80
 800c08e:	2101      	movs	r1, #1
 800c090:	4803      	ldr	r0, [pc, #12]	@ (800c0a0 <USBD_LL_Init+0x98>)
 800c092:	f7f7 f9d7 	bl	8003444 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	240018a8 	.word	0x240018a8
 800c0a4:	40080000 	.word	0x40080000

0800c0a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7f6 f8b5 	bl	800222e <HAL_PCD_Start>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 f942 	bl	800c354 <USBD_Get_USB_Status>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	70fb      	strb	r3, [r7, #3]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70bb      	strb	r3, [r7, #2]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c106:	78bb      	ldrb	r3, [r7, #2]
 800c108:	883a      	ldrh	r2, [r7, #0]
 800c10a:	78f9      	ldrb	r1, [r7, #3]
 800c10c:	f7f6 fdb6 	bl	8002c7c <HAL_PCD_EP_Open>
 800c110:	4603      	mov	r3, r0
 800c112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c114:	7bfb      	ldrb	r3, [r7, #15]
 800c116:	4618      	mov	r0, r3
 800c118:	f000 f91c 	bl	800c354 <USBD_Get_USB_Status>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c120:	7bbb      	ldrb	r3, [r7, #14]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c144:	78fa      	ldrb	r2, [r7, #3]
 800c146:	4611      	mov	r1, r2
 800c148:	4618      	mov	r0, r3
 800c14a:	f7f6 fdff 	bl	8002d4c <HAL_PCD_EP_Close>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	4618      	mov	r0, r3
 800c156:	f000 f8fd 	bl	800c354 <USBD_Get_USB_Status>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c182:	78fa      	ldrb	r2, [r7, #3]
 800c184:	4611      	mov	r1, r2
 800c186:	4618      	mov	r0, r3
 800c188:	f7f6 feb7 	bl	8002efa <HAL_PCD_EP_SetStall>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	4618      	mov	r0, r3
 800c194:	f000 f8de 	bl	800c354 <USBD_Get_USB_Status>
 800c198:	4603      	mov	r3, r0
 800c19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1c0:	78fa      	ldrb	r2, [r7, #3]
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7f6 fefb 	bl	8002fc0 <HAL_PCD_EP_ClrStall>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 f8bf 	bl	800c354 <USBD_Get_USB_Status>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c1f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	da0b      	bge.n	800c218 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c206:	68f9      	ldr	r1, [r7, #12]
 800c208:	4613      	mov	r3, r2
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	440b      	add	r3, r1
 800c212:	3316      	adds	r3, #22
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	e00b      	b.n	800c230 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c218:	78fb      	ldrb	r3, [r7, #3]
 800c21a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c21e:	68f9      	ldr	r1, [r7, #12]
 800c220:	4613      	mov	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	440b      	add	r3, r1
 800c22a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c22e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c230:	4618      	mov	r0, r3
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	460b      	mov	r3, r1
 800c246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c256:	78fa      	ldrb	r2, [r7, #3]
 800c258:	4611      	mov	r1, r2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f6 fcea 	bl	8002c34 <HAL_PCD_SetAddress>
 800c260:	4603      	mov	r3, r0
 800c262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 f874 	bl	800c354 <USBD_Get_USB_Status>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c270:	7bbb      	ldrb	r3, [r7, #14]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	603b      	str	r3, [r7, #0]
 800c286:	460b      	mov	r3, r1
 800c288:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c298:	7af9      	ldrb	r1, [r7, #11]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	f7f6 fdf2 	bl	8002e86 <HAL_PCD_EP_Transmit>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 f853 	bl	800c354 <USBD_Get_USB_Status>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	607a      	str	r2, [r7, #4]
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c2da:	7af9      	ldrb	r1, [r7, #11]
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	f7f6 fd7e 	bl	8002de0 <HAL_PCD_EP_Receive>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 f832 	bl	800c354 <USBD_Get_USB_Status>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	460b      	mov	r3, r1
 800c308:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c310:	78fa      	ldrb	r2, [r7, #3]
 800c312:	4611      	mov	r1, r2
 800c314:	4618      	mov	r0, r3
 800c316:	f7f6 fd9e 	bl	8002e56 <HAL_PCD_EP_GetRxCount>
 800c31a:	4603      	mov	r3, r0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c32c:	4b03      	ldr	r3, [pc, #12]	@ (800c33c <USBD_static_malloc+0x18>)
}
 800c32e:	4618      	mov	r0, r3
 800c330:	370c      	adds	r7, #12
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	24001d8c 	.word	0x24001d8c

0800c340 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	2b03      	cmp	r3, #3
 800c366:	d817      	bhi.n	800c398 <USBD_Get_USB_Status+0x44>
 800c368:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <USBD_Get_USB_Status+0x1c>)
 800c36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36e:	bf00      	nop
 800c370:	0800c381 	.word	0x0800c381
 800c374:	0800c387 	.word	0x0800c387
 800c378:	0800c38d 	.word	0x0800c38d
 800c37c:	0800c393 	.word	0x0800c393
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]
    break;
 800c384:	e00b      	b.n	800c39e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c386:	2303      	movs	r3, #3
 800c388:	73fb      	strb	r3, [r7, #15]
    break;
 800c38a:	e008      	b.n	800c39e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c38c:	2301      	movs	r3, #1
 800c38e:	73fb      	strb	r3, [r7, #15]
    break;
 800c390:	e005      	b.n	800c39e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c392:	2303      	movs	r3, #3
 800c394:	73fb      	strb	r3, [r7, #15]
    break;
 800c396:	e002      	b.n	800c39e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c398:	2303      	movs	r3, #3
 800c39a:	73fb      	strb	r3, [r7, #15]
    break;
 800c39c:	bf00      	nop
  }
  return usb_status;
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3714      	adds	r7, #20
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <memset>:
 800c3ac:	4402      	add	r2, r0
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d100      	bne.n	800c3b6 <memset+0xa>
 800c3b4:	4770      	bx	lr
 800c3b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ba:	e7f9      	b.n	800c3b0 <memset+0x4>

0800c3bc <__libc_init_array>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	4d0d      	ldr	r5, [pc, #52]	@ (800c3f4 <__libc_init_array+0x38>)
 800c3c0:	4c0d      	ldr	r4, [pc, #52]	@ (800c3f8 <__libc_init_array+0x3c>)
 800c3c2:	1b64      	subs	r4, r4, r5
 800c3c4:	10a4      	asrs	r4, r4, #2
 800c3c6:	2600      	movs	r6, #0
 800c3c8:	42a6      	cmp	r6, r4
 800c3ca:	d109      	bne.n	800c3e0 <__libc_init_array+0x24>
 800c3cc:	4d0b      	ldr	r5, [pc, #44]	@ (800c3fc <__libc_init_array+0x40>)
 800c3ce:	4c0c      	ldr	r4, [pc, #48]	@ (800c400 <__libc_init_array+0x44>)
 800c3d0:	f000 f818 	bl	800c404 <_init>
 800c3d4:	1b64      	subs	r4, r4, r5
 800c3d6:	10a4      	asrs	r4, r4, #2
 800c3d8:	2600      	movs	r6, #0
 800c3da:	42a6      	cmp	r6, r4
 800c3dc:	d105      	bne.n	800c3ea <__libc_init_array+0x2e>
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3e4:	4798      	blx	r3
 800c3e6:	3601      	adds	r6, #1
 800c3e8:	e7ee      	b.n	800c3c8 <__libc_init_array+0xc>
 800c3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ee:	4798      	blx	r3
 800c3f0:	3601      	adds	r6, #1
 800c3f2:	e7f2      	b.n	800c3da <__libc_init_array+0x1e>
 800c3f4:	0800c4b4 	.word	0x0800c4b4
 800c3f8:	0800c4b4 	.word	0x0800c4b4
 800c3fc:	0800c4b4 	.word	0x0800c4b4
 800c400:	0800c4b8 	.word	0x0800c4b8

0800c404 <_init>:
 800c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c406:	bf00      	nop
 800c408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c40a:	bc08      	pop	{r3}
 800c40c:	469e      	mov	lr, r3
 800c40e:	4770      	bx	lr

0800c410 <_fini>:
 800c410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c412:	bf00      	nop
 800c414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c416:	bc08      	pop	{r3}
 800c418:	469e      	mov	lr, r3
 800c41a:	4770      	bx	lr
