
USARTtxDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009078  08009078  00019078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08009088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000010  08009098  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000070  080090f8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200000d0  08009158  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08009158  000202e8  2**0
                  ALLOC
 11 .buffers      0000001c  38000000  38000000  00030000  2**2
                  ALLOC
 12 .ram_d1       00000000  24000000  24000000  000200d0  2**0
                  CONTENTS
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d9f1  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000026b2  00000000  00000000  0003daef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000ca0  00000000  00000000  000401a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000be8  00000000  00000000  00040e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008fe9  00000000  00000000  00041a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00005f20  00000000  00000000  0004aa19  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007c  00000000  00000000  00050939  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000348c  00000000  00000000  000509b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000d0 	.word	0x200000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009020 	.word	0x08009020

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000d4 	.word	0x200000d4
 80002d4:	08009020 	.word	0x08009020

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005ec:	f000 fa2a 	bl	8000a44 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fca8 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f816 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f936 	bl	8000868 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f914 	bl	8000828 <MX_DMA_Init>
  MX_ETH_Init();
 8000600:	f000 f87a 	bl	80006f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f8c4 	bl	8000790 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit_DMA(&huart3, str, sizeof(str)-1);
 8000608:	2219      	movs	r2, #25
 800060a:	4904      	ldr	r1, [pc, #16]	; (800061c <main+0x34>)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <main+0x38>)
 800060e:	f006 fe5f 	bl	80072d0 <HAL_UART_Transmit_DMA>
	  HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fd28 	bl	8001068 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart3, str, sizeof(str)-1);
 8000618:	e7f6      	b.n	8000608 <main+0x20>
 800061a:	bf00      	nop
 800061c:	38000000 	.word	0x38000000
 8000620:	200000f4 	.word	0x200000f4

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	; 0x70
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	224c      	movs	r2, #76	; 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f008 fcec 	bl	8009010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f008 fce6 	bl	8009010 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000644:	2002      	movs	r0, #2
 8000646:	f004 faf9 	bl	8004c3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4a28      	ldr	r2, [pc, #160]	; (80006f0 <SystemClock_Config+0xcc>)
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xcc>)
 8000652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000654:	f023 0301 	bic.w	r3, r3, #1
 8000658:	62d3      	str	r3, [r2, #44]	; 0x2c
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xcc>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <SystemClock_Config+0xd0>)
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <SystemClock_Config+0xd0>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <SystemClock_Config+0xd0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000680:	bf00      	nop
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <SystemClock_Config+0xd0>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000694:	2301      	movs	r3, #1
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2340      	movs	r3, #64	; 0x40
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 fb03 	bl	8004cb0 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006b0:	f000 f9f5 	bl	8000a9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	233f      	movs	r3, #63	; 0x3f
 80006b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2101      	movs	r1, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 ff15 	bl	8005508 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e4:	f000 f9db 	bl	8000a9e <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3770      	adds	r7, #112	; 0x70
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	58000400 	.word	0x58000400
 80006f4:	58024800 	.word	0x58024800

080006f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_ETH_Init+0x80>)
 80006fe:	4a1f      	ldr	r2, [pc, #124]	; (800077c <MX_ETH_Init+0x84>)
 8000700:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ETH_Init+0x88>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ETH_Init+0x88>)
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ETH_Init+0x88>)
 8000710:	22e1      	movs	r2, #225	; 0xe1
 8000712:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_ETH_Init+0x88>)
 8000716:	2200      	movs	r2, #0
 8000718:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ETH_Init+0x88>)
 800071c:	2200      	movs	r2, #0
 800071e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_ETH_Init+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_ETH_Init+0x80>)
 8000728:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_ETH_Init+0x88>)
 800072a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_ETH_Init+0x80>)
 800072e:	2201      	movs	r2, #1
 8000730:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_ETH_Init+0x80>)
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <MX_ETH_Init+0x8c>)
 8000736:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ETH_Init+0x80>)
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <MX_ETH_Init+0x90>)
 800073c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_ETH_Init+0x80>)
 8000740:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000744:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_ETH_Init+0x80>)
 8000748:	f003 fc90 	bl	800406c <HAL_ETH_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000752:	f000 f9a4 	bl	8000a9e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000756:	2238      	movs	r2, #56	; 0x38
 8000758:	2100      	movs	r1, #0
 800075a:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_ETH_Init+0x94>)
 800075c:	f008 fc58 	bl	8009010 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_ETH_Init+0x94>)
 8000762:	2221      	movs	r2, #33	; 0x21
 8000764:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_ETH_Init+0x94>)
 8000768:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800076c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_ETH_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200001fc 	.word	0x200001fc
 800077c:	40028000 	.word	0x40028000
 8000780:	200000ec 	.word	0x200000ec
 8000784:	20000070 	.word	0x20000070
 8000788:	20000010 	.word	0x20000010
 800078c:	200002ac 	.word	0x200002ac

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_USART3_UART_Init+0x90>)
 8000796:	4a23      	ldr	r2, [pc, #140]	; (8000824 <MX_USART3_UART_Init+0x94>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_USART3_UART_Init+0x90>)
 800079c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d8:	4811      	ldr	r0, [pc, #68]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007da:	f006 fd29 	bl	8007230 <HAL_UART_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 f95b 	bl	8000a9e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007ec:	f008 faf7 	bl	8008dde <HAL_UARTEx_SetTxFifoThreshold>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007f6:	f000 f952 	bl	8000a9e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <MX_USART3_UART_Init+0x90>)
 80007fe:	f008 fb2c 	bl	8008e5a <HAL_UARTEx_SetRxFifoThreshold>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000808:	f000 f949 	bl	8000a9e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_USART3_UART_Init+0x90>)
 800080e:	f008 faad 	bl	8008d6c <HAL_UARTEx_DisableFifoMode>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000818:	f000 f941 	bl	8000a9e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000f4 	.word	0x200000f4
 8000824:	40004800 	.word	0x40004800

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <MX_DMA_Init+0x3c>)
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_DMA_Init+0x3c>)
 8000832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_DMA_Init+0x3c>)
 8000840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	200f      	movs	r0, #15
 8000852:	f000 fd24 	bl	800129e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000856:	200f      	movs	r0, #15
 8000858:	f000 fd3b 	bl	80012d2 <HAL_NVIC_EnableIRQ>

}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	58024400 	.word	0x58024400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4a6a      	ldr	r2, [pc, #424]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000880:	4b69      	ldr	r3, [pc, #420]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088e:	4b66      	ldr	r3, [pc, #408]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089c:	4a62      	ldr	r2, [pc, #392]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 800089e:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b5e      	ldr	r3, [pc, #376]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4a5b      	ldr	r2, [pc, #364]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008bc:	4b5a      	ldr	r3, [pc, #360]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d8:	4a53      	ldr	r2, [pc, #332]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008da:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e8:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	4a4c      	ldr	r2, [pc, #304]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008f8:	4b4b      	ldr	r3, [pc, #300]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b48      	ldr	r3, [pc, #288]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000914:	4a44      	ldr	r2, [pc, #272]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000916:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000924:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000932:	4a3d      	ldr	r2, [pc, #244]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000934:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000942:	4b39      	ldr	r3, [pc, #228]	; (8000a28 <MX_GPIO_Init+0x1c0>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f244 0101 	movw	r1, #16385	; 0x4001
 8000956:	4835      	ldr	r0, [pc, #212]	; (8000a2c <MX_GPIO_Init+0x1c4>)
 8000958:	f004 f956 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	4833      	ldr	r0, [pc, #204]	; (8000a30 <MX_GPIO_Init+0x1c8>)
 8000964:	f004 f950 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	4831      	ldr	r0, [pc, #196]	; (8000a34 <MX_GPIO_Init+0x1cc>)
 800096e:	f004 f94b 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	482c      	ldr	r0, [pc, #176]	; (8000a38 <MX_GPIO_Init+0x1d0>)
 8000988:	f003 ff8e 	bl	80048a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800098c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4821      	ldr	r0, [pc, #132]	; (8000a2c <MX_GPIO_Init+0x1c4>)
 80009a6:	f003 ff7f 	bl	80048a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	481b      	ldr	r0, [pc, #108]	; (8000a30 <MX_GPIO_Init+0x1c8>)
 80009c4:	f003 ff70 	bl	80048a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4817      	ldr	r0, [pc, #92]	; (8000a3c <MX_GPIO_Init+0x1d4>)
 80009de:	f003 ff63 	bl	80048a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009e2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009f4:	230a      	movs	r3, #10
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4810      	ldr	r0, [pc, #64]	; (8000a40 <MX_GPIO_Init+0x1d8>)
 8000a00:	f003 ff52 	bl	80048a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_GPIO_Init+0x1cc>)
 8000a1c:	f003 ff44 	bl	80048a8 <HAL_GPIO_Init>

}
 8000a20:	bf00      	nop
 8000a22:	3730      	adds	r7, #48	; 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	58020400 	.word	0x58020400
 8000a30:	58020c00 	.word	0x58020c00
 8000a34:	58021000 	.word	0x58021000
 8000a38:	58020800 	.word	0x58020800
 8000a3c:	58021800 	.word	0x58021800
 8000a40:	58020000 	.word	0x58020000

08000a44 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a56:	f000 fc57 	bl	8001308 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000a62:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000a66:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000a68:	230f      	movs	r3, #15
 8000a6a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a6c:	2387      	movs	r3, #135	; 0x87
 8000a6e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a74:	2300      	movs	r3, #0
 8000a76:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fc70 	bl	8001370 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a90:	2004      	movs	r0, #4
 8000a92:	f000 fc4f 	bl	8001334 <HAL_MPU_Enable>

}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x6>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	58024400 	.word	0x58024400

08000adc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	; 0x38
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a59      	ldr	r2, [pc, #356]	; (8000c60 <HAL_ETH_MspInit+0x184>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	f040 80ab 	bne.w	8000c56 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b00:	4a58      	ldr	r2, [pc, #352]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b02:	4b58      	ldr	r3, [pc, #352]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b10:	4b54      	ldr	r3, [pc, #336]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b1e:	4a51      	ldr	r2, [pc, #324]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b20:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b2e:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b38:	61fb      	str	r3, [r7, #28]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b3c:	4a49      	ldr	r2, [pc, #292]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b4c:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b5c:	4b41      	ldr	r3, [pc, #260]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4a3a      	ldr	r2, [pc, #232]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b88:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4a33      	ldr	r2, [pc, #204]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba6:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	4a2b      	ldr	r2, [pc, #172]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bd2:	2332      	movs	r3, #50	; 0x32
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be2:	230b      	movs	r3, #11
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	481e      	ldr	r0, [pc, #120]	; (8000c68 <HAL_ETH_MspInit+0x18c>)
 8000bee:	f003 fe5b 	bl	80048a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bf2:	2386      	movs	r3, #134	; 0x86
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <HAL_ETH_MspInit+0x190>)
 8000c0e:	f003 fe4b 	bl	80048a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <HAL_ETH_MspInit+0x194>)
 8000c30:	f003 fe3a 	bl	80048a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c46:	230b      	movs	r3, #11
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <HAL_ETH_MspInit+0x198>)
 8000c52:	f003 fe29 	bl	80048a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	; 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40028000 	.word	0x40028000
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	58020000 	.word	0x58020000
 8000c70:	58020400 	.word	0x58020400
 8000c74:	58021800 	.word	0x58021800

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0b8      	sub	sp, #224	; 0xe0
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	22bc      	movs	r2, #188	; 0xbc
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f008 f9b9 	bl	8009010 <memset>
  if(huart->Instance==USART3)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_UART_MspInit+0x12c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d178      	bne.n	8000d9a <HAL_UART_MspInit+0x122>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 ffaa 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cc2:	f7ff feec 	bl	8000a9e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc6:	4a38      	ldr	r2, [pc, #224]	; (8000da8 <HAL_UART_MspInit+0x130>)
 8000cc8:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <HAL_UART_MspInit+0x130>)
 8000cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cd6:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <HAL_UART_MspInit+0x130>)
 8000cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce4:	4a30      	ldr	r2, [pc, #192]	; (8000da8 <HAL_UART_MspInit+0x130>)
 8000ce6:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <HAL_UART_MspInit+0x130>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_UART_MspInit+0x130>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d26:	4619      	mov	r1, r3
 8000d28:	4820      	ldr	r0, [pc, #128]	; (8000dac <HAL_UART_MspInit+0x134>)
 8000d2a:	f003 fdbd 	bl	80048a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d30:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <HAL_UART_MspInit+0x13c>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d36:	222e      	movs	r2, #46	; 0x2e
 8000d38:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d3c:	2240      	movs	r2, #64	; 0x40
 8000d3e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d66:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000d6e:	4810      	ldr	r0, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d70:	f000 fb42 	bl	80013f8 <HAL_DMA_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8000d7a:	f7ff fe90 	bl	8000a9e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d82:	679a      	str	r2, [r3, #120]	; 0x78
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2027      	movs	r0, #39	; 0x27
 8000d90:	f000 fa85 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d94:	2027      	movs	r0, #39	; 0x27
 8000d96:	f000 fa9c 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	37e0      	adds	r7, #224	; 0xe0
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004800 	.word	0x40004800
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58020c00 	.word	0x58020c00
 8000db0:	20000184 	.word	0x20000184
 8000db4:	40020070 	.word	0x40020070

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 f910 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <DMA1_Stream4_IRQHandler+0x10>)
 8000e12:	f001 fe19 	bl	8002a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000184 	.word	0x20000184

08000e20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <USART3_IRQHandler+0x10>)
 8000e26:	f006 fae5 	bl	80073f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000f4 	.word	0x200000f4

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e38:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <SystemInit+0xe4>)
 8000e3a:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <SystemInit+0xe4>)
 8000e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e48:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <SystemInit+0xe8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 030f 	and.w	r3, r3, #15
 8000e50:	2b06      	cmp	r3, #6
 8000e52:	d807      	bhi.n	8000e64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e54:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <SystemInit+0xe8>)
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <SystemInit+0xe8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 030f 	bic.w	r3, r3, #15
 8000e5e:	f043 0307 	orr.w	r3, r3, #7
 8000e62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e64:	4a2e      	ldr	r2, [pc, #184]	; (8000f20 <SystemInit+0xec>)
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <SystemInit+0xec>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <SystemInit+0xec>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e76:	492a      	ldr	r1, [pc, #168]	; (8000f20 <SystemInit+0xec>)
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <SystemInit+0xec>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <SystemInit+0xf0>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <SystemInit+0xe8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	2b07      	cmp	r3, #7
 8000e8c:	d907      	bls.n	8000e9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <SystemInit+0xe8>)
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <SystemInit+0xe8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f023 030f 	bic.w	r3, r3, #15
 8000e98:	f043 0307 	orr.w	r3, r3, #7
 8000e9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <SystemInit+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <SystemInit+0xec>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <SystemInit+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <SystemInit+0xec>)
 8000eb2:	4a1d      	ldr	r2, [pc, #116]	; (8000f28 <SystemInit+0xf4>)
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <SystemInit+0xec>)
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <SystemInit+0xf8>)
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <SystemInit+0xec>)
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <SystemInit+0xfc>)
 8000ec0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <SystemInit+0xec>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <SystemInit+0xec>)
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <SystemInit+0xfc>)
 8000ecc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <SystemInit+0xec>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <SystemInit+0xec>)
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <SystemInit+0xfc>)
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <SystemInit+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <SystemInit+0xec>)
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <SystemInit+0xec>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <SystemInit+0xec>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <SystemInit+0x100>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <SystemInit+0x104>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000efe:	d202      	bcs.n	8000f06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <SystemInit+0x108>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <SystemInit+0x10c>)
 8000f08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00
 8000f1c:	52002000 	.word	0x52002000
 8000f20:	58024400 	.word	0x58024400
 8000f24:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f28:	02020200 	.word	0x02020200
 8000f2c:	01ff0000 	.word	0x01ff0000
 8000f30:	01010280 	.word	0x01010280
 8000f34:	5c001000 	.word	0x5c001000
 8000f38:	ffff0000 	.word	0xffff0000
 8000f3c:	51008108 	.word	0x51008108
 8000f40:	52004000 	.word	0x52004000

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f000 f99c 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f50:	f004 fc90 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 8000f54:	4601      	mov	r1, r0
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_Init+0x68>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	f003 030f 	and.w	r3, r3, #15
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <HAL_Init+0x6c>)
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_Init+0x68>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_Init+0x6c>)
 8000f78:	5cd3      	ldrb	r3, [r2, r3]
 8000f7a:	f003 031f 	and.w	r3, r3, #31
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	fa22 f303 	lsr.w	r3, r2, r3
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_Init+0x70>)
 8000f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <HAL_Init+0x74>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f814 	bl	8000fbc <HAL_InitTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e002      	b.n	8000fa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9e:	f7ff fd83 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	08009038 	.word	0x08009038
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	20000000 	.word	0x20000000

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_InitTick+0x60>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e021      	b.n	8001014 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_InitTick+0x64>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_InitTick+0x60>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f981 	bl	80012ee <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f94b 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_InitTick+0x68>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000000c 	.word	0x2000000c
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000000c 	.word	0x2000000c
 800104c:	200002e4 	.word	0x200002e4

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200002e4 	.word	0x200002e4

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_Delay+0x40>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad2      	subs	r2, r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3f7      	bcc.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000000c 	.word	0x2000000c

080010ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetREVID+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0c1b      	lsrs	r3, r3, #16
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	5c001000 	.word	0x5c001000

080010c4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80010cc:	4906      	ldr	r1, [pc, #24]	; (80010e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	58000400 	.word	0x58000400

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <__NVIC_SetPriorityGrouping+0x40>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	4313      	orrs	r3, r2
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x40>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	05fa0000 	.word	0x05fa0000

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	4909      	ldr	r1, [pc, #36]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 8001164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001168:	095b      	lsrs	r3, r3, #5
 800116a:	88fa      	ldrh	r2, [r7, #6]
 800116c:	f002 021f 	and.w	r2, r2, #31
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	490d      	ldr	r1, [pc, #52]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	4909      	ldr	r1, [pc, #36]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	2201      	movs	r2, #1
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	401a      	ands	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001226:	2101      	movs	r1, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	1e59      	subs	r1, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff90 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff2b 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff42 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff92 	bl	80011e0 <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff61 	bl	800118c <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa4 	bl	8001244 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800130c:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_MPU_Disable+0x24>)
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MPU_Disable+0x24>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_MPU_Disable+0x28>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	e000ed90 	.word	0xe000ed90

08001334 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_MPU_Enable+0x34>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_MPU_Enable+0x38>)
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_MPU_Enable+0x38>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001352:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001356:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed90 	.word	0xe000ed90
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_MPU_ConfigRegion+0x84>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d028      	beq.n	80013da <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001388:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <HAL_MPU_ConfigRegion+0x84>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001390:	4918      	ldr	r1, [pc, #96]	; (80013f4 <HAL_MPU_ConfigRegion+0x84>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7b1b      	ldrb	r3, [r3, #12]
 8001396:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7adb      	ldrb	r3, [r3, #11]
 800139c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800139e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7a9b      	ldrb	r3, [r3, #10]
 80013a4:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013a6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7b5b      	ldrb	r3, [r3, #13]
 80013ac:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ae:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7b9b      	ldrb	r3, [r3, #14]
 80013b4:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013b6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7bdb      	ldrb	r3, [r3, #15]
 80013bc:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013be:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7a5b      	ldrb	r3, [r3, #9]
 80013c4:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013c6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7a1b      	ldrb	r3, [r3, #8]
 80013cc:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013ce:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013d4:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d6:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80013d8:	e005      	b.n	80013e6 <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MPU_ConfigRegion+0x84>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_MPU_ConfigRegion+0x84>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed90 	.word	0xe000ed90

080013f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff fe26 	bl	8001050 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e316      	b.n	8001a3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a66      	ldr	r2, [pc, #408]	; (80015b0 <HAL_DMA_Init+0x1b8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d04a      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <HAL_DMA_Init+0x1bc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d045      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a63      	ldr	r2, [pc, #396]	; (80015b8 <HAL_DMA_Init+0x1c0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d040      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a62      	ldr	r2, [pc, #392]	; (80015bc <HAL_DMA_Init+0x1c4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d03b      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <HAL_DMA_Init+0x1c8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d036      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a5f      	ldr	r2, [pc, #380]	; (80015c4 <HAL_DMA_Init+0x1cc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d031      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5d      	ldr	r2, [pc, #372]	; (80015c8 <HAL_DMA_Init+0x1d0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d02c      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a5c      	ldr	r2, [pc, #368]	; (80015cc <HAL_DMA_Init+0x1d4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d027      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a5a      	ldr	r2, [pc, #360]	; (80015d0 <HAL_DMA_Init+0x1d8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d022      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a59      	ldr	r2, [pc, #356]	; (80015d4 <HAL_DMA_Init+0x1dc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d01d      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a57      	ldr	r2, [pc, #348]	; (80015d8 <HAL_DMA_Init+0x1e0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d018      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a56      	ldr	r2, [pc, #344]	; (80015dc <HAL_DMA_Init+0x1e4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d013      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a54      	ldr	r2, [pc, #336]	; (80015e0 <HAL_DMA_Init+0x1e8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00e      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a53      	ldr	r2, [pc, #332]	; (80015e4 <HAL_DMA_Init+0x1ec>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d009      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a51      	ldr	r2, [pc, #324]	; (80015e8 <HAL_DMA_Init+0x1f0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d004      	beq.n	80014b0 <HAL_DMA_Init+0xb8>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a50      	ldr	r2, [pc, #320]	; (80015ec <HAL_DMA_Init+0x1f4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_DMA_Init+0xbc>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_DMA_Init+0xbe>
 80014b4:	2300      	movs	r3, #0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 813b 	beq.w	8001732 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a37      	ldr	r2, [pc, #220]	; (80015b0 <HAL_DMA_Init+0x1b8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d04a      	beq.n	800156c <HAL_DMA_Init+0x174>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a36      	ldr	r2, [pc, #216]	; (80015b4 <HAL_DMA_Init+0x1bc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d045      	beq.n	800156c <HAL_DMA_Init+0x174>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a34      	ldr	r2, [pc, #208]	; (80015b8 <HAL_DMA_Init+0x1c0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d040      	beq.n	800156c <HAL_DMA_Init+0x174>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <HAL_DMA_Init+0x1c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d03b      	beq.n	800156c <HAL_DMA_Init+0x174>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <HAL_DMA_Init+0x1c8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d036      	beq.n	800156c <HAL_DMA_Init+0x174>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a30      	ldr	r2, [pc, #192]	; (80015c4 <HAL_DMA_Init+0x1cc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d031      	beq.n	800156c <HAL_DMA_Init+0x174>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2e      	ldr	r2, [pc, #184]	; (80015c8 <HAL_DMA_Init+0x1d0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d02c      	beq.n	800156c <HAL_DMA_Init+0x174>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <HAL_DMA_Init+0x1d4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d027      	beq.n	800156c <HAL_DMA_Init+0x174>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2b      	ldr	r2, [pc, #172]	; (80015d0 <HAL_DMA_Init+0x1d8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d022      	beq.n	800156c <HAL_DMA_Init+0x174>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a2a      	ldr	r2, [pc, #168]	; (80015d4 <HAL_DMA_Init+0x1dc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d01d      	beq.n	800156c <HAL_DMA_Init+0x174>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <HAL_DMA_Init+0x1e0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d018      	beq.n	800156c <HAL_DMA_Init+0x174>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a27      	ldr	r2, [pc, #156]	; (80015dc <HAL_DMA_Init+0x1e4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d013      	beq.n	800156c <HAL_DMA_Init+0x174>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <HAL_DMA_Init+0x1e8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00e      	beq.n	800156c <HAL_DMA_Init+0x174>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <HAL_DMA_Init+0x1ec>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d009      	beq.n	800156c <HAL_DMA_Init+0x174>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_DMA_Init+0x1f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d004      	beq.n	800156c <HAL_DMA_Init+0x174>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <HAL_DMA_Init+0x1f4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d108      	bne.n	800157e <HAL_DMA_Init+0x186>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e007      	b.n	800158e <HAL_DMA_Init+0x196>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800158e:	e02f      	b.n	80015f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001590:	f7ff fd5e 	bl	8001050 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b05      	cmp	r3, #5
 800159c:	d928      	bls.n	80015f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2220      	movs	r2, #32
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2203      	movs	r2, #3
 80015a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e246      	b.n	8001a3e <HAL_DMA_Init+0x646>
 80015b0:	40020010 	.word	0x40020010
 80015b4:	40020028 	.word	0x40020028
 80015b8:	40020040 	.word	0x40020040
 80015bc:	40020058 	.word	0x40020058
 80015c0:	40020070 	.word	0x40020070
 80015c4:	40020088 	.word	0x40020088
 80015c8:	400200a0 	.word	0x400200a0
 80015cc:	400200b8 	.word	0x400200b8
 80015d0:	40020410 	.word	0x40020410
 80015d4:	40020428 	.word	0x40020428
 80015d8:	40020440 	.word	0x40020440
 80015dc:	40020458 	.word	0x40020458
 80015e0:	40020470 	.word	0x40020470
 80015e4:	40020488 	.word	0x40020488
 80015e8:	400204a0 	.word	0x400204a0
 80015ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1c8      	bne.n	8001590 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4b83      	ldr	r3, [pc, #524]	; (8001818 <HAL_DMA_Init+0x420>)
 800160a:	4013      	ands	r3, r2
 800160c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001616:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001622:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4313      	orrs	r3, r2
 800163a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	2b04      	cmp	r3, #4
 8001642:	d107      	bne.n	8001654 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4313      	orrs	r3, r2
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001654:	4b71      	ldr	r3, [pc, #452]	; (800181c <HAL_DMA_Init+0x424>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b71      	ldr	r3, [pc, #452]	; (8001820 <HAL_DMA_Init+0x428>)
 800165a:	4013      	ands	r3, r2
 800165c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001660:	d328      	bcc.n	80016b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b28      	cmp	r3, #40	; 0x28
 8001668:	d903      	bls.n	8001672 <HAL_DMA_Init+0x27a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b2e      	cmp	r3, #46	; 0x2e
 8001670:	d917      	bls.n	80016a2 <HAL_DMA_Init+0x2aa>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b3e      	cmp	r3, #62	; 0x3e
 8001678:	d903      	bls.n	8001682 <HAL_DMA_Init+0x28a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b42      	cmp	r3, #66	; 0x42
 8001680:	d90f      	bls.n	80016a2 <HAL_DMA_Init+0x2aa>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b46      	cmp	r3, #70	; 0x46
 8001688:	d903      	bls.n	8001692 <HAL_DMA_Init+0x29a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b48      	cmp	r3, #72	; 0x48
 8001690:	d907      	bls.n	80016a2 <HAL_DMA_Init+0x2aa>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b4e      	cmp	r3, #78	; 0x4e
 8001698:	d905      	bls.n	80016a6 <HAL_DMA_Init+0x2ae>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b52      	cmp	r3, #82	; 0x52
 80016a0:	d801      	bhi.n	80016a6 <HAL_DMA_Init+0x2ae>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_DMA_Init+0x2b0>
 80016a6:	2300      	movs	r3, #0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d117      	bne.n	800170e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00e      	beq.n	800170e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f002 fb31 	bl	8003d58 <DMA_CheckFifoParam>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e197      	b.n	8001a3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f002 fa6c 	bl	8003bf4 <DMA_CalcBaseAndBitshift>
 800171c:	4603      	mov	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	223f      	movs	r2, #63	; 0x3f
 800172a:	409a      	lsls	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e0cd      	b.n	80018ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a3b      	ldr	r2, [pc, #236]	; (8001824 <HAL_DMA_Init+0x42c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <HAL_DMA_Init+0x38a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a39      	ldr	r2, [pc, #228]	; (8001828 <HAL_DMA_Init+0x430>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01d      	beq.n	8001782 <HAL_DMA_Init+0x38a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a38      	ldr	r2, [pc, #224]	; (800182c <HAL_DMA_Init+0x434>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d018      	beq.n	8001782 <HAL_DMA_Init+0x38a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a36      	ldr	r2, [pc, #216]	; (8001830 <HAL_DMA_Init+0x438>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_DMA_Init+0x38a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a35      	ldr	r2, [pc, #212]	; (8001834 <HAL_DMA_Init+0x43c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00e      	beq.n	8001782 <HAL_DMA_Init+0x38a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a33      	ldr	r2, [pc, #204]	; (8001838 <HAL_DMA_Init+0x440>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d009      	beq.n	8001782 <HAL_DMA_Init+0x38a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a32      	ldr	r2, [pc, #200]	; (800183c <HAL_DMA_Init+0x444>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d004      	beq.n	8001782 <HAL_DMA_Init+0x38a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a30      	ldr	r2, [pc, #192]	; (8001840 <HAL_DMA_Init+0x448>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d101      	bne.n	8001786 <HAL_DMA_Init+0x38e>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_DMA_Init+0x390>
 8001786:	2300      	movs	r3, #0
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 8097 	beq.w	80018bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <HAL_DMA_Init+0x42c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d021      	beq.n	80017dc <HAL_DMA_Init+0x3e4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a22      	ldr	r2, [pc, #136]	; (8001828 <HAL_DMA_Init+0x430>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01c      	beq.n	80017dc <HAL_DMA_Init+0x3e4>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a21      	ldr	r2, [pc, #132]	; (800182c <HAL_DMA_Init+0x434>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d017      	beq.n	80017dc <HAL_DMA_Init+0x3e4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <HAL_DMA_Init+0x438>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d012      	beq.n	80017dc <HAL_DMA_Init+0x3e4>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <HAL_DMA_Init+0x43c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d00d      	beq.n	80017dc <HAL_DMA_Init+0x3e4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_DMA_Init+0x440>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d008      	beq.n	80017dc <HAL_DMA_Init+0x3e4>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_DMA_Init+0x444>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Init+0x3e4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_DMA_Init+0x448>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_DMA_Init+0x44c>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b40      	cmp	r3, #64	; 0x40
 8001804:	d020      	beq.n	8001848 <HAL_DMA_Init+0x450>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b80      	cmp	r3, #128	; 0x80
 800180c:	d102      	bne.n	8001814 <HAL_DMA_Init+0x41c>
 800180e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001812:	e01a      	b.n	800184a <HAL_DMA_Init+0x452>
 8001814:	2300      	movs	r3, #0
 8001816:	e018      	b.n	800184a <HAL_DMA_Init+0x452>
 8001818:	fe10803f 	.word	0xfe10803f
 800181c:	5c001000 	.word	0x5c001000
 8001820:	ffff0000 	.word	0xffff0000
 8001824:	58025408 	.word	0x58025408
 8001828:	5802541c 	.word	0x5802541c
 800182c:	58025430 	.word	0x58025430
 8001830:	58025444 	.word	0x58025444
 8001834:	58025458 	.word	0x58025458
 8001838:	5802546c 	.word	0x5802546c
 800183c:	58025480 	.word	0x58025480
 8001840:	58025494 	.word	0x58025494
 8001844:	fffe000f 	.word	0xfffe000f
 8001848:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68d2      	ldr	r2, [r2, #12]
 800184e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001858:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001860:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001878:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b6e      	ldr	r3, [pc, #440]	; (8001a48 <HAL_DMA_Init+0x650>)
 8001890:	4413      	add	r3, r2
 8001892:	4a6e      	ldr	r2, [pc, #440]	; (8001a4c <HAL_DMA_Init+0x654>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	009a      	lsls	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f002 f9a7 	bl	8003bf4 <DMA_CalcBaseAndBitshift>
 80018a6:	4603      	mov	r3, r0
 80018a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2201      	movs	r2, #1
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	e008      	b.n	80018ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0b7      	b.n	8001a3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5f      	ldr	r2, [pc, #380]	; (8001a50 <HAL_DMA_Init+0x658>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d072      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5d      	ldr	r2, [pc, #372]	; (8001a54 <HAL_DMA_Init+0x65c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d06d      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a5c      	ldr	r2, [pc, #368]	; (8001a58 <HAL_DMA_Init+0x660>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d068      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_DMA_Init+0x664>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d063      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a59      	ldr	r2, [pc, #356]	; (8001a60 <HAL_DMA_Init+0x668>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d05e      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a57      	ldr	r2, [pc, #348]	; (8001a64 <HAL_DMA_Init+0x66c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d059      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a56      	ldr	r2, [pc, #344]	; (8001a68 <HAL_DMA_Init+0x670>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d054      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a54      	ldr	r2, [pc, #336]	; (8001a6c <HAL_DMA_Init+0x674>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d04f      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a53      	ldr	r2, [pc, #332]	; (8001a70 <HAL_DMA_Init+0x678>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d04a      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a51      	ldr	r2, [pc, #324]	; (8001a74 <HAL_DMA_Init+0x67c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d045      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a50      	ldr	r2, [pc, #320]	; (8001a78 <HAL_DMA_Init+0x680>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d040      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a4e      	ldr	r2, [pc, #312]	; (8001a7c <HAL_DMA_Init+0x684>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d03b      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <HAL_DMA_Init+0x688>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d036      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_DMA_Init+0x68c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d031      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_DMA_Init+0x690>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d02c      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_DMA_Init+0x694>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d027      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_DMA_Init+0x698>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d022      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a45      	ldr	r2, [pc, #276]	; (8001a94 <HAL_DMA_Init+0x69c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01d      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a44      	ldr	r2, [pc, #272]	; (8001a98 <HAL_DMA_Init+0x6a0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d018      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a42      	ldr	r2, [pc, #264]	; (8001a9c <HAL_DMA_Init+0x6a4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <HAL_DMA_Init+0x6a8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00e      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a3f      	ldr	r2, [pc, #252]	; (8001aa4 <HAL_DMA_Init+0x6ac>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d009      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a3e      	ldr	r2, [pc, #248]	; (8001aa8 <HAL_DMA_Init+0x6b0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d004      	beq.n	80019be <HAL_DMA_Init+0x5c6>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a3c      	ldr	r2, [pc, #240]	; (8001aac <HAL_DMA_Init+0x6b4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_DMA_Init+0x5ca>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_DMA_Init+0x5cc>
 80019c2:	2300      	movs	r3, #0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d032      	beq.n	8001a2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f002 fa41 	bl	8003e50 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b80      	cmp	r3, #128	; 0x80
 80019d4:	d102      	bne.n	80019dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6852      	ldr	r2, [r2, #4]
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <HAL_DMA_Init+0x624>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d80c      	bhi.n	8001a1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f002 fabe 	bl	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	e008      	b.n	8001a2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	a7fdabf8 	.word	0xa7fdabf8
 8001a4c:	cccccccd 	.word	0xcccccccd
 8001a50:	40020010 	.word	0x40020010
 8001a54:	40020028 	.word	0x40020028
 8001a58:	40020040 	.word	0x40020040
 8001a5c:	40020058 	.word	0x40020058
 8001a60:	40020070 	.word	0x40020070
 8001a64:	40020088 	.word	0x40020088
 8001a68:	400200a0 	.word	0x400200a0
 8001a6c:	400200b8 	.word	0x400200b8
 8001a70:	40020410 	.word	0x40020410
 8001a74:	40020428 	.word	0x40020428
 8001a78:	40020440 	.word	0x40020440
 8001a7c:	40020458 	.word	0x40020458
 8001a80:	40020470 	.word	0x40020470
 8001a84:	40020488 	.word	0x40020488
 8001a88:	400204a0 	.word	0x400204a0
 8001a8c:	400204b8 	.word	0x400204b8
 8001a90:	58025408 	.word	0x58025408
 8001a94:	5802541c 	.word	0x5802541c
 8001a98:	58025430 	.word	0x58025430
 8001a9c:	58025444 	.word	0x58025444
 8001aa0:	58025458 	.word	0x58025458
 8001aa4:	5802546c 	.word	0x5802546c
 8001aa8:	58025480 	.word	0x58025480
 8001aac:	58025494 	.word	0x58025494

08001ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e226      	b.n	8001f1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_DMA_Start_IT+0x2a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e21f      	b.n	8001f1a <HAL_DMA_Start_IT+0x46a>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 820a 	bne.w	8001f04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a68      	ldr	r2, [pc, #416]	; (8001ca4 <HAL_DMA_Start_IT+0x1f4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d04a      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a66      	ldr	r2, [pc, #408]	; (8001ca8 <HAL_DMA_Start_IT+0x1f8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d045      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a65      	ldr	r2, [pc, #404]	; (8001cac <HAL_DMA_Start_IT+0x1fc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d040      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <HAL_DMA_Start_IT+0x200>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d03b      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a62      	ldr	r2, [pc, #392]	; (8001cb4 <HAL_DMA_Start_IT+0x204>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d036      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a60      	ldr	r2, [pc, #384]	; (8001cb8 <HAL_DMA_Start_IT+0x208>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d031      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a5f      	ldr	r2, [pc, #380]	; (8001cbc <HAL_DMA_Start_IT+0x20c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d02c      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a5d      	ldr	r2, [pc, #372]	; (8001cc0 <HAL_DMA_Start_IT+0x210>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d027      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a5c      	ldr	r2, [pc, #368]	; (8001cc4 <HAL_DMA_Start_IT+0x214>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d022      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a5a      	ldr	r2, [pc, #360]	; (8001cc8 <HAL_DMA_Start_IT+0x218>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01d      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a59      	ldr	r2, [pc, #356]	; (8001ccc <HAL_DMA_Start_IT+0x21c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d018      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a57      	ldr	r2, [pc, #348]	; (8001cd0 <HAL_DMA_Start_IT+0x220>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a56      	ldr	r2, [pc, #344]	; (8001cd4 <HAL_DMA_Start_IT+0x224>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00e      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_DMA_Start_IT+0x228>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d009      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <HAL_DMA_Start_IT+0x22c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d004      	beq.n	8001b9e <HAL_DMA_Start_IT+0xee>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <HAL_DMA_Start_IT+0x230>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d108      	bne.n	8001bb0 <HAL_DMA_Start_IT+0x100>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e007      	b.n	8001bc0 <HAL_DMA_Start_IT+0x110>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f001 fe68 	bl	800389c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a34      	ldr	r2, [pc, #208]	; (8001ca4 <HAL_DMA_Start_IT+0x1f4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d04a      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a33      	ldr	r2, [pc, #204]	; (8001ca8 <HAL_DMA_Start_IT+0x1f8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d045      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a31      	ldr	r2, [pc, #196]	; (8001cac <HAL_DMA_Start_IT+0x1fc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d040      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_DMA_Start_IT+0x200>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d03b      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <HAL_DMA_Start_IT+0x204>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d036      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <HAL_DMA_Start_IT+0x208>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d031      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <HAL_DMA_Start_IT+0x20c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d02c      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2a      	ldr	r2, [pc, #168]	; (8001cc0 <HAL_DMA_Start_IT+0x210>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d027      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <HAL_DMA_Start_IT+0x214>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d022      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_DMA_Start_IT+0x218>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d01d      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <HAL_DMA_Start_IT+0x21c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d018      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <HAL_DMA_Start_IT+0x220>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <HAL_DMA_Start_IT+0x224>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00e      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <HAL_DMA_Start_IT+0x228>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d009      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_DMA_Start_IT+0x22c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_DMA_Start_IT+0x1bc>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_DMA_Start_IT+0x230>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d101      	bne.n	8001c70 <HAL_DMA_Start_IT+0x1c0>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_DMA_Start_IT+0x1c2>
 8001c70:	2300      	movs	r3, #0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d036      	beq.n	8001ce4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	f022 021e 	bic.w	r2, r2, #30
 8001c84:	f042 0216 	orr.w	r2, r2, #22
 8001c88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03e      	beq.n	8001d10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	f042 0208 	orr.w	r2, r2, #8
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e035      	b.n	8001d10 <HAL_DMA_Start_IT+0x260>
 8001ca4:	40020010 	.word	0x40020010
 8001ca8:	40020028 	.word	0x40020028
 8001cac:	40020040 	.word	0x40020040
 8001cb0:	40020058 	.word	0x40020058
 8001cb4:	40020070 	.word	0x40020070
 8001cb8:	40020088 	.word	0x40020088
 8001cbc:	400200a0 	.word	0x400200a0
 8001cc0:	400200b8 	.word	0x400200b8
 8001cc4:	40020410 	.word	0x40020410
 8001cc8:	40020428 	.word	0x40020428
 8001ccc:	40020440 	.word	0x40020440
 8001cd0:	40020458 	.word	0x40020458
 8001cd4:	40020470 	.word	0x40020470
 8001cd8:	40020488 	.word	0x40020488
 8001cdc:	400204a0 	.word	0x400204a0
 8001ce0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	f022 020e 	bic.w	r2, r2, #14
 8001cf2:	f042 020a 	orr.w	r2, r2, #10
 8001cf6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f042 0204 	orr.w	r2, r2, #4
 8001d0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a83      	ldr	r2, [pc, #524]	; (8001f24 <HAL_DMA_Start_IT+0x474>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d072      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a82      	ldr	r2, [pc, #520]	; (8001f28 <HAL_DMA_Start_IT+0x478>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d06d      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a80      	ldr	r2, [pc, #512]	; (8001f2c <HAL_DMA_Start_IT+0x47c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d068      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7f      	ldr	r2, [pc, #508]	; (8001f30 <HAL_DMA_Start_IT+0x480>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d063      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a7d      	ldr	r2, [pc, #500]	; (8001f34 <HAL_DMA_Start_IT+0x484>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d05e      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7c      	ldr	r2, [pc, #496]	; (8001f38 <HAL_DMA_Start_IT+0x488>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d059      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a7a      	ldr	r2, [pc, #488]	; (8001f3c <HAL_DMA_Start_IT+0x48c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d054      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a79      	ldr	r2, [pc, #484]	; (8001f40 <HAL_DMA_Start_IT+0x490>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d04f      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a77      	ldr	r2, [pc, #476]	; (8001f44 <HAL_DMA_Start_IT+0x494>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d04a      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a76      	ldr	r2, [pc, #472]	; (8001f48 <HAL_DMA_Start_IT+0x498>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d045      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a74      	ldr	r2, [pc, #464]	; (8001f4c <HAL_DMA_Start_IT+0x49c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d040      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a73      	ldr	r2, [pc, #460]	; (8001f50 <HAL_DMA_Start_IT+0x4a0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d03b      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a71      	ldr	r2, [pc, #452]	; (8001f54 <HAL_DMA_Start_IT+0x4a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d036      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a70      	ldr	r2, [pc, #448]	; (8001f58 <HAL_DMA_Start_IT+0x4a8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_DMA_Start_IT+0x4ac>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d02c      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6d      	ldr	r2, [pc, #436]	; (8001f60 <HAL_DMA_Start_IT+0x4b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d027      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6b      	ldr	r2, [pc, #428]	; (8001f64 <HAL_DMA_Start_IT+0x4b4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6a      	ldr	r2, [pc, #424]	; (8001f68 <HAL_DMA_Start_IT+0x4b8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01d      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a68      	ldr	r2, [pc, #416]	; (8001f6c <HAL_DMA_Start_IT+0x4bc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a67      	ldr	r2, [pc, #412]	; (8001f70 <HAL_DMA_Start_IT+0x4c0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_DMA_Start_IT+0x4c4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a64      	ldr	r2, [pc, #400]	; (8001f78 <HAL_DMA_Start_IT+0x4c8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a62      	ldr	r2, [pc, #392]	; (8001f7c <HAL_DMA_Start_IT+0x4cc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_DMA_Start_IT+0x350>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a61      	ldr	r2, [pc, #388]	; (8001f80 <HAL_DMA_Start_IT+0x4d0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_DMA_Start_IT+0x354>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_DMA_Start_IT+0x356>
 8001e04:	2300      	movs	r3, #0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01a      	beq.n	8001e40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <HAL_DMA_Start_IT+0x474>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d04a      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a36      	ldr	r2, [pc, #216]	; (8001f28 <HAL_DMA_Start_IT+0x478>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d045      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_DMA_Start_IT+0x47c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d040      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a33      	ldr	r2, [pc, #204]	; (8001f30 <HAL_DMA_Start_IT+0x480>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d03b      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <HAL_DMA_Start_IT+0x484>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d036      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a30      	ldr	r2, [pc, #192]	; (8001f38 <HAL_DMA_Start_IT+0x488>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d031      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <HAL_DMA_Start_IT+0x48c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02c      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_DMA_Start_IT+0x490>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d027      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <HAL_DMA_Start_IT+0x494>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d022      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <HAL_DMA_Start_IT+0x498>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d01d      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a28      	ldr	r2, [pc, #160]	; (8001f4c <HAL_DMA_Start_IT+0x49c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d018      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <HAL_DMA_Start_IT+0x4a0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <HAL_DMA_Start_IT+0x4a4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_DMA_Start_IT+0x4a8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_DMA_Start_IT+0x4ac>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d004      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x430>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <HAL_DMA_Start_IT+0x4b0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d108      	bne.n	8001ef2 <HAL_DMA_Start_IT+0x442>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e012      	b.n	8001f18 <HAL_DMA_Start_IT+0x468>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e009      	b.n	8001f18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40020010 	.word	0x40020010
 8001f28:	40020028 	.word	0x40020028
 8001f2c:	40020040 	.word	0x40020040
 8001f30:	40020058 	.word	0x40020058
 8001f34:	40020070 	.word	0x40020070
 8001f38:	40020088 	.word	0x40020088
 8001f3c:	400200a0 	.word	0x400200a0
 8001f40:	400200b8 	.word	0x400200b8
 8001f44:	40020410 	.word	0x40020410
 8001f48:	40020428 	.word	0x40020428
 8001f4c:	40020440 	.word	0x40020440
 8001f50:	40020458 	.word	0x40020458
 8001f54:	40020470 	.word	0x40020470
 8001f58:	40020488 	.word	0x40020488
 8001f5c:	400204a0 	.word	0x400204a0
 8001f60:	400204b8 	.word	0x400204b8
 8001f64:	58025408 	.word	0x58025408
 8001f68:	5802541c 	.word	0x5802541c
 8001f6c:	58025430 	.word	0x58025430
 8001f70:	58025444 	.word	0x58025444
 8001f74:	58025458 	.word	0x58025458
 8001f78:	5802546c 	.word	0x5802546c
 8001f7c:	58025480 	.word	0x58025480
 8001f80:	58025494 	.word	0x58025494

08001f84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff f860 	bl	8001050 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e2dc      	b.n	8002556 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d008      	beq.n	8001fba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e2cd      	b.n	8002556 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a76      	ldr	r2, [pc, #472]	; (8002198 <HAL_DMA_Abort+0x214>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d04a      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a74      	ldr	r2, [pc, #464]	; (800219c <HAL_DMA_Abort+0x218>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d045      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a73      	ldr	r2, [pc, #460]	; (80021a0 <HAL_DMA_Abort+0x21c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d040      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a71      	ldr	r2, [pc, #452]	; (80021a4 <HAL_DMA_Abort+0x220>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d03b      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a70      	ldr	r2, [pc, #448]	; (80021a8 <HAL_DMA_Abort+0x224>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d036      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6e      	ldr	r2, [pc, #440]	; (80021ac <HAL_DMA_Abort+0x228>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d031      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6d      	ldr	r2, [pc, #436]	; (80021b0 <HAL_DMA_Abort+0x22c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d02c      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a6b      	ldr	r2, [pc, #428]	; (80021b4 <HAL_DMA_Abort+0x230>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d027      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6a      	ldr	r2, [pc, #424]	; (80021b8 <HAL_DMA_Abort+0x234>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d022      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a68      	ldr	r2, [pc, #416]	; (80021bc <HAL_DMA_Abort+0x238>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01d      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <HAL_DMA_Abort+0x23c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d018      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <HAL_DMA_Abort+0x240>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a64      	ldr	r2, [pc, #400]	; (80021c8 <HAL_DMA_Abort+0x244>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00e      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a62      	ldr	r2, [pc, #392]	; (80021cc <HAL_DMA_Abort+0x248>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d009      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a61      	ldr	r2, [pc, #388]	; (80021d0 <HAL_DMA_Abort+0x24c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d004      	beq.n	800205a <HAL_DMA_Abort+0xd6>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <HAL_DMA_Abort+0x250>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_DMA_Abort+0xda>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_DMA_Abort+0xdc>
 800205e:	2300      	movs	r3, #0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	f022 021e 	bic.w	r2, r2, #30
 8002072:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	6952      	ldr	r2, [r2, #20]
 800207e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002082:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e00a      	b.n	80020a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	f022 020e 	bic.w	r2, r2, #14
 800209a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a3c      	ldr	r2, [pc, #240]	; (8002198 <HAL_DMA_Abort+0x214>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d072      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3a      	ldr	r2, [pc, #232]	; (800219c <HAL_DMA_Abort+0x218>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d06d      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a39      	ldr	r2, [pc, #228]	; (80021a0 <HAL_DMA_Abort+0x21c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d068      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a37      	ldr	r2, [pc, #220]	; (80021a4 <HAL_DMA_Abort+0x220>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d063      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a36      	ldr	r2, [pc, #216]	; (80021a8 <HAL_DMA_Abort+0x224>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d05e      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a34      	ldr	r2, [pc, #208]	; (80021ac <HAL_DMA_Abort+0x228>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d059      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a33      	ldr	r2, [pc, #204]	; (80021b0 <HAL_DMA_Abort+0x22c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d054      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_DMA_Abort+0x230>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d04f      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a30      	ldr	r2, [pc, #192]	; (80021b8 <HAL_DMA_Abort+0x234>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d04a      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2e      	ldr	r2, [pc, #184]	; (80021bc <HAL_DMA_Abort+0x238>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d045      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <HAL_DMA_Abort+0x23c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d040      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2b      	ldr	r2, [pc, #172]	; (80021c4 <HAL_DMA_Abort+0x240>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d03b      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <HAL_DMA_Abort+0x244>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d036      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_DMA_Abort+0x248>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d031      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_DMA_Abort+0x24c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d02c      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <HAL_DMA_Abort+0x250>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d027      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <HAL_DMA_Abort+0x254>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d022      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_DMA_Abort+0x258>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01d      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_DMA_Abort+0x25c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d018      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_DMA_Abort+0x260>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_DMA_Abort+0x264>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00e      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_DMA_Abort+0x268>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <HAL_DMA_Abort+0x26c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_DMA_Abort+0x20e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_DMA_Abort+0x270>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d132      	bne.n	80021f8 <HAL_DMA_Abort+0x274>
 8002192:	2301      	movs	r3, #1
 8002194:	e031      	b.n	80021fa <HAL_DMA_Abort+0x276>
 8002196:	bf00      	nop
 8002198:	40020010 	.word	0x40020010
 800219c:	40020028 	.word	0x40020028
 80021a0:	40020040 	.word	0x40020040
 80021a4:	40020058 	.word	0x40020058
 80021a8:	40020070 	.word	0x40020070
 80021ac:	40020088 	.word	0x40020088
 80021b0:	400200a0 	.word	0x400200a0
 80021b4:	400200b8 	.word	0x400200b8
 80021b8:	40020410 	.word	0x40020410
 80021bc:	40020428 	.word	0x40020428
 80021c0:	40020440 	.word	0x40020440
 80021c4:	40020458 	.word	0x40020458
 80021c8:	40020470 	.word	0x40020470
 80021cc:	40020488 	.word	0x40020488
 80021d0:	400204a0 	.word	0x400204a0
 80021d4:	400204b8 	.word	0x400204b8
 80021d8:	58025408 	.word	0x58025408
 80021dc:	5802541c 	.word	0x5802541c
 80021e0:	58025430 	.word	0x58025430
 80021e4:	58025444 	.word	0x58025444
 80021e8:	58025458 	.word	0x58025458
 80021ec:	5802546c 	.word	0x5802546c
 80021f0:	58025480 	.word	0x58025480
 80021f4:	58025494 	.word	0x58025494
 80021f8:	2300      	movs	r3, #0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800220c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6d      	ldr	r2, [pc, #436]	; (80023c8 <HAL_DMA_Abort+0x444>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d04a      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6b      	ldr	r2, [pc, #428]	; (80023cc <HAL_DMA_Abort+0x448>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d045      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a6a      	ldr	r2, [pc, #424]	; (80023d0 <HAL_DMA_Abort+0x44c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d040      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a68      	ldr	r2, [pc, #416]	; (80023d4 <HAL_DMA_Abort+0x450>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d03b      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a67      	ldr	r2, [pc, #412]	; (80023d8 <HAL_DMA_Abort+0x454>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d036      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_DMA_Abort+0x458>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d031      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a64      	ldr	r2, [pc, #400]	; (80023e0 <HAL_DMA_Abort+0x45c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d02c      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a62      	ldr	r2, [pc, #392]	; (80023e4 <HAL_DMA_Abort+0x460>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d027      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a61      	ldr	r2, [pc, #388]	; (80023e8 <HAL_DMA_Abort+0x464>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5f      	ldr	r2, [pc, #380]	; (80023ec <HAL_DMA_Abort+0x468>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01d      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5e      	ldr	r2, [pc, #376]	; (80023f0 <HAL_DMA_Abort+0x46c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d018      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <HAL_DMA_Abort+0x470>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5b      	ldr	r2, [pc, #364]	; (80023f8 <HAL_DMA_Abort+0x474>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00e      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a59      	ldr	r2, [pc, #356]	; (80023fc <HAL_DMA_Abort+0x478>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_DMA_Abort+0x47c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_Abort+0x32a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_DMA_Abort+0x480>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d108      	bne.n	80022c0 <HAL_DMA_Abort+0x33c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e007      	b.n	80022d0 <HAL_DMA_Abort+0x34c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022d0:	e013      	b.n	80022fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d2:	f7fe febd 	bl	8001050 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d90c      	bls.n	80022fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2203      	movs	r2, #3
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e12d      	b.n	8002556 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e5      	bne.n	80022d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <HAL_DMA_Abort+0x444>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04a      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2d      	ldr	r2, [pc, #180]	; (80023cc <HAL_DMA_Abort+0x448>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d045      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a2c      	ldr	r2, [pc, #176]	; (80023d0 <HAL_DMA_Abort+0x44c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d040      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <HAL_DMA_Abort+0x450>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d03b      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_DMA_Abort+0x454>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d036      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a27      	ldr	r2, [pc, #156]	; (80023dc <HAL_DMA_Abort+0x458>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <HAL_DMA_Abort+0x45c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d02c      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_DMA_Abort+0x460>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d027      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a23      	ldr	r2, [pc, #140]	; (80023e8 <HAL_DMA_Abort+0x464>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a21      	ldr	r2, [pc, #132]	; (80023ec <HAL_DMA_Abort+0x468>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_DMA_Abort+0x46c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_DMA_Abort+0x470>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_DMA_Abort+0x474>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_DMA_Abort+0x478>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <HAL_DMA_Abort+0x47c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_DMA_Abort+0x422>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_DMA_Abort+0x480>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Abort+0x426>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_DMA_Abort+0x428>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d02b      	beq.n	8002408 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	60fb      	str	r3, [r7, #12]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	223f      	movs	r2, #63	; 0x3f
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	e02a      	b.n	800241e <HAL_DMA_Abort+0x49a>
 80023c8:	40020010 	.word	0x40020010
 80023cc:	40020028 	.word	0x40020028
 80023d0:	40020040 	.word	0x40020040
 80023d4:	40020058 	.word	0x40020058
 80023d8:	40020070 	.word	0x40020070
 80023dc:	40020088 	.word	0x40020088
 80023e0:	400200a0 	.word	0x400200a0
 80023e4:	400200b8 	.word	0x400200b8
 80023e8:	40020410 	.word	0x40020410
 80023ec:	40020428 	.word	0x40020428
 80023f0:	40020440 	.word	0x40020440
 80023f4:	40020458 	.word	0x40020458
 80023f8:	40020470 	.word	0x40020470
 80023fc:	40020488 	.word	0x40020488
 8002400:	400204a0 	.word	0x400204a0
 8002404:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	60bb      	str	r3, [r7, #8]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2201      	movs	r2, #1
 8002418:	409a      	lsls	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a4f      	ldr	r2, [pc, #316]	; (8002560 <HAL_DMA_Abort+0x5dc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d072      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a4d      	ldr	r2, [pc, #308]	; (8002564 <HAL_DMA_Abort+0x5e0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d06d      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a4c      	ldr	r2, [pc, #304]	; (8002568 <HAL_DMA_Abort+0x5e4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d068      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a4a      	ldr	r2, [pc, #296]	; (800256c <HAL_DMA_Abort+0x5e8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d063      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_DMA_Abort+0x5ec>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d05e      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a47      	ldr	r2, [pc, #284]	; (8002574 <HAL_DMA_Abort+0x5f0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d059      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a46      	ldr	r2, [pc, #280]	; (8002578 <HAL_DMA_Abort+0x5f4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d054      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a44      	ldr	r2, [pc, #272]	; (800257c <HAL_DMA_Abort+0x5f8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d04f      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a43      	ldr	r2, [pc, #268]	; (8002580 <HAL_DMA_Abort+0x5fc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d04a      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a41      	ldr	r2, [pc, #260]	; (8002584 <HAL_DMA_Abort+0x600>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d045      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a40      	ldr	r2, [pc, #256]	; (8002588 <HAL_DMA_Abort+0x604>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d040      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3e      	ldr	r2, [pc, #248]	; (800258c <HAL_DMA_Abort+0x608>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d03b      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <HAL_DMA_Abort+0x60c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d036      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a3b      	ldr	r2, [pc, #236]	; (8002594 <HAL_DMA_Abort+0x610>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d031      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_DMA_Abort+0x614>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d02c      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a38      	ldr	r2, [pc, #224]	; (800259c <HAL_DMA_Abort+0x618>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d027      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a37      	ldr	r2, [pc, #220]	; (80025a0 <HAL_DMA_Abort+0x61c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d022      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a35      	ldr	r2, [pc, #212]	; (80025a4 <HAL_DMA_Abort+0x620>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01d      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a34      	ldr	r2, [pc, #208]	; (80025a8 <HAL_DMA_Abort+0x624>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d018      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_DMA_Abort+0x628>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <HAL_DMA_Abort+0x62c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00e      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <HAL_DMA_Abort+0x630>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2e      	ldr	r2, [pc, #184]	; (80025b8 <HAL_DMA_Abort+0x634>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_DMA_Abort+0x58a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2c      	ldr	r2, [pc, #176]	; (80025bc <HAL_DMA_Abort+0x638>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_DMA_Abort+0x58e>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_DMA_Abort+0x590>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002520:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00c      	beq.n	8002544 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002538:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002542:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020010 	.word	0x40020010
 8002564:	40020028 	.word	0x40020028
 8002568:	40020040 	.word	0x40020040
 800256c:	40020058 	.word	0x40020058
 8002570:	40020070 	.word	0x40020070
 8002574:	40020088 	.word	0x40020088
 8002578:	400200a0 	.word	0x400200a0
 800257c:	400200b8 	.word	0x400200b8
 8002580:	40020410 	.word	0x40020410
 8002584:	40020428 	.word	0x40020428
 8002588:	40020440 	.word	0x40020440
 800258c:	40020458 	.word	0x40020458
 8002590:	40020470 	.word	0x40020470
 8002594:	40020488 	.word	0x40020488
 8002598:	400204a0 	.word	0x400204a0
 800259c:	400204b8 	.word	0x400204b8
 80025a0:	58025408 	.word	0x58025408
 80025a4:	5802541c 	.word	0x5802541c
 80025a8:	58025430 	.word	0x58025430
 80025ac:	58025444 	.word	0x58025444
 80025b0:	58025458 	.word	0x58025458
 80025b4:	5802546c 	.word	0x5802546c
 80025b8:	58025480 	.word	0x58025480
 80025bc:	58025494 	.word	0x58025494

080025c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e205      	b.n	80029de <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d004      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e1fa      	b.n	80029de <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a8c      	ldr	r2, [pc, #560]	; (8002820 <HAL_DMA_Abort_IT+0x260>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a8b      	ldr	r2, [pc, #556]	; (8002824 <HAL_DMA_Abort_IT+0x264>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a89      	ldr	r2, [pc, #548]	; (8002828 <HAL_DMA_Abort_IT+0x268>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a88      	ldr	r2, [pc, #544]	; (800282c <HAL_DMA_Abort_IT+0x26c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a86      	ldr	r2, [pc, #536]	; (8002830 <HAL_DMA_Abort_IT+0x270>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a85      	ldr	r2, [pc, #532]	; (8002834 <HAL_DMA_Abort_IT+0x274>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a83      	ldr	r2, [pc, #524]	; (8002838 <HAL_DMA_Abort_IT+0x278>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a82      	ldr	r2, [pc, #520]	; (800283c <HAL_DMA_Abort_IT+0x27c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a80      	ldr	r2, [pc, #512]	; (8002840 <HAL_DMA_Abort_IT+0x280>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7f      	ldr	r2, [pc, #508]	; (8002844 <HAL_DMA_Abort_IT+0x284>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a7d      	ldr	r2, [pc, #500]	; (8002848 <HAL_DMA_Abort_IT+0x288>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7c      	ldr	r2, [pc, #496]	; (800284c <HAL_DMA_Abort_IT+0x28c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a7a      	ldr	r2, [pc, #488]	; (8002850 <HAL_DMA_Abort_IT+0x290>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a79      	ldr	r2, [pc, #484]	; (8002854 <HAL_DMA_Abort_IT+0x294>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a77      	ldr	r2, [pc, #476]	; (8002858 <HAL_DMA_Abort_IT+0x298>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc8>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a76      	ldr	r2, [pc, #472]	; (800285c <HAL_DMA_Abort_IT+0x29c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_DMA_Abort_IT+0xcc>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_DMA_Abort_IT+0xce>
 800268c:	2300      	movs	r3, #0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d065      	beq.n	800275e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a60      	ldr	r2, [pc, #384]	; (8002820 <HAL_DMA_Abort_IT+0x260>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d04a      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5e      	ldr	r2, [pc, #376]	; (8002824 <HAL_DMA_Abort_IT+0x264>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d045      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a5d      	ldr	r2, [pc, #372]	; (8002828 <HAL_DMA_Abort_IT+0x268>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d040      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a5b      	ldr	r2, [pc, #364]	; (800282c <HAL_DMA_Abort_IT+0x26c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d03b      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a5a      	ldr	r2, [pc, #360]	; (8002830 <HAL_DMA_Abort_IT+0x270>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d036      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_DMA_Abort_IT+0x274>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d031      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a57      	ldr	r2, [pc, #348]	; (8002838 <HAL_DMA_Abort_IT+0x278>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d02c      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a55      	ldr	r2, [pc, #340]	; (800283c <HAL_DMA_Abort_IT+0x27c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d027      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a54      	ldr	r2, [pc, #336]	; (8002840 <HAL_DMA_Abort_IT+0x280>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_DMA_Abort_IT+0x284>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01d      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a51      	ldr	r2, [pc, #324]	; (8002848 <HAL_DMA_Abort_IT+0x288>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d018      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_DMA_Abort_IT+0x28c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a4e      	ldr	r2, [pc, #312]	; (8002850 <HAL_DMA_Abort_IT+0x290>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00e      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a4c      	ldr	r2, [pc, #304]	; (8002854 <HAL_DMA_Abort_IT+0x294>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a4b      	ldr	r2, [pc, #300]	; (8002858 <HAL_DMA_Abort_IT+0x298>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_DMA_Abort_IT+0x17a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a49      	ldr	r2, [pc, #292]	; (800285c <HAL_DMA_Abort_IT+0x29c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d108      	bne.n	800274c <HAL_DMA_Abort_IT+0x18c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e147      	b.n	80029dc <HAL_DMA_Abort_IT+0x41c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e13e      	b.n	80029dc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f022 020e 	bic.w	r2, r2, #14
 800276c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2b      	ldr	r2, [pc, #172]	; (8002820 <HAL_DMA_Abort_IT+0x260>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a29      	ldr	r2, [pc, #164]	; (8002824 <HAL_DMA_Abort_IT+0x264>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a28      	ldr	r2, [pc, #160]	; (8002828 <HAL_DMA_Abort_IT+0x268>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_DMA_Abort_IT+0x26c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a25      	ldr	r2, [pc, #148]	; (8002830 <HAL_DMA_Abort_IT+0x270>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_DMA_Abort_IT+0x274>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_DMA_Abort_IT+0x278>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_DMA_Abort_IT+0x27c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <HAL_DMA_Abort_IT+0x280>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <HAL_DMA_Abort_IT+0x284>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_DMA_Abort_IT+0x288>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1a      	ldr	r2, [pc, #104]	; (800284c <HAL_DMA_Abort_IT+0x28c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a19      	ldr	r2, [pc, #100]	; (8002850 <HAL_DMA_Abort_IT+0x290>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a17      	ldr	r2, [pc, #92]	; (8002854 <HAL_DMA_Abort_IT+0x294>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a16      	ldr	r2, [pc, #88]	; (8002858 <HAL_DMA_Abort_IT+0x298>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_Abort_IT+0x24e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_DMA_Abort_IT+0x29c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d128      	bne.n	8002860 <HAL_DMA_Abort_IT+0x2a0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e027      	b.n	8002870 <HAL_DMA_Abort_IT+0x2b0>
 8002820:	40020010 	.word	0x40020010
 8002824:	40020028 	.word	0x40020028
 8002828:	40020040 	.word	0x40020040
 800282c:	40020058 	.word	0x40020058
 8002830:	40020070 	.word	0x40020070
 8002834:	40020088 	.word	0x40020088
 8002838:	400200a0 	.word	0x400200a0
 800283c:	400200b8 	.word	0x400200b8
 8002840:	40020410 	.word	0x40020410
 8002844:	40020428 	.word	0x40020428
 8002848:	40020440 	.word	0x40020440
 800284c:	40020458 	.word	0x40020458
 8002850:	40020470 	.word	0x40020470
 8002854:	40020488 	.word	0x40020488
 8002858:	400204a0 	.word	0x400204a0
 800285c:	400204b8 	.word	0x400204b8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <HAL_DMA_Abort_IT+0x428>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d072      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5b      	ldr	r2, [pc, #364]	; (80029ec <HAL_DMA_Abort_IT+0x42c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d06d      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a59      	ldr	r2, [pc, #356]	; (80029f0 <HAL_DMA_Abort_IT+0x430>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d068      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_DMA_Abort_IT+0x434>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d063      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_DMA_Abort_IT+0x438>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d05e      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a55      	ldr	r2, [pc, #340]	; (80029fc <HAL_DMA_Abort_IT+0x43c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d059      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a53      	ldr	r2, [pc, #332]	; (8002a00 <HAL_DMA_Abort_IT+0x440>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d054      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_DMA_Abort_IT+0x444>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04f      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a50      	ldr	r2, [pc, #320]	; (8002a08 <HAL_DMA_Abort_IT+0x448>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04a      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a4f      	ldr	r2, [pc, #316]	; (8002a0c <HAL_DMA_Abort_IT+0x44c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d045      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a4d      	ldr	r2, [pc, #308]	; (8002a10 <HAL_DMA_Abort_IT+0x450>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d040      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <HAL_DMA_Abort_IT+0x454>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d03b      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <HAL_DMA_Abort_IT+0x458>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d036      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a49      	ldr	r2, [pc, #292]	; (8002a1c <HAL_DMA_Abort_IT+0x45c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d031      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a47      	ldr	r2, [pc, #284]	; (8002a20 <HAL_DMA_Abort_IT+0x460>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02c      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a46      	ldr	r2, [pc, #280]	; (8002a24 <HAL_DMA_Abort_IT+0x464>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d027      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a44      	ldr	r2, [pc, #272]	; (8002a28 <HAL_DMA_Abort_IT+0x468>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a43      	ldr	r2, [pc, #268]	; (8002a2c <HAL_DMA_Abort_IT+0x46c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d01d      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a41      	ldr	r2, [pc, #260]	; (8002a30 <HAL_DMA_Abort_IT+0x470>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <HAL_DMA_Abort_IT+0x474>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a3e      	ldr	r2, [pc, #248]	; (8002a38 <HAL_DMA_Abort_IT+0x478>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a3d      	ldr	r2, [pc, #244]	; (8002a3c <HAL_DMA_Abort_IT+0x47c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3b      	ldr	r2, [pc, #236]	; (8002a40 <HAL_DMA_Abort_IT+0x480>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_DMA_Abort_IT+0x3a0>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a3a      	ldr	r2, [pc, #232]	; (8002a44 <HAL_DMA_Abort_IT+0x484>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_DMA_Abort_IT+0x3a4>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_DMA_Abort_IT+0x3a6>
 8002964:	2300      	movs	r3, #0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d028      	beq.n	80029bc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002978:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002998:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40020010 	.word	0x40020010
 80029ec:	40020028 	.word	0x40020028
 80029f0:	40020040 	.word	0x40020040
 80029f4:	40020058 	.word	0x40020058
 80029f8:	40020070 	.word	0x40020070
 80029fc:	40020088 	.word	0x40020088
 8002a00:	400200a0 	.word	0x400200a0
 8002a04:	400200b8 	.word	0x400200b8
 8002a08:	40020410 	.word	0x40020410
 8002a0c:	40020428 	.word	0x40020428
 8002a10:	40020440 	.word	0x40020440
 8002a14:	40020458 	.word	0x40020458
 8002a18:	40020470 	.word	0x40020470
 8002a1c:	40020488 	.word	0x40020488
 8002a20:	400204a0 	.word	0x400204a0
 8002a24:	400204b8 	.word	0x400204b8
 8002a28:	58025408 	.word	0x58025408
 8002a2c:	5802541c 	.word	0x5802541c
 8002a30:	58025430 	.word	0x58025430
 8002a34:	58025444 	.word	0x58025444
 8002a38:	58025458 	.word	0x58025458
 8002a3c:	5802546c 	.word	0x5802546c
 8002a40:	58025480 	.word	0x58025480
 8002a44:	58025494 	.word	0x58025494

08002a48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a54:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <HAL_DMA_IRQHandler+0x1ac>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a67      	ldr	r2, [pc, #412]	; (8002bf8 <HAL_DMA_IRQHandler+0x1b0>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0a9b      	lsrs	r3, r3, #10
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a5f      	ldr	r2, [pc, #380]	; (8002bfc <HAL_DMA_IRQHandler+0x1b4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04a      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a5d      	ldr	r2, [pc, #372]	; (8002c00 <HAL_DMA_IRQHandler+0x1b8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d045      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5c      	ldr	r2, [pc, #368]	; (8002c04 <HAL_DMA_IRQHandler+0x1bc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d040      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5a      	ldr	r2, [pc, #360]	; (8002c08 <HAL_DMA_IRQHandler+0x1c0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d03b      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a59      	ldr	r2, [pc, #356]	; (8002c0c <HAL_DMA_IRQHandler+0x1c4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d036      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <HAL_DMA_IRQHandler+0x1c8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d031      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a56      	ldr	r2, [pc, #344]	; (8002c14 <HAL_DMA_IRQHandler+0x1cc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d02c      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_DMA_IRQHandler+0x1d0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d027      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <HAL_DMA_IRQHandler+0x1d4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d022      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a51      	ldr	r2, [pc, #324]	; (8002c20 <HAL_DMA_IRQHandler+0x1d8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01d      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a50      	ldr	r2, [pc, #320]	; (8002c24 <HAL_DMA_IRQHandler+0x1dc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d018      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a4e      	ldr	r2, [pc, #312]	; (8002c28 <HAL_DMA_IRQHandler+0x1e0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4d      	ldr	r2, [pc, #308]	; (8002c2c <HAL_DMA_IRQHandler+0x1e4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <HAL_DMA_IRQHandler+0x1e8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4a      	ldr	r2, [pc, #296]	; (8002c34 <HAL_DMA_IRQHandler+0x1ec>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xd2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a48      	ldr	r2, [pc, #288]	; (8002c38 <HAL_DMA_IRQHandler+0x1f0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_IRQHandler+0xd6>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_IRQHandler+0xd8>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 842b 	beq.w	800337c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2208      	movs	r2, #8
 8002b30:	409a      	lsls	r2, r3
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80a2 	beq.w	8002c80 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <HAL_DMA_IRQHandler+0x1b4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04a      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a2d      	ldr	r2, [pc, #180]	; (8002c00 <HAL_DMA_IRQHandler+0x1b8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d045      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2b      	ldr	r2, [pc, #172]	; (8002c04 <HAL_DMA_IRQHandler+0x1bc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d040      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2a      	ldr	r2, [pc, #168]	; (8002c08 <HAL_DMA_IRQHandler+0x1c0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d03b      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a28      	ldr	r2, [pc, #160]	; (8002c0c <HAL_DMA_IRQHandler+0x1c4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d036      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_DMA_IRQHandler+0x1c8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d031      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <HAL_DMA_IRQHandler+0x1cc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d02c      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <HAL_DMA_IRQHandler+0x1d0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d027      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <HAL_DMA_IRQHandler+0x1d4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <HAL_DMA_IRQHandler+0x1d8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d01d      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_DMA_IRQHandler+0x1dc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_DMA_IRQHandler+0x1e0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_DMA_IRQHandler+0x1e4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_DMA_IRQHandler+0x1e8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <HAL_DMA_IRQHandler+0x1ec>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x194>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_DMA_IRQHandler+0x1f0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d12f      	bne.n	8002c3c <HAL_DMA_IRQHandler+0x1f4>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	e02e      	b.n	8002c50 <HAL_DMA_IRQHandler+0x208>
 8002bf2:	bf00      	nop
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	1b4e81b5 	.word	0x1b4e81b5
 8002bfc:	40020010 	.word	0x40020010
 8002c00:	40020028 	.word	0x40020028
 8002c04:	40020040 	.word	0x40020040
 8002c08:	40020058 	.word	0x40020058
 8002c0c:	40020070 	.word	0x40020070
 8002c10:	40020088 	.word	0x40020088
 8002c14:	400200a0 	.word	0x400200a0
 8002c18:	400200b8 	.word	0x400200b8
 8002c1c:	40020410 	.word	0x40020410
 8002c20:	40020428 	.word	0x40020428
 8002c24:	40020440 	.word	0x40020440
 8002c28:	40020458 	.word	0x40020458
 8002c2c:	40020470 	.word	0x40020470
 8002c30:	40020488 	.word	0x40020488
 8002c34:	400204a0 	.word	0x400204a0
 8002c38:	400204b8 	.word	0x400204b8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	f022 0204 	bic.w	r2, r2, #4
 8002c62:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d06e      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a69      	ldr	r2, [pc, #420]	; (8002e40 <HAL_DMA_IRQHandler+0x3f8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d04a      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a67      	ldr	r2, [pc, #412]	; (8002e44 <HAL_DMA_IRQHandler+0x3fc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d045      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a66      	ldr	r2, [pc, #408]	; (8002e48 <HAL_DMA_IRQHandler+0x400>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d040      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a64      	ldr	r2, [pc, #400]	; (8002e4c <HAL_DMA_IRQHandler+0x404>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d03b      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a63      	ldr	r2, [pc, #396]	; (8002e50 <HAL_DMA_IRQHandler+0x408>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d036      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a61      	ldr	r2, [pc, #388]	; (8002e54 <HAL_DMA_IRQHandler+0x40c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d031      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a60      	ldr	r2, [pc, #384]	; (8002e58 <HAL_DMA_IRQHandler+0x410>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d02c      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a5e      	ldr	r2, [pc, #376]	; (8002e5c <HAL_DMA_IRQHandler+0x414>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d027      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a5d      	ldr	r2, [pc, #372]	; (8002e60 <HAL_DMA_IRQHandler+0x418>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d022      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5b      	ldr	r2, [pc, #364]	; (8002e64 <HAL_DMA_IRQHandler+0x41c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01d      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5a      	ldr	r2, [pc, #360]	; (8002e68 <HAL_DMA_IRQHandler+0x420>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d018      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_DMA_IRQHandler+0x424>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a57      	ldr	r2, [pc, #348]	; (8002e70 <HAL_DMA_IRQHandler+0x428>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00e      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a55      	ldr	r2, [pc, #340]	; (8002e74 <HAL_DMA_IRQHandler+0x42c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d009      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a54      	ldr	r2, [pc, #336]	; (8002e78 <HAL_DMA_IRQHandler+0x430>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2ee>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_DMA_IRQHandler+0x434>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10a      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x304>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e003      	b.n	8002d54 <HAL_DMA_IRQHandler+0x30c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00d      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2201      	movs	r2, #1
 8002d62:	409a      	lsls	r2, r3
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0202 	orr.w	r2, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 808f 	beq.w	8002ea8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <HAL_DMA_IRQHandler+0x3f8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d04a      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <HAL_DMA_IRQHandler+0x3fc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d045      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <HAL_DMA_IRQHandler+0x400>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d040      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <HAL_DMA_IRQHandler+0x404>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d03b      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <HAL_DMA_IRQHandler+0x408>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d036      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_DMA_IRQHandler+0x40c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d031      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <HAL_DMA_IRQHandler+0x410>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d02c      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_DMA_IRQHandler+0x414>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d027      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <HAL_DMA_IRQHandler+0x418>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d022      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_DMA_IRQHandler+0x41c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01d      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_DMA_IRQHandler+0x420>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d018      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_DMA_IRQHandler+0x424>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_DMA_IRQHandler+0x428>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_DMA_IRQHandler+0x42c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_DMA_IRQHandler+0x430>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x3e2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <HAL_DMA_IRQHandler+0x434>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d12a      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x438>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e023      	b.n	8002e88 <HAL_DMA_IRQHandler+0x440>
 8002e40:	40020010 	.word	0x40020010
 8002e44:	40020028 	.word	0x40020028
 8002e48:	40020040 	.word	0x40020040
 8002e4c:	40020058 	.word	0x40020058
 8002e50:	40020070 	.word	0x40020070
 8002e54:	40020088 	.word	0x40020088
 8002e58:	400200a0 	.word	0x400200a0
 8002e5c:	400200b8 	.word	0x400200b8
 8002e60:	40020410 	.word	0x40020410
 8002e64:	40020428 	.word	0x40020428
 8002e68:	40020440 	.word	0x40020440
 8002e6c:	40020458 	.word	0x40020458
 8002e70:	40020470 	.word	0x40020470
 8002e74:	40020488 	.word	0x40020488
 8002e78:	400204a0 	.word	0x400204a0
 8002e7c:	400204b8 	.word	0x400204b8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	2204      	movs	r2, #4
 8002e96:	409a      	lsls	r2, r3
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	f043 0204 	orr.w	r2, r3, #4
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a6 	beq.w	800300a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a85      	ldr	r2, [pc, #532]	; (80030d8 <HAL_DMA_IRQHandler+0x690>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04a      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a83      	ldr	r2, [pc, #524]	; (80030dc <HAL_DMA_IRQHandler+0x694>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d045      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a82      	ldr	r2, [pc, #520]	; (80030e0 <HAL_DMA_IRQHandler+0x698>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d040      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a80      	ldr	r2, [pc, #512]	; (80030e4 <HAL_DMA_IRQHandler+0x69c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d03b      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7f      	ldr	r2, [pc, #508]	; (80030e8 <HAL_DMA_IRQHandler+0x6a0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d036      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7d      	ldr	r2, [pc, #500]	; (80030ec <HAL_DMA_IRQHandler+0x6a4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d031      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_DMA_IRQHandler+0x6a8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d02c      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a7a      	ldr	r2, [pc, #488]	; (80030f4 <HAL_DMA_IRQHandler+0x6ac>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d027      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a79      	ldr	r2, [pc, #484]	; (80030f8 <HAL_DMA_IRQHandler+0x6b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a77      	ldr	r2, [pc, #476]	; (80030fc <HAL_DMA_IRQHandler+0x6b4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01d      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a76      	ldr	r2, [pc, #472]	; (8003100 <HAL_DMA_IRQHandler+0x6b8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d018      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a74      	ldr	r2, [pc, #464]	; (8003104 <HAL_DMA_IRQHandler+0x6bc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a73      	ldr	r2, [pc, #460]	; (8003108 <HAL_DMA_IRQHandler+0x6c0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a71      	ldr	r2, [pc, #452]	; (800310c <HAL_DMA_IRQHandler+0x6c4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a70      	ldr	r2, [pc, #448]	; (8003110 <HAL_DMA_IRQHandler+0x6c8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x516>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6e      	ldr	r2, [pc, #440]	; (8003114 <HAL_DMA_IRQHandler+0x6cc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10a      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x52c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e009      	b.n	8002f88 <HAL_DMA_IRQHandler+0x540>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d03e      	beq.n	800300a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	2210      	movs	r2, #16
 8002f96:	409a      	lsls	r2, r3
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d108      	bne.n	8002fca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d024      	beq.n	800300a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
 8002fc8:	e01f      	b.n	800300a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01b      	beq.n	800300a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
 8002fda:	e016      	b.n	800300a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	f022 0208 	bic.w	r2, r2, #8
 8002ff8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2220      	movs	r2, #32
 8003014:	409a      	lsls	r2, r3
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8110 	beq.w	8003240 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2c      	ldr	r2, [pc, #176]	; (80030d8 <HAL_DMA_IRQHandler+0x690>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d04a      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <HAL_DMA_IRQHandler+0x694>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d045      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <HAL_DMA_IRQHandler+0x698>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d040      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <HAL_DMA_IRQHandler+0x69c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d03b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a26      	ldr	r2, [pc, #152]	; (80030e8 <HAL_DMA_IRQHandler+0x6a0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d036      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a25      	ldr	r2, [pc, #148]	; (80030ec <HAL_DMA_IRQHandler+0x6a4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02c      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a22      	ldr	r2, [pc, #136]	; (80030f4 <HAL_DMA_IRQHandler+0x6ac>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d027      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a20      	ldr	r2, [pc, #128]	; (80030f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1f      	ldr	r2, [pc, #124]	; (80030fc <HAL_DMA_IRQHandler+0x6b4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01d      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_DMA_IRQHandler+0x6b8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <HAL_DMA_IRQHandler+0x6bc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <HAL_DMA_IRQHandler+0x6c0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a19      	ldr	r2, [pc, #100]	; (800310c <HAL_DMA_IRQHandler+0x6c4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a17      	ldr	r2, [pc, #92]	; (8003110 <HAL_DMA_IRQHandler+0x6c8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x678>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a16      	ldr	r2, [pc, #88]	; (8003114 <HAL_DMA_IRQHandler+0x6cc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d12b      	bne.n	8003118 <HAL_DMA_IRQHandler+0x6d0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e02a      	b.n	800312c <HAL_DMA_IRQHandler+0x6e4>
 80030d6:	bf00      	nop
 80030d8:	40020010 	.word	0x40020010
 80030dc:	40020028 	.word	0x40020028
 80030e0:	40020040 	.word	0x40020040
 80030e4:	40020058 	.word	0x40020058
 80030e8:	40020070 	.word	0x40020070
 80030ec:	40020088 	.word	0x40020088
 80030f0:	400200a0 	.word	0x400200a0
 80030f4:	400200b8 	.word	0x400200b8
 80030f8:	40020410 	.word	0x40020410
 80030fc:	40020428 	.word	0x40020428
 8003100:	40020440 	.word	0x40020440
 8003104:	40020458 	.word	0x40020458
 8003108:	40020470 	.word	0x40020470
 800310c:	40020488 	.word	0x40020488
 8003110:	400204a0 	.word	0x400204a0
 8003114:	400204b8 	.word	0x400204b8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8087 	beq.w	8003240 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2220      	movs	r2, #32
 800313c:	409a      	lsls	r2, r3
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b04      	cmp	r3, #4
 800314c:	d139      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	f022 0216 	bic.w	r2, r2, #22
 800315c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	6952      	ldr	r2, [r2, #20]
 8003168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HAL_DMA_IRQHandler+0x736>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	f022 0208 	bic.w	r2, r2, #8
 800318c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	223f      	movs	r2, #63	; 0x3f
 8003198:	409a      	lsls	r2, r3
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 834a 	beq.w	800384c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
          }
          return;
 80031c0:	e344      	b.n	800384c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d018      	beq.n	8003202 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02c      	beq.n	8003240 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
 80031ee:	e027      	b.n	8003240 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d023      	beq.n	8003240 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
 8003200:	e01e      	b.n	8003240 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10f      	bne.n	8003230 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	f022 0210 	bic.w	r2, r2, #16
 800321e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8306 	beq.w	8003856 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8088 	beq.w	8003368 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2204      	movs	r2, #4
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7a      	ldr	r2, [pc, #488]	; (8003450 <HAL_DMA_IRQHandler+0xa08>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d04a      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a79      	ldr	r2, [pc, #484]	; (8003454 <HAL_DMA_IRQHandler+0xa0c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d045      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a77      	ldr	r2, [pc, #476]	; (8003458 <HAL_DMA_IRQHandler+0xa10>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d040      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a76      	ldr	r2, [pc, #472]	; (800345c <HAL_DMA_IRQHandler+0xa14>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d03b      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a74      	ldr	r2, [pc, #464]	; (8003460 <HAL_DMA_IRQHandler+0xa18>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d036      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a73      	ldr	r2, [pc, #460]	; (8003464 <HAL_DMA_IRQHandler+0xa1c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d031      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a71      	ldr	r2, [pc, #452]	; (8003468 <HAL_DMA_IRQHandler+0xa20>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02c      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a70      	ldr	r2, [pc, #448]	; (800346c <HAL_DMA_IRQHandler+0xa24>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d027      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_DMA_IRQHandler+0xa28>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d022      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6d      	ldr	r2, [pc, #436]	; (8003474 <HAL_DMA_IRQHandler+0xa2c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d01d      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6b      	ldr	r2, [pc, #428]	; (8003478 <HAL_DMA_IRQHandler+0xa30>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d018      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_DMA_IRQHandler+0xa34>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a68      	ldr	r2, [pc, #416]	; (8003480 <HAL_DMA_IRQHandler+0xa38>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00e      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a67      	ldr	r2, [pc, #412]	; (8003484 <HAL_DMA_IRQHandler+0xa3c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d009      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_DMA_IRQHandler+0xa40>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_DMA_IRQHandler+0x8b8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a64      	ldr	r2, [pc, #400]	; (800348c <HAL_DMA_IRQHandler+0xa44>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <HAL_DMA_IRQHandler+0x8ca>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e007      	b.n	8003322 <HAL_DMA_IRQHandler+0x8da>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3301      	adds	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332a:	4293      	cmp	r3, r2
 800332c:	d807      	bhi.n	800333e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f2      	bne.n	8003322 <HAL_DMA_IRQHandler+0x8da>
 800333c:	e000      	b.n	8003340 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800333e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003356:	e003      	b.n	8003360 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8272 	beq.w	8003856 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
 800337a:	e26c      	b.n	8003856 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a43      	ldr	r2, [pc, #268]	; (8003490 <HAL_DMA_IRQHandler+0xa48>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d022      	beq.n	80033cc <HAL_DMA_IRQHandler+0x984>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_DMA_IRQHandler+0xa4c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d01d      	beq.n	80033cc <HAL_DMA_IRQHandler+0x984>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a40      	ldr	r2, [pc, #256]	; (8003498 <HAL_DMA_IRQHandler+0xa50>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d018      	beq.n	80033cc <HAL_DMA_IRQHandler+0x984>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3f      	ldr	r2, [pc, #252]	; (800349c <HAL_DMA_IRQHandler+0xa54>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <HAL_DMA_IRQHandler+0x984>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a3d      	ldr	r2, [pc, #244]	; (80034a0 <HAL_DMA_IRQHandler+0xa58>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00e      	beq.n	80033cc <HAL_DMA_IRQHandler+0x984>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a3c      	ldr	r2, [pc, #240]	; (80034a4 <HAL_DMA_IRQHandler+0xa5c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d009      	beq.n	80033cc <HAL_DMA_IRQHandler+0x984>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a3a      	ldr	r2, [pc, #232]	; (80034a8 <HAL_DMA_IRQHandler+0xa60>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_DMA_IRQHandler+0x984>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a39      	ldr	r2, [pc, #228]	; (80034ac <HAL_DMA_IRQHandler+0xa64>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x988>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_DMA_IRQHandler+0x98a>
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 823f 	beq.w	8003856 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2204      	movs	r2, #4
 80033ea:	409a      	lsls	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80cd 	beq.w	8003590 <HAL_DMA_IRQHandler+0xb48>
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80c7 	beq.w	8003590 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2204      	movs	r2, #4
 800340c:	409a      	lsls	r2, r3
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d049      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8210 	beq.w	8003850 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003438:	e20a      	b.n	8003850 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8206 	beq.w	8003850 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800344c:	e200      	b.n	8003850 <HAL_DMA_IRQHandler+0xe08>
 800344e:	bf00      	nop
 8003450:	40020010 	.word	0x40020010
 8003454:	40020028 	.word	0x40020028
 8003458:	40020040 	.word	0x40020040
 800345c:	40020058 	.word	0x40020058
 8003460:	40020070 	.word	0x40020070
 8003464:	40020088 	.word	0x40020088
 8003468:	400200a0 	.word	0x400200a0
 800346c:	400200b8 	.word	0x400200b8
 8003470:	40020410 	.word	0x40020410
 8003474:	40020428 	.word	0x40020428
 8003478:	40020440 	.word	0x40020440
 800347c:	40020458 	.word	0x40020458
 8003480:	40020470 	.word	0x40020470
 8003484:	40020488 	.word	0x40020488
 8003488:	400204a0 	.word	0x400204a0
 800348c:	400204b8 	.word	0x400204b8
 8003490:	58025408 	.word	0x58025408
 8003494:	5802541c 	.word	0x5802541c
 8003498:	58025430 	.word	0x58025430
 800349c:	58025444 	.word	0x58025444
 80034a0:	58025458 	.word	0x58025458
 80034a4:	5802546c 	.word	0x5802546c
 80034a8:	58025480 	.word	0x58025480
 80034ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d160      	bne.n	800357c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a8c      	ldr	r2, [pc, #560]	; (80036f0 <HAL_DMA_IRQHandler+0xca8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d04a      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a8a      	ldr	r2, [pc, #552]	; (80036f4 <HAL_DMA_IRQHandler+0xcac>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d045      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a89      	ldr	r2, [pc, #548]	; (80036f8 <HAL_DMA_IRQHandler+0xcb0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d040      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a87      	ldr	r2, [pc, #540]	; (80036fc <HAL_DMA_IRQHandler+0xcb4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d03b      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a86      	ldr	r2, [pc, #536]	; (8003700 <HAL_DMA_IRQHandler+0xcb8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d036      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a84      	ldr	r2, [pc, #528]	; (8003704 <HAL_DMA_IRQHandler+0xcbc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d031      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a83      	ldr	r2, [pc, #524]	; (8003708 <HAL_DMA_IRQHandler+0xcc0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d02c      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a81      	ldr	r2, [pc, #516]	; (800370c <HAL_DMA_IRQHandler+0xcc4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d027      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a80      	ldr	r2, [pc, #512]	; (8003710 <HAL_DMA_IRQHandler+0xcc8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d022      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a7e      	ldr	r2, [pc, #504]	; (8003714 <HAL_DMA_IRQHandler+0xccc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01d      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a7d      	ldr	r2, [pc, #500]	; (8003718 <HAL_DMA_IRQHandler+0xcd0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d018      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a7b      	ldr	r2, [pc, #492]	; (800371c <HAL_DMA_IRQHandler+0xcd4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7a      	ldr	r2, [pc, #488]	; (8003720 <HAL_DMA_IRQHandler+0xcd8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a78      	ldr	r2, [pc, #480]	; (8003724 <HAL_DMA_IRQHandler+0xcdc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a77      	ldr	r2, [pc, #476]	; (8003728 <HAL_DMA_IRQHandler+0xce0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_DMA_IRQHandler+0xb12>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a75      	ldr	r2, [pc, #468]	; (800372c <HAL_DMA_IRQHandler+0xce4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <HAL_DMA_IRQHandler+0xb24>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	f022 0208 	bic.w	r2, r2, #8
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e007      	b.n	800357c <HAL_DMA_IRQHandler+0xb34>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8165 	beq.w	8003850 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800358e:	e15f      	b.n	8003850 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2202      	movs	r2, #2
 800359a:	409a      	lsls	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80c5 	beq.w	8003730 <HAL_DMA_IRQHandler+0xce8>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80bf 	beq.w	8003730 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2202      	movs	r2, #2
 80035bc:	409a      	lsls	r2, r3
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 813a 	beq.w	8003854 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035e8:	e134      	b.n	8003854 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8130 	beq.w	8003854 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035fc:	e12a      	b.n	8003854 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d168      	bne.n	80036da <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a38      	ldr	r2, [pc, #224]	; (80036f0 <HAL_DMA_IRQHandler+0xca8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04a      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a37      	ldr	r2, [pc, #220]	; (80036f4 <HAL_DMA_IRQHandler+0xcac>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d045      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <HAL_DMA_IRQHandler+0xcb0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d040      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a34      	ldr	r2, [pc, #208]	; (80036fc <HAL_DMA_IRQHandler+0xcb4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d03b      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a32      	ldr	r2, [pc, #200]	; (8003700 <HAL_DMA_IRQHandler+0xcb8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d036      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a31      	ldr	r2, [pc, #196]	; (8003704 <HAL_DMA_IRQHandler+0xcbc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d031      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <HAL_DMA_IRQHandler+0xcc0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02c      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2e      	ldr	r2, [pc, #184]	; (800370c <HAL_DMA_IRQHandler+0xcc4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d027      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a2c      	ldr	r2, [pc, #176]	; (8003710 <HAL_DMA_IRQHandler+0xcc8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a2b      	ldr	r2, [pc, #172]	; (8003714 <HAL_DMA_IRQHandler+0xccc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01d      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a29      	ldr	r2, [pc, #164]	; (8003718 <HAL_DMA_IRQHandler+0xcd0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a28      	ldr	r2, [pc, #160]	; (800371c <HAL_DMA_IRQHandler+0xcd4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a26      	ldr	r2, [pc, #152]	; (8003720 <HAL_DMA_IRQHandler+0xcd8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a25      	ldr	r2, [pc, #148]	; (8003724 <HAL_DMA_IRQHandler+0xcdc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a23      	ldr	r2, [pc, #140]	; (8003728 <HAL_DMA_IRQHandler+0xce0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xc60>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a22      	ldr	r2, [pc, #136]	; (800372c <HAL_DMA_IRQHandler+0xce4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <HAL_DMA_IRQHandler+0xc72>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	f022 0214 	bic.w	r2, r2, #20
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e007      	b.n	80036ca <HAL_DMA_IRQHandler+0xc82>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	f022 020a 	bic.w	r2, r2, #10
 80036c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80b8 	beq.w	8003854 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ec:	e0b2      	b.n	8003854 <HAL_DMA_IRQHandler+0xe0c>
 80036ee:	bf00      	nop
 80036f0:	40020010 	.word	0x40020010
 80036f4:	40020028 	.word	0x40020028
 80036f8:	40020040 	.word	0x40020040
 80036fc:	40020058 	.word	0x40020058
 8003700:	40020070 	.word	0x40020070
 8003704:	40020088 	.word	0x40020088
 8003708:	400200a0 	.word	0x400200a0
 800370c:	400200b8 	.word	0x400200b8
 8003710:	40020410 	.word	0x40020410
 8003714:	40020428 	.word	0x40020428
 8003718:	40020440 	.word	0x40020440
 800371c:	40020458 	.word	0x40020458
 8003720:	40020470 	.word	0x40020470
 8003724:	40020488 	.word	0x40020488
 8003728:	400204a0 	.word	0x400204a0
 800372c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2208      	movs	r2, #8
 800373a:	409a      	lsls	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8088 	beq.w	8003856 <HAL_DMA_IRQHandler+0xe0e>
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8082 	beq.w	8003856 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a41      	ldr	r2, [pc, #260]	; (800385c <HAL_DMA_IRQHandler+0xe14>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d04a      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a3f      	ldr	r2, [pc, #252]	; (8003860 <HAL_DMA_IRQHandler+0xe18>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3e      	ldr	r2, [pc, #248]	; (8003864 <HAL_DMA_IRQHandler+0xe1c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d040      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3c      	ldr	r2, [pc, #240]	; (8003868 <HAL_DMA_IRQHandler+0xe20>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03b      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3b      	ldr	r2, [pc, #236]	; (800386c <HAL_DMA_IRQHandler+0xe24>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d036      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a39      	ldr	r2, [pc, #228]	; (8003870 <HAL_DMA_IRQHandler+0xe28>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a38      	ldr	r2, [pc, #224]	; (8003874 <HAL_DMA_IRQHandler+0xe2c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02c      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a36      	ldr	r2, [pc, #216]	; (8003878 <HAL_DMA_IRQHandler+0xe30>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a35      	ldr	r2, [pc, #212]	; (800387c <HAL_DMA_IRQHandler+0xe34>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a33      	ldr	r2, [pc, #204]	; (8003880 <HAL_DMA_IRQHandler+0xe38>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a32      	ldr	r2, [pc, #200]	; (8003884 <HAL_DMA_IRQHandler+0xe3c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a30      	ldr	r2, [pc, #192]	; (8003888 <HAL_DMA_IRQHandler+0xe40>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2f      	ldr	r2, [pc, #188]	; (800388c <HAL_DMA_IRQHandler+0xe44>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2d      	ldr	r2, [pc, #180]	; (8003890 <HAL_DMA_IRQHandler+0xe48>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <HAL_DMA_IRQHandler+0xe4c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xdaa>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2a      	ldr	r2, [pc, #168]	; (8003898 <HAL_DMA_IRQHandler+0xe50>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d108      	bne.n	8003804 <HAL_DMA_IRQHandler+0xdbc>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	f022 021c 	bic.w	r2, r2, #28
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e007      	b.n	8003814 <HAL_DMA_IRQHandler+0xdcc>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	f022 020e 	bic.w	r2, r2, #14
 8003812:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	2201      	movs	r2, #1
 800381e:	409a      	lsls	r2, r3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
 800384a:	e004      	b.n	8003856 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800384c:	bf00      	nop
 800384e:	e002      	b.n	8003856 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003854:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003856:	3728      	adds	r7, #40	; 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40020010 	.word	0x40020010
 8003860:	40020028 	.word	0x40020028
 8003864:	40020040 	.word	0x40020040
 8003868:	40020058 	.word	0x40020058
 800386c:	40020070 	.word	0x40020070
 8003870:	40020088 	.word	0x40020088
 8003874:	400200a0 	.word	0x400200a0
 8003878:	400200b8 	.word	0x400200b8
 800387c:	40020410 	.word	0x40020410
 8003880:	40020428 	.word	0x40020428
 8003884:	40020440 	.word	0x40020440
 8003888:	40020458 	.word	0x40020458
 800388c:	40020470 	.word	0x40020470
 8003890:	40020488 	.word	0x40020488
 8003894:	400204a0 	.word	0x400204a0
 8003898:	400204b8 	.word	0x400204b8

0800389c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a84      	ldr	r2, [pc, #528]	; (8003acc <DMA_SetConfig+0x230>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d072      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a82      	ldr	r2, [pc, #520]	; (8003ad0 <DMA_SetConfig+0x234>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d06d      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a81      	ldr	r2, [pc, #516]	; (8003ad4 <DMA_SetConfig+0x238>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d068      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a7f      	ldr	r2, [pc, #508]	; (8003ad8 <DMA_SetConfig+0x23c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d063      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a7e      	ldr	r2, [pc, #504]	; (8003adc <DMA_SetConfig+0x240>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d05e      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7c      	ldr	r2, [pc, #496]	; (8003ae0 <DMA_SetConfig+0x244>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d059      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7b      	ldr	r2, [pc, #492]	; (8003ae4 <DMA_SetConfig+0x248>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d054      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a79      	ldr	r2, [pc, #484]	; (8003ae8 <DMA_SetConfig+0x24c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d04f      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a78      	ldr	r2, [pc, #480]	; (8003aec <DMA_SetConfig+0x250>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d04a      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a76      	ldr	r2, [pc, #472]	; (8003af0 <DMA_SetConfig+0x254>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d045      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	; (8003af4 <DMA_SetConfig+0x258>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d040      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a73      	ldr	r2, [pc, #460]	; (8003af8 <DMA_SetConfig+0x25c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d03b      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a72      	ldr	r2, [pc, #456]	; (8003afc <DMA_SetConfig+0x260>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d036      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a70      	ldr	r2, [pc, #448]	; (8003b00 <DMA_SetConfig+0x264>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d031      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6f      	ldr	r2, [pc, #444]	; (8003b04 <DMA_SetConfig+0x268>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d02c      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6d      	ldr	r2, [pc, #436]	; (8003b08 <DMA_SetConfig+0x26c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d027      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6c      	ldr	r2, [pc, #432]	; (8003b0c <DMA_SetConfig+0x270>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a6a      	ldr	r2, [pc, #424]	; (8003b10 <DMA_SetConfig+0x274>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01d      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a69      	ldr	r2, [pc, #420]	; (8003b14 <DMA_SetConfig+0x278>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a67      	ldr	r2, [pc, #412]	; (8003b18 <DMA_SetConfig+0x27c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a66      	ldr	r2, [pc, #408]	; (8003b1c <DMA_SetConfig+0x280>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a64      	ldr	r2, [pc, #400]	; (8003b20 <DMA_SetConfig+0x284>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a63      	ldr	r2, [pc, #396]	; (8003b24 <DMA_SetConfig+0x288>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <DMA_SetConfig+0x10a>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a61      	ldr	r2, [pc, #388]	; (8003b28 <DMA_SetConfig+0x28c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <DMA_SetConfig+0x10e>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <DMA_SetConfig+0x110>
 80039aa:	2300      	movs	r3, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a3e      	ldr	r2, [pc, #248]	; (8003acc <DMA_SetConfig+0x230>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d04a      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a3d      	ldr	r2, [pc, #244]	; (8003ad0 <DMA_SetConfig+0x234>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d045      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3b      	ldr	r2, [pc, #236]	; (8003ad4 <DMA_SetConfig+0x238>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d040      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3a      	ldr	r2, [pc, #232]	; (8003ad8 <DMA_SetConfig+0x23c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d03b      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a38      	ldr	r2, [pc, #224]	; (8003adc <DMA_SetConfig+0x240>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d036      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a37      	ldr	r2, [pc, #220]	; (8003ae0 <DMA_SetConfig+0x244>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d031      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a35      	ldr	r2, [pc, #212]	; (8003ae4 <DMA_SetConfig+0x248>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02c      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <DMA_SetConfig+0x24c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d027      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a32      	ldr	r2, [pc, #200]	; (8003aec <DMA_SetConfig+0x250>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d022      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a31      	ldr	r2, [pc, #196]	; (8003af0 <DMA_SetConfig+0x254>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d01d      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <DMA_SetConfig+0x258>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d018      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2e      	ldr	r2, [pc, #184]	; (8003af8 <DMA_SetConfig+0x25c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <DMA_SetConfig+0x260>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2b      	ldr	r2, [pc, #172]	; (8003b00 <DMA_SetConfig+0x264>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <DMA_SetConfig+0x268>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <DMA_SetConfig+0x1d0>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a28      	ldr	r2, [pc, #160]	; (8003b08 <DMA_SetConfig+0x26c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <DMA_SetConfig+0x1d4>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <DMA_SetConfig+0x1d6>
 8003a70:	2300      	movs	r3, #0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d05a      	beq.n	8003b2c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	223f      	movs	r2, #63	; 0x3f
 8003a80:	409a      	lsls	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d108      	bne.n	8003ab8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ab6:	e087      	b.n	8003bc8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
}
 8003ac8:	e07e      	b.n	8003bc8 <DMA_SetConfig+0x32c>
 8003aca:	bf00      	nop
 8003acc:	40020010 	.word	0x40020010
 8003ad0:	40020028 	.word	0x40020028
 8003ad4:	40020040 	.word	0x40020040
 8003ad8:	40020058 	.word	0x40020058
 8003adc:	40020070 	.word	0x40020070
 8003ae0:	40020088 	.word	0x40020088
 8003ae4:	400200a0 	.word	0x400200a0
 8003ae8:	400200b8 	.word	0x400200b8
 8003aec:	40020410 	.word	0x40020410
 8003af0:	40020428 	.word	0x40020428
 8003af4:	40020440 	.word	0x40020440
 8003af8:	40020458 	.word	0x40020458
 8003afc:	40020470 	.word	0x40020470
 8003b00:	40020488 	.word	0x40020488
 8003b04:	400204a0 	.word	0x400204a0
 8003b08:	400204b8 	.word	0x400204b8
 8003b0c:	58025408 	.word	0x58025408
 8003b10:	5802541c 	.word	0x5802541c
 8003b14:	58025430 	.word	0x58025430
 8003b18:	58025444 	.word	0x58025444
 8003b1c:	58025458 	.word	0x58025458
 8003b20:	5802546c 	.word	0x5802546c
 8003b24:	58025480 	.word	0x58025480
 8003b28:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <DMA_SetConfig+0x338>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d022      	beq.n	8003b7c <DMA_SetConfig+0x2e0>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <DMA_SetConfig+0x33c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d01d      	beq.n	8003b7c <DMA_SetConfig+0x2e0>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <DMA_SetConfig+0x340>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d018      	beq.n	8003b7c <DMA_SetConfig+0x2e0>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <DMA_SetConfig+0x344>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <DMA_SetConfig+0x2e0>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <DMA_SetConfig+0x348>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00e      	beq.n	8003b7c <DMA_SetConfig+0x2e0>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a21      	ldr	r2, [pc, #132]	; (8003be8 <DMA_SetConfig+0x34c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d009      	beq.n	8003b7c <DMA_SetConfig+0x2e0>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <DMA_SetConfig+0x350>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <DMA_SetConfig+0x2e0>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <DMA_SetConfig+0x354>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <DMA_SetConfig+0x2e4>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <DMA_SetConfig+0x2e6>
 8003b80:	2300      	movs	r3, #0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d020      	beq.n	8003bc8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2201      	movs	r2, #1
 8003b90:	409a      	lsls	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d108      	bne.n	8003bb8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
}
 8003bb6:	e007      	b.n	8003bc8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	58025408 	.word	0x58025408
 8003bd8:	5802541c 	.word	0x5802541c
 8003bdc:	58025430 	.word	0x58025430
 8003be0:	58025444 	.word	0x58025444
 8003be4:	58025458 	.word	0x58025458
 8003be8:	5802546c 	.word	0x5802546c
 8003bec:	58025480 	.word	0x58025480
 8003bf0:	58025494 	.word	0x58025494

08003bf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a42      	ldr	r2, [pc, #264]	; (8003d0c <DMA_CalcBaseAndBitshift+0x118>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d04a      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a41      	ldr	r2, [pc, #260]	; (8003d10 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d045      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a3f      	ldr	r2, [pc, #252]	; (8003d14 <DMA_CalcBaseAndBitshift+0x120>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d040      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a3e      	ldr	r2, [pc, #248]	; (8003d18 <DMA_CalcBaseAndBitshift+0x124>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d03b      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a3c      	ldr	r2, [pc, #240]	; (8003d1c <DMA_CalcBaseAndBitshift+0x128>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d036      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a3b      	ldr	r2, [pc, #236]	; (8003d20 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d031      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a39      	ldr	r2, [pc, #228]	; (8003d24 <DMA_CalcBaseAndBitshift+0x130>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02c      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a38      	ldr	r2, [pc, #224]	; (8003d28 <DMA_CalcBaseAndBitshift+0x134>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d027      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a36      	ldr	r2, [pc, #216]	; (8003d2c <DMA_CalcBaseAndBitshift+0x138>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d022      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a35      	ldr	r2, [pc, #212]	; (8003d30 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d01d      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a33      	ldr	r2, [pc, #204]	; (8003d34 <DMA_CalcBaseAndBitshift+0x140>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a32      	ldr	r2, [pc, #200]	; (8003d38 <DMA_CalcBaseAndBitshift+0x144>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d013      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a30      	ldr	r2, [pc, #192]	; (8003d3c <DMA_CalcBaseAndBitshift+0x148>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2d      	ldr	r2, [pc, #180]	; (8003d44 <DMA_CalcBaseAndBitshift+0x150>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <DMA_CalcBaseAndBitshift+0xa8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <DMA_CalcBaseAndBitshift+0x154>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <DMA_CalcBaseAndBitshift+0xac>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <DMA_CalcBaseAndBitshift+0xae>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d024      	beq.n	8003cf0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	3b10      	subs	r3, #16
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <DMA_CalcBaseAndBitshift+0x158>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	4a24      	ldr	r2, [pc, #144]	; (8003d50 <DMA_CalcBaseAndBitshift+0x15c>)
 8003cc0:	5cd3      	ldrb	r3, [r2, r3]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d908      	bls.n	8003ce0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <DMA_CalcBaseAndBitshift+0x160>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	1d1a      	adds	r2, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	659a      	str	r2, [r3, #88]	; 0x58
 8003cde:	e00d      	b.n	8003cfc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <DMA_CalcBaseAndBitshift+0x160>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6593      	str	r3, [r2, #88]	; 0x58
 8003cee:	e005      	b.n	8003cfc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40020010 	.word	0x40020010
 8003d10:	40020028 	.word	0x40020028
 8003d14:	40020040 	.word	0x40020040
 8003d18:	40020058 	.word	0x40020058
 8003d1c:	40020070 	.word	0x40020070
 8003d20:	40020088 	.word	0x40020088
 8003d24:	400200a0 	.word	0x400200a0
 8003d28:	400200b8 	.word	0x400200b8
 8003d2c:	40020410 	.word	0x40020410
 8003d30:	40020428 	.word	0x40020428
 8003d34:	40020440 	.word	0x40020440
 8003d38:	40020458 	.word	0x40020458
 8003d3c:	40020470 	.word	0x40020470
 8003d40:	40020488 	.word	0x40020488
 8003d44:	400204a0 	.word	0x400204a0
 8003d48:	400204b8 	.word	0x400204b8
 8003d4c:	aaaaaaab 	.word	0xaaaaaaab
 8003d50:	08009048 	.word	0x08009048
 8003d54:	fffffc00 	.word	0xfffffc00

08003d58 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d120      	bne.n	8003dae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d858      	bhi.n	8003e26 <DMA_CheckFifoParam+0xce>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <DMA_CheckFifoParam+0x24>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d9f 	.word	0x08003d9f
 8003d84:	08003d8d 	.word	0x08003d8d
 8003d88:	08003e27 	.word	0x08003e27
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d048      	beq.n	8003e2a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d9c:	e045      	b.n	8003e2a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003da6:	d142      	bne.n	8003e2e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dac:	e03f      	b.n	8003e2e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	d123      	bne.n	8003e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d838      	bhi.n	8003e32 <DMA_CheckFifoParam+0xda>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <DMA_CheckFifoParam+0x70>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003ddf 	.word	0x08003ddf
 8003dd0:	08003dd9 	.word	0x08003dd9
 8003dd4:	08003df1 	.word	0x08003df1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
        break;
 8003ddc:	e030      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d025      	beq.n	8003e36 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dee:	e022      	b.n	8003e36 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003df8:	d11f      	bne.n	8003e3a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dfe:	e01c      	b.n	8003e3a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d902      	bls.n	8003e0e <DMA_CheckFifoParam+0xb6>
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d003      	beq.n	8003e14 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e0c:	e018      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
        break;
 8003e12:	e015      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
    break;
 8003e24:	e00b      	b.n	8003e3e <DMA_CheckFifoParam+0xe6>
        break;
 8003e26:	bf00      	nop
 8003e28:	e00a      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e008      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
        break;
 8003e2e:	bf00      	nop
 8003e30:	e006      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
        break;
 8003e32:	bf00      	nop
 8003e34:	e004      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
        break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
    break;
 8003e3e:	bf00      	nop
    }
  }

  return status;
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a38      	ldr	r2, [pc, #224]	; (8003f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d022      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a36      	ldr	r2, [pc, #216]	; (8003f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01d      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d018      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a33      	ldr	r2, [pc, #204]	; (8003f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a32      	ldr	r2, [pc, #200]	; (8003f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a30      	ldr	r2, [pc, #192]	; (8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2f      	ldr	r2, [pc, #188]	; (8003f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01a      	beq.n	8003eee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	3b08      	subs	r3, #8
 8003ec0:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4b26      	ldr	r3, [pc, #152]	; (8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a24      	ldr	r2, [pc, #144]	; (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003eec:	e024      	b.n	8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	3b10      	subs	r3, #16
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d806      	bhi.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d902      	bls.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3308      	adds	r3, #8
 8003f14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	461a      	mov	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2201      	movs	r2, #1
 8003f32:	409a      	lsls	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	58025408 	.word	0x58025408
 8003f48:	5802541c 	.word	0x5802541c
 8003f4c:	58025430 	.word	0x58025430
 8003f50:	58025444 	.word	0x58025444
 8003f54:	58025458 	.word	0x58025458
 8003f58:	5802546c 	.word	0x5802546c
 8003f5c:	58025480 	.word	0x58025480
 8003f60:	58025494 	.word	0x58025494
 8003f64:	cccccccd 	.word	0xcccccccd
 8003f68:	16009600 	.word	0x16009600
 8003f6c:	58025880 	.word	0x58025880
 8003f70:	aaaaaaab 	.word	0xaaaaaaab
 8003f74:	400204b8 	.word	0x400204b8
 8003f78:	4002040f 	.word	0x4002040f
 8003f7c:	10008200 	.word	0x10008200
 8003f80:	40020880 	.word	0x40020880

08003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04a      	beq.n	8004030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d847      	bhi.n	8004030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a25      	ldr	r2, [pc, #148]	; (800403c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a24      	ldr	r2, [pc, #144]	; (8004040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a22      	ldr	r2, [pc, #136]	; (8004044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a21      	ldr	r2, [pc, #132]	; (8004048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	461a      	mov	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800400c:	671a      	str	r2, [r3, #112]	; 0x70
 800400e:	e009      	b.n	8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004022:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3b01      	subs	r3, #1
 8004028:	2201      	movs	r2, #1
 800402a:	409a      	lsls	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	58025408 	.word	0x58025408
 8004040:	5802541c 	.word	0x5802541c
 8004044:	58025430 	.word	0x58025430
 8004048:	58025444 	.word	0x58025444
 800404c:	58025458 	.word	0x58025458
 8004050:	5802546c 	.word	0x5802546c
 8004054:	58025480 	.word	0x58025480
 8004058:	58025494 	.word	0x58025494
 800405c:	1600963f 	.word	0x1600963f
 8004060:	58025940 	.word	0x58025940
 8004064:	1000823f 	.word	0x1000823f
 8004068:	40020940 	.word	0x40020940

0800406c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0cb      	b.n	8004216 <HAL_ETH_Init+0x1aa>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2223      	movs	r2, #35	; 0x23
 800408c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fc fd23 	bl	8000adc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004096:	4a62      	ldr	r2, [pc, #392]	; (8004220 <HAL_ETH_Init+0x1b4>)
 8004098:	4b61      	ldr	r3, [pc, #388]	; (8004220 <HAL_ETH_Init+0x1b4>)
 800409a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040a6:	4b5e      	ldr	r3, [pc, #376]	; (8004220 <HAL_ETH_Init+0x1b4>)
 80040a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7a1b      	ldrb	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80040bc:	2000      	movs	r0, #0
 80040be:	f7fd f801 	bl	80010c4 <HAL_SYSCFG_ETHInterfaceSelect>
 80040c2:	e003      	b.n	80040cc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80040c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80040c8:	f7fc fffc 	bl	80010c4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80040cc:	4b55      	ldr	r3, [pc, #340]	; (8004224 <HAL_ETH_Init+0x1b8>)
 80040ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e8:	f7fc ffb2 	bl	8001050 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040ee:	e011      	b.n	8004114 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040f0:	f7fc ffae 	bl	8001050 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040fe:	d909      	bls.n	8004114 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2204      	movs	r2, #4
 8004104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	22e0      	movs	r2, #224	; 0xe0
 800410c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e080      	b.n	8004216 <HAL_ETH_Init+0x1aa>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e4      	bne.n	80040f0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f882 	bl	8004230 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681c      	ldr	r4, [r3, #0]
 8004130:	f001 fd12 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <HAL_ETH_Init+0x1bc>)
 8004138:	fba3 2302 	umull	r2, r3, r3, r2
 800413c:	0c9b      	lsrs	r3, r3, #18
 800413e:	3b01      	subs	r3, #1
 8004140:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa6d 	bl	8004624 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	f502 5288 	add.w	r2, r2, #4352	; 0x1100
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 800415c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004160:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004164:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_ETH_Init+0x11a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	22e0      	movs	r2, #224	; 0xe0
 800417e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e047      	b.n	8004216 <HAL_ETH_Init+0x1aa>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6819      	ldr	r1, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004192:	4413      	add	r3, r2
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_ETH_Init+0x1c0>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6952      	ldr	r2, [r2, #20]
 800419e:	0052      	lsls	r2, r2, #1
 80041a0:	431a      	orrs	r2, r3
 80041a2:	f241 1308 	movw	r3, #4360	; 0x1108
 80041a6:	440b      	add	r3, r1
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fad7 	bl	800475e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fb1c 	bl	80047ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6852      	ldr	r2, [r2, #4]
 80041be:	3205      	adds	r2, #5
 80041c0:	7812      	ldrb	r2, [r2, #0]
 80041c2:	0212      	lsls	r2, r2, #8
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	6849      	ldr	r1, [r1, #4]
 80041c8:	3104      	adds	r1, #4
 80041ca:	7809      	ldrb	r1, [r1, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6852      	ldr	r2, [r2, #4]
 80041da:	3203      	adds	r2, #3
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	0611      	lsls	r1, r2, #24
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6852      	ldr	r2, [r2, #4]
 80041e4:	3202      	adds	r2, #2
 80041e6:	7812      	ldrb	r2, [r2, #0]
 80041e8:	0412      	lsls	r2, r2, #16
 80041ea:	4311      	orrs	r1, r2
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6852      	ldr	r2, [r2, #4]
 80041f0:	3201      	adds	r2, #1
 80041f2:	7812      	ldrb	r2, [r2, #0]
 80041f4:	0212      	lsls	r2, r2, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041f6:	430a      	orrs	r2, r1
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6849      	ldr	r1, [r1, #4]
 80041fc:	7809      	ldrb	r1, [r1, #0]
 80041fe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004200:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2210      	movs	r2, #16
 8004210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}
 800421e:	bf00      	nop
 8004220:	58024400 	.word	0x58024400
 8004224:	58000400 	.word	0x58000400
 8004228:	431bde83 	.word	0x431bde83
 800422c:	ffff8001 	.word	0xffff8001

08004230 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004240:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004248:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800424a:	f001 fc85 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 800424e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d908      	bls.n	800426a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d804      	bhi.n	800426a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e027      	b.n	80042ba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d908      	bls.n	8004284 <HAL_ETH_SetMDIOClockRange+0x54>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d804      	bhi.n	8004284 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e01a      	b.n	80042ba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d903      	bls.n	8004294 <HAL_ETH_SetMDIOClockRange+0x64>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d911      	bls.n	80042b8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d908      	bls.n	80042ae <HAL_ETH_SetMDIOClockRange+0x7e>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <HAL_ETH_SetMDIOClockRange+0xac>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d804      	bhi.n	80042ae <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e005      	b.n	80042ba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e000      	b.n	80042ba <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80042b8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	01312cff 	.word	0x01312cff
 80042d0:	02160ebf 	.word	0x02160ebf
 80042d4:	039386ff 	.word	0x039386ff
 80042d8:	05f5e0ff 	.word	0x05f5e0ff
 80042dc:	08f0d17f 	.word	0x08f0d17f

080042e0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80042f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80042fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	7b1b      	ldrb	r3, [r3, #12]
 8004300:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	7b5b      	ldrb	r3, [r3, #13]
 8004308:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800430a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	7b9b      	ldrb	r3, [r3, #14]
 8004310:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	7bdb      	ldrb	r3, [r3, #15]
 8004318:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800431a:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	7c1b      	ldrb	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <ETH_SetMACConfig+0x4a>
 8004324:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004328:	e000      	b.n	800432c <ETH_SetMACConfig+0x4c>
 800432a:	2300      	movs	r3, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800432c:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	7c5b      	ldrb	r3, [r3, #17]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <ETH_SetMACConfig+0x5c>
 8004336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800433a:	e000      	b.n	800433e <ETH_SetMACConfig+0x5e>
 800433c:	2300      	movs	r3, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800433e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	7c9b      	ldrb	r3, [r3, #18]
 8004344:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004346:	431a      	orrs	r2, r3
               macconf->Speed |
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800434c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	7f1b      	ldrb	r3, [r3, #28]
 8004358:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800435a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	7f5b      	ldrb	r3, [r3, #29]
 8004360:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004362:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	7f9b      	ldrb	r3, [r3, #30]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <ETH_SetMACConfig+0x92>
 800436c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004370:	e000      	b.n	8004374 <ETH_SetMACConfig+0x94>
 8004372:	2300      	movs	r3, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004374:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	7fdb      	ldrb	r3, [r3, #31]
 800437a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800437c:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <ETH_SetMACConfig+0xae>
 8004388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800438c:	e000      	b.n	8004390 <ETH_SetMACConfig+0xb0>
 800438e:	2300      	movs	r3, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004390:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004396:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800439e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80043a0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	4b55      	ldr	r3, [pc, #340]	; (800450c <ETH_SetMACConfig+0x22c>)
 80043b6:	400b      	ands	r3, r1
 80043b8:	68f9      	ldr	r1, [r7, #12]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043d4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043de:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043e0:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <ETH_SetMACConfig+0x112>
 80043ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043f0:	e000      	b.n	80043f4 <ETH_SetMACConfig+0x114>
 80043f2:	2300      	movs	r3, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043f4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	4b41      	ldr	r3, [pc, #260]	; (8004510 <ETH_SetMACConfig+0x230>)
 800440a:	400b      	ands	r3, r1
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	430b      	orrs	r3, r1
 8004410:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004418:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68d9      	ldr	r1, [r3, #12]
 800442c:	4b39      	ldr	r3, [pc, #228]	; (8004514 <ETH_SetMACConfig+0x234>)
 800442e:	400b      	ands	r3, r1
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	430b      	orrs	r3, r1
 8004434:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800443c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004442:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <ETH_SetMACConfig+0x172>
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	e000      	b.n	8004454 <ETH_SetMACConfig+0x174>
 8004452:	2300      	movs	r3, #0
               macconf->PauseLowThreshold |
 8004454:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800446a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800446e:	400b      	ands	r3, r1
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	430b      	orrs	r3, r1
 8004474:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800447c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004484:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004496:	f022 0103 	bic.w	r1, r2, #3
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	430a      	orrs	r2, r1
 800449e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	f8d2 2d00 	ldr.w	r2, [r2, #3328]	; 0xd00
 80044ae:	f022 0172 	bic.w	r1, r2, #114	; 0x72
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80044b6:	430a      	orrs	r2, r1
 80044b8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <ETH_SetMACConfig+0x1ee>
 80044ca:	2340      	movs	r3, #64	; 0x40
 80044cc:	e000      	b.n	80044d0 <ETH_SetMACConfig+0x1f0>
 80044ce:	2300      	movs	r3, #0
  macregval = (macconf->ReceiveQueueMode |
 80044d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044d8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80044e2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	f8d2 2d30 	ldr.w	r2, [r2, #3376]	; 0xd30
 80044f4:	f022 017b 	bic.w	r1, r2, #123	; 0x7b
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	00048083 	.word	0x00048083
 8004510:	c0f88000 	.word	0xc0f88000
 8004514:	fffffef0 	.word	0xfffffef0

08004518 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6819      	ldr	r1, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b37      	ldr	r3, [pc, #220]	; (8004610 <ETH_SetDMAConfig+0xf8>)
 8004532:	4013      	ands	r3, r2
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	431a      	orrs	r2, r3
 800453a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800453e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	791b      	ldrb	r3, [r3, #4]
 8004544:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800454a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	7b1b      	ldrb	r3, [r3, #12]
 8004550:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004562:	4413      	add	r3, r2
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <ETH_SetDMAConfig+0xfc>)
 8004568:	4013      	ands	r3, r2
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	431a      	orrs	r2, r3
 800456e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004572:	440b      	add	r3, r1
 8004574:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	7b5b      	ldrb	r3, [r3, #13]
 800457a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6819      	ldr	r1, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <ETH_SetDMAConfig+0x100>)
 8004594:	4013      	ands	r3, r2
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	431a      	orrs	r2, r3
 800459a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800459e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	7d1b      	ldrb	r3, [r3, #20]
 80045a8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80045aa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	7f5b      	ldrb	r3, [r3, #29]
 80045b0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	f241 1304 	movw	r3, #4356	; 0x1104
 80045c2:	4413      	add	r3, r2
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <ETH_SetDMAConfig+0x104>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	f241 1304 	movw	r3, #4356	; 0x1104
 80045d2:	440b      	add	r3, r1
 80045d4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	7f1b      	ldrb	r3, [r3, #28]
 80045da:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6819      	ldr	r1, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f241 1308 	movw	r3, #4360	; 0x1108
 80045f0:	4413      	add	r3, r2
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <ETH_SetDMAConfig+0x108>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	f241 1308 	movw	r3, #4360	; 0x1108
 8004600:	440b      	add	r3, r1
 8004602:	601a      	str	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	ffff87fd 	.word	0xffff87fd
 8004614:	ffff2ffe 	.word	0xffff2ffe
 8004618:	fffec000 	.word	0xfffec000
 800461c:	ffc0efef 	.word	0xffc0efef
 8004620:	7fc0ffff 	.word	0x7fc0ffff

08004624 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b0a4      	sub	sp, #144	; 0x90
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004632:	2300      	movs	r3, #0
 8004634:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004666:	2300      	movs	r3, #0
 8004668:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800466c:	2300      	movs	r3, #0
 800466e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004676:	2300      	movs	r3, #0
 8004678:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800467c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004680:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004688:	2300      	movs	r3, #0
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004692:	2300      	movs	r3, #0
 8004694:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004698:	2300      	movs	r3, #0
 800469a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800469e:	2300      	movs	r3, #0
 80046a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80046a6:	2300      	movs	r3, #0
 80046a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80046bc:	2320      	movs	r3, #32
 80046be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80046ce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80046d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046d8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80046da:	2300      	movs	r3, #0
 80046dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80046e0:	2302      	movs	r3, #2
 80046e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80046fe:	2300      	movs	r3, #0
 8004700:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fde6 	bl	80042e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004714:	2301      	movs	r3, #1
 8004716:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004718:	2301      	movs	r3, #1
 800471a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800471c:	2300      	movs	r3, #0
 800471e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004726:	2300      	movs	r3, #0
 8004728:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800472a:	2300      	movs	r3, #0
 800472c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800472e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004732:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004734:	2300      	movs	r3, #0
 8004736:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004738:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800473c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800473e:	2300      	movs	r3, #0
 8004740:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004744:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800474a:	f107 0308 	add.w	r3, r7, #8
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fee1 	bl	8004518 <ETH_SetDMAConfig>
}
 8004756:	bf00      	nop
 8004758:	3790      	adds	r7, #144	; 0x90
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	e01d      	b.n	80047a8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68d9      	ldr	r1, [r3, #12]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4613      	mov	r3, r2
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	4413      	add	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	440b      	add	r3, r1
 800477c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2200      	movs	r2, #0
 8004788:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	3206      	adds	r2, #6
 800479e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d9de      	bls.n	800476c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	f241 132c 	movw	r3, #4396	; 0x112c
 80047bc:	4413      	add	r3, r2
 80047be:	2203      	movs	r2, #3
 80047c0:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4619      	mov	r1, r3
 80047cc:	f241 1314 	movw	r3, #4372	; 0x1114
 80047d0:	4413      	add	r3, r2
 80047d2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68d2      	ldr	r2, [r2, #12]
 80047dc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e023      	b.n	8004844 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6919      	ldr	r1, [r3, #16]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	440b      	add	r3, r1
 800480c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2200      	movs	r2, #0
 8004824:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	3212      	adds	r2, #18
 800483a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3301      	adds	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b03      	cmp	r3, #3
 8004848:	d9d8      	bls.n	80047fc <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f241 1330 	movw	r3, #4400	; 0x1130
 8004870:	4413      	add	r3, r2
 8004872:	2203      	movs	r2, #3
 8004874:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	4619      	mov	r1, r3
 8004880:	f241 131c 	movw	r3, #4380	; 0x111c
 8004884:	4413      	add	r3, r2
 8004886:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	3348      	adds	r3, #72	; 0x48
 8004892:	4619      	mov	r1, r3
 8004894:	f241 1328 	movw	r3, #4392	; 0x1128
 8004898:	4413      	add	r3, r2
 800489a:	6019      	str	r1, [r3, #0]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048b6:	4b89      	ldr	r3, [pc, #548]	; (8004adc <HAL_GPIO_Init+0x234>)
 80048b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ba:	e194      	b.n	8004be6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8186 	beq.w	8004be0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d005      	beq.n	80048ec <HAL_GPIO_Init+0x44>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d130      	bne.n	800494e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004922:	2201      	movs	r2, #1
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0201 	and.w	r2, r3, #1
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b03      	cmp	r3, #3
 8004958:	d017      	beq.n	800498a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d123      	bne.n	80049de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	08da      	lsrs	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3208      	adds	r2, #8
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	2203      	movs	r2, #3
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0203 	and.w	r2, r3, #3
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80e0 	beq.w	8004be0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a20:	4a2f      	ldr	r2, [pc, #188]	; (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a22:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3e:	4a29      	ldr	r2, [pc, #164]	; (8004ae4 <HAL_GPIO_Init+0x23c>)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_GPIO_Init+0x240>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d052      	beq.n	8004b10 <HAL_GPIO_Init+0x268>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <HAL_GPIO_Init+0x244>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d031      	beq.n	8004ad6 <HAL_GPIO_Init+0x22e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <HAL_GPIO_Init+0x248>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02b      	beq.n	8004ad2 <HAL_GPIO_Init+0x22a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <HAL_GPIO_Init+0x24c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d025      	beq.n	8004ace <HAL_GPIO_Init+0x226>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <HAL_GPIO_Init+0x250>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <HAL_GPIO_Init+0x222>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <HAL_GPIO_Init+0x254>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d019      	beq.n	8004ac6 <HAL_GPIO_Init+0x21e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <HAL_GPIO_Init+0x258>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_GPIO_Init+0x21a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_GPIO_Init+0x25c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00d      	beq.n	8004abe <HAL_GPIO_Init+0x216>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_GPIO_Init+0x260>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <HAL_GPIO_Init+0x212>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <HAL_GPIO_Init+0x264>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_GPIO_Init+0x20e>
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	e02d      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	e02b      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004aba:	2308      	movs	r3, #8
 8004abc:	e029      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004abe:	2307      	movs	r3, #7
 8004ac0:	e027      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	e025      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ac6:	2305      	movs	r3, #5
 8004ac8:	e023      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004aca:	2304      	movs	r3, #4
 8004acc:	e021      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e01f      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e01d      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e01b      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ada:	bf00      	nop
 8004adc:	58000080 	.word	0x58000080
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	58000400 	.word	0x58000400
 8004ae8:	58020000 	.word	0x58020000
 8004aec:	58020400 	.word	0x58020400
 8004af0:	58020800 	.word	0x58020800
 8004af4:	58020c00 	.word	0x58020c00
 8004af8:	58021000 	.word	0x58021000
 8004afc:	58021400 	.word	0x58021400
 8004b00:	58021800 	.word	0x58021800
 8004b04:	58021c00 	.word	0x58021c00
 8004b08:	58022000 	.word	0x58022000
 8004b0c:	58022400 	.word	0x58022400
 8004b10:	2300      	movs	r3, #0
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	f002 0203 	and.w	r2, r2, #3
 8004b18:	0092      	lsls	r2, r2, #2
 8004b1a:	4093      	lsls	r3, r2
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b22:	4938      	ldr	r1, [pc, #224]	; (8004c04 <HAL_GPIO_Init+0x35c>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f ae63 	bne.w	80048bc <HAL_GPIO_Init+0x14>
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3724      	adds	r7, #36	; 0x24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	58000400 	.word	0x58000400

08004c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
 8004c14:	4613      	mov	r3, r2
 8004c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c18:	787b      	ldrb	r3, [r7, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c24:	e003      	b.n	8004c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c26:	887b      	ldrh	r3, [r7, #2]
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	619a      	str	r2, [r3, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c44:	4b19      	ldr	r3, [pc, #100]	; (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d00a      	beq.n	8004c66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c50:	4b16      	ldr	r3, [pc, #88]	; (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0207 	and.w	r2, r3, #7
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e01f      	b.n	8004ca2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e01d      	b.n	8004ca2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c66:	4911      	ldr	r1, [pc, #68]	; (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f023 0207 	bic.w	r2, r3, #7
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c76:	f7fc f9eb 	bl	8001050 <HAL_GetTick>
 8004c7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c7c:	e009      	b.n	8004c92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c7e:	f7fc f9e7 	bl	8001050 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c8c:	d901      	bls.n	8004c92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e007      	b.n	8004ca2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	d1ee      	bne.n	8004c7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	58024800 	.word	0x58024800

08004cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	; 0x30
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f000 bc1c 	b.w	80054fc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8087 	beq.w	8004de0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd2:	4b9e      	ldr	r3, [pc, #632]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cdc:	4b9b      	ldr	r3, [pc, #620]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d007      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x48>
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	2b18      	cmp	r3, #24
 8004cec:	d110      	bne.n	8004d10 <HAL_RCC_OscConfig+0x60>
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	4b94      	ldr	r3, [pc, #592]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d06c      	beq.n	8004dde <HAL_RCC_OscConfig+0x12e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d168      	bne.n	8004dde <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e3f5      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d106      	bne.n	8004d28 <HAL_RCC_OscConfig+0x78>
 8004d1a:	4a8c      	ldr	r2, [pc, #560]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d1c:	4b8b      	ldr	r3, [pc, #556]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e02e      	b.n	8004d86 <HAL_RCC_OscConfig+0xd6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10c      	bne.n	8004d4a <HAL_RCC_OscConfig+0x9a>
 8004d30:	4a86      	ldr	r2, [pc, #536]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d32:	4b86      	ldr	r3, [pc, #536]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a83      	ldr	r2, [pc, #524]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d3e:	4b83      	ldr	r3, [pc, #524]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e01d      	b.n	8004d86 <HAL_RCC_OscConfig+0xd6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d52:	d10c      	bne.n	8004d6e <HAL_RCC_OscConfig+0xbe>
 8004d54:	4a7d      	ldr	r2, [pc, #500]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d56:	4b7d      	ldr	r3, [pc, #500]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4a7a      	ldr	r2, [pc, #488]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d62:	4b7a      	ldr	r3, [pc, #488]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e00b      	b.n	8004d86 <HAL_RCC_OscConfig+0xd6>
 8004d6e:	4a77      	ldr	r2, [pc, #476]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d70:	4b76      	ldr	r3, [pc, #472]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	4a74      	ldr	r2, [pc, #464]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d7c:	4b73      	ldr	r3, [pc, #460]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d013      	beq.n	8004db6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fc f95f 	bl	8001050 <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d96:	f7fc f95b 	bl	8001050 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b64      	cmp	r3, #100	; 0x64
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e3a9      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004da8:	4b68      	ldr	r3, [pc, #416]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0xe6>
 8004db4:	e014      	b.n	8004de0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7fc f94b 	bl	8001050 <HAL_GetTick>
 8004dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dbe:	f7fc f947 	bl	8001050 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b64      	cmp	r3, #100	; 0x64
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e395      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCC_OscConfig+0x10e>
 8004ddc:	e000      	b.n	8004de0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80ca 	beq.w	8004f82 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dee:	4b57      	ldr	r3, [pc, #348]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004df8:	4b54      	ldr	r3, [pc, #336]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_RCC_OscConfig+0x164>
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	2b18      	cmp	r3, #24
 8004e08:	d156      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x208>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d151      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e14:	4b4d      	ldr	r3, [pc, #308]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_OscConfig+0x17c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e367      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e2c:	4947      	ldr	r1, [pc, #284]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004e2e:	4b47      	ldr	r3, [pc, #284]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 0219 	bic.w	r2, r3, #25
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e3e:	f7fc f907 	bl	8001050 <HAL_GetTick>
 8004e42:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e46:	f7fc f903 	bl	8001050 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e351      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e58:	4b3c      	ldr	r3, [pc, #240]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e64:	f7fc f922 	bl	80010ac <HAL_GetREVID>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d817      	bhi.n	8004ea2 <HAL_RCC_OscConfig+0x1f2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d108      	bne.n	8004e8c <HAL_RCC_OscConfig+0x1dc>
 8004e7a:	4a34      	ldr	r2, [pc, #208]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004e7c:	4b33      	ldr	r3, [pc, #204]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8a:	e07a      	b.n	8004f82 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8c:	492f      	ldr	r1, [pc, #188]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004e8e:	4b2f      	ldr	r3, [pc, #188]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	031b      	lsls	r3, r3, #12
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea0:	e06f      	b.n	8004f82 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea2:	492a      	ldr	r1, [pc, #168]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004ea4:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb6:	e064      	b.n	8004f82 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d047      	beq.n	8004f50 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ec0:	4922      	ldr	r1, [pc, #136]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004ec2:	4b22      	ldr	r3, [pc, #136]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 0219 	bic.w	r2, r3, #25
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fc f8bd 	bl	8001050 <HAL_GetTick>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fc f8b9 	bl	8001050 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e307      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eec:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	f7fc f8d8 	bl	80010ac <HAL_GetREVID>
 8004efc:	4602      	mov	r2, r0
 8004efe:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d817      	bhi.n	8004f36 <HAL_RCC_OscConfig+0x286>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d108      	bne.n	8004f20 <HAL_RCC_OscConfig+0x270>
 8004f0e:	4a0f      	ldr	r2, [pc, #60]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004f10:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1c:	6053      	str	r3, [r2, #4]
 8004f1e:	e030      	b.n	8004f82 <HAL_RCC_OscConfig+0x2d2>
 8004f20:	490a      	ldr	r1, [pc, #40]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	031b      	lsls	r3, r3, #12
 8004f30:	4313      	orrs	r3, r2
 8004f32:	604b      	str	r3, [r1, #4]
 8004f34:	e025      	b.n	8004f82 <HAL_RCC_OscConfig+0x2d2>
 8004f36:	4905      	ldr	r1, [pc, #20]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <HAL_RCC_OscConfig+0x29c>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	4313      	orrs	r3, r2
 8004f48:	604b      	str	r3, [r1, #4]
 8004f4a:	e01a      	b.n	8004f82 <HAL_RCC_OscConfig+0x2d2>
 8004f4c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f50:	4a9e      	ldr	r2, [pc, #632]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004f52:	4b9e      	ldr	r3, [pc, #632]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fc f878 	bl	8001050 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f64:	f7fc f874 	bl	8001050 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e2c2      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f76:	4b95      	ldr	r3, [pc, #596]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80a9 	beq.w	80050e2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f90:	4b8e      	ldr	r3, [pc, #568]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f9a:	4b8c      	ldr	r3, [pc, #560]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d007      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x306>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b18      	cmp	r3, #24
 8004faa:	d13a      	bne.n	8005022 <HAL_RCC_OscConfig+0x372>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d135      	bne.n	8005022 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb6:	4b85      	ldr	r3, [pc, #532]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_RCC_OscConfig+0x31e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	2b80      	cmp	r3, #128	; 0x80
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e296      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fce:	f7fc f86d 	bl	80010ac <HAL_GetREVID>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	f241 0303 	movw	r3, #4099	; 0x1003
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d817      	bhi.n	800500c <HAL_RCC_OscConfig+0x35c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d108      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x346>
 8004fe4:	4a79      	ldr	r2, [pc, #484]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004fe6:	4b79      	ldr	r3, [pc, #484]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ff2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ff4:	e075      	b.n	80050e2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ff6:	4975      	ldr	r1, [pc, #468]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004ff8:	4b74      	ldr	r3, [pc, #464]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	069b      	lsls	r3, r3, #26
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800500a:	e06a      	b.n	80050e2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800500c:	496f      	ldr	r1, [pc, #444]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 800500e:	4b6f      	ldr	r3, [pc, #444]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	4313      	orrs	r3, r2
 800501e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005020:	e05f      	b.n	80050e2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d042      	beq.n	80050b0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800502a:	4a68      	ldr	r2, [pc, #416]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 800502c:	4b67      	ldr	r3, [pc, #412]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005036:	f7fc f80b 	bl	8001050 <HAL_GetTick>
 800503a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800503e:	f7fc f807 	bl	8001050 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e255      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005050:	4b5e      	ldr	r3, [pc, #376]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800505c:	f7fc f826 	bl	80010ac <HAL_GetREVID>
 8005060:	4602      	mov	r2, r0
 8005062:	f241 0303 	movw	r3, #4099	; 0x1003
 8005066:	429a      	cmp	r2, r3
 8005068:	d817      	bhi.n	800509a <HAL_RCC_OscConfig+0x3ea>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	2b20      	cmp	r3, #32
 8005070:	d108      	bne.n	8005084 <HAL_RCC_OscConfig+0x3d4>
 8005072:	4a56      	ldr	r2, [pc, #344]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005074:	4b55      	ldr	r3, [pc, #340]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800507c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005080:	6053      	str	r3, [r2, #4]
 8005082:	e02e      	b.n	80050e2 <HAL_RCC_OscConfig+0x432>
 8005084:	4951      	ldr	r1, [pc, #324]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005086:	4b51      	ldr	r3, [pc, #324]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	069b      	lsls	r3, r3, #26
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
 8005098:	e023      	b.n	80050e2 <HAL_RCC_OscConfig+0x432>
 800509a:	494c      	ldr	r1, [pc, #304]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 800509c:	4b4b      	ldr	r3, [pc, #300]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60cb      	str	r3, [r1, #12]
 80050ae:	e018      	b.n	80050e2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80050b0:	4a46      	ldr	r2, [pc, #280]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 80050b2:	4b46      	ldr	r3, [pc, #280]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fb ffc8 	bl	8001050 <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80050c4:	f7fb ffc4 	bl	8001050 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e212      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050d6:	4b3d      	ldr	r3, [pc, #244]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d036      	beq.n	800515c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d019      	beq.n	800512a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050f6:	4a35      	ldr	r2, [pc, #212]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 80050f8:	4b34      	ldr	r3, [pc, #208]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 80050fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fb ffa5 	bl	8001050 <HAL_GetTick>
 8005106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510a:	f7fb ffa1 	bl	8001050 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1ef      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800511c:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 800511e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x45a>
 8005128:	e018      	b.n	800515c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512a:	4a28      	ldr	r2, [pc, #160]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 800512c:	4b27      	ldr	r3, [pc, #156]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 800512e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005130:	f023 0301 	bic.w	r3, r3, #1
 8005134:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fb ff8b 	bl	8001050 <HAL_GetTick>
 800513a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800513e:	f7fb ff87 	bl	8001050 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e1d5      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005150:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f0      	bne.n	800513e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d039      	beq.n	80051dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d019      	beq.n	80051a4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005170:	4a16      	ldr	r2, [pc, #88]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800517a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800517c:	f7fb ff68 	bl	8001050 <HAL_GetTick>
 8005180:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005184:	f7fb ff64 	bl	8001050 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e1b2      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x4d4>
 80051a2:	e01b      	b.n	80051dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_RCC_OscConfig+0x51c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051b0:	f7fb ff4e 	bl	8001050 <HAL_GetTick>
 80051b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051b6:	e00b      	b.n	80051d0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80051b8:	f7fb ff4a 	bl	8001050 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d904      	bls.n	80051d0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e198      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
 80051ca:	bf00      	nop
 80051cc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051d0:	4ba3      	ldr	r3, [pc, #652]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ed      	bne.n	80051b8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8081 	beq.w	80052ec <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051ea:	4a9e      	ldr	r2, [pc, #632]	; (8005464 <HAL_RCC_OscConfig+0x7b4>)
 80051ec:	4b9d      	ldr	r3, [pc, #628]	; (8005464 <HAL_RCC_OscConfig+0x7b4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f6:	f7fb ff2b 	bl	8001050 <HAL_GetTick>
 80051fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051fe:	f7fb ff27 	bl	8001050 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b64      	cmp	r3, #100	; 0x64
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e175      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005210:	4b94      	ldr	r3, [pc, #592]	; (8005464 <HAL_RCC_OscConfig+0x7b4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d106      	bne.n	8005232 <HAL_RCC_OscConfig+0x582>
 8005224:	4a8e      	ldr	r2, [pc, #568]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005226:	4b8e      	ldr	r3, [pc, #568]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	6713      	str	r3, [r2, #112]	; 0x70
 8005230:	e02d      	b.n	800528e <HAL_RCC_OscConfig+0x5de>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10c      	bne.n	8005254 <HAL_RCC_OscConfig+0x5a4>
 800523a:	4a89      	ldr	r2, [pc, #548]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800523c:	4b88      	ldr	r3, [pc, #544]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	6713      	str	r3, [r2, #112]	; 0x70
 8005246:	4a86      	ldr	r2, [pc, #536]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005248:	4b85      	ldr	r3, [pc, #532]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
 8005252:	e01c      	b.n	800528e <HAL_RCC_OscConfig+0x5de>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b05      	cmp	r3, #5
 800525a:	d10c      	bne.n	8005276 <HAL_RCC_OscConfig+0x5c6>
 800525c:	4a80      	ldr	r2, [pc, #512]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800525e:	4b80      	ldr	r3, [pc, #512]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	f043 0304 	orr.w	r3, r3, #4
 8005266:	6713      	str	r3, [r2, #112]	; 0x70
 8005268:	4a7d      	ldr	r2, [pc, #500]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800526a:	4b7d      	ldr	r3, [pc, #500]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6713      	str	r3, [r2, #112]	; 0x70
 8005274:	e00b      	b.n	800528e <HAL_RCC_OscConfig+0x5de>
 8005276:	4a7a      	ldr	r2, [pc, #488]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005278:	4b79      	ldr	r3, [pc, #484]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6713      	str	r3, [r2, #112]	; 0x70
 8005282:	4a77      	ldr	r2, [pc, #476]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005284:	4b76      	ldr	r3, [pc, #472]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f023 0304 	bic.w	r3, r3, #4
 800528c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d015      	beq.n	80052c2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005296:	f7fb fedb 	bl	8001050 <HAL_GetTick>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fb fed7 	bl	8001050 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e123      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b4:	4b6a      	ldr	r3, [pc, #424]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0ee      	beq.n	800529e <HAL_RCC_OscConfig+0x5ee>
 80052c0:	e014      	b.n	80052ec <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c2:	f7fb fec5 	bl	8001050 <HAL_GetTick>
 80052c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fb fec1 	bl	8001050 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e10d      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052e0:	4b5f      	ldr	r3, [pc, #380]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1ee      	bne.n	80052ca <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8102 	beq.w	80054fa <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052f6:	4b5a      	ldr	r3, [pc, #360]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052fe:	2b18      	cmp	r3, #24
 8005300:	f000 80bd 	beq.w	800547e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2b02      	cmp	r3, #2
 800530a:	f040 8095 	bne.w	8005438 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530e:	4a54      	ldr	r2, [pc, #336]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005310:	4b53      	ldr	r3, [pc, #332]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531a:	f7fb fe99 	bl	8001050 <HAL_GetTick>
 800531e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005322:	f7fb fe95 	bl	8001050 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e0e3      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005334:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f0      	bne.n	8005322 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005340:	4847      	ldr	r0, [pc, #284]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005342:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005346:	4b48      	ldr	r3, [pc, #288]	; (8005468 <HAL_RCC_OscConfig+0x7b8>)
 8005348:	4013      	ands	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005352:	0112      	lsls	r2, r2, #4
 8005354:	430a      	orrs	r2, r1
 8005356:	4313      	orrs	r3, r2
 8005358:	6283      	str	r3, [r0, #40]	; 0x28
 800535a:	4941      	ldr	r1, [pc, #260]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	3b01      	subs	r3, #1
 8005362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	3b01      	subs	r3, #1
 800536c:	025b      	lsls	r3, r3, #9
 800536e:	b29b      	uxth	r3, r3
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	3b01      	subs	r3, #1
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	3b01      	subs	r3, #1
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800538c:	4313      	orrs	r3, r2
 800538e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005390:	4a33      	ldr	r2, [pc, #204]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005392:	4b33      	ldr	r3, [pc, #204]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800539c:	4930      	ldr	r1, [pc, #192]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800539e:	4b30      	ldr	r3, [pc, #192]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a2:	4b32      	ldr	r3, [pc, #200]	; (800546c <HAL_RCC_OscConfig+0x7bc>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053aa:	00d2      	lsls	r2, r2, #3
 80053ac:	4313      	orrs	r3, r2
 80053ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80053b0:	492b      	ldr	r1, [pc, #172]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053b2:	4b2b      	ldr	r3, [pc, #172]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	f023 020c 	bic.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	4313      	orrs	r3, r2
 80053c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053c2:	4927      	ldr	r1, [pc, #156]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053c4:	4b26      	ldr	r3, [pc, #152]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	f023 0202 	bic.w	r2, r3, #2
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	4313      	orrs	r3, r2
 80053d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e0:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053e2:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053ec:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053ee:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80053f8:	4a19      	ldr	r2, [pc, #100]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053fa:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005404:	4a16      	ldr	r2, [pc, #88]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005406:	4b16      	ldr	r3, [pc, #88]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800540e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fb fe1e 	bl	8001050 <HAL_GetTick>
 8005414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005418:	f7fb fe1a 	bl	8001050 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e068      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x768>
 8005436:	e060      	b.n	80054fa <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005438:	4a09      	ldr	r2, [pc, #36]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_RCC_OscConfig+0x7b0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fb fe04 	bl	8001050 <HAL_GetTick>
 8005448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800544a:	e011      	b.n	8005470 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544c:	f7fb fe00 	bl	8001050 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d90a      	bls.n	8005470 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e04e      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
 800545e:	bf00      	nop
 8005460:	58024400 	.word	0x58024400
 8005464:	58024800 	.word	0x58024800
 8005468:	fffffc0c 	.word	0xfffffc0c
 800546c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005470:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCC_OscConfig+0x854>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e7      	bne.n	800544c <HAL_RCC_OscConfig+0x79c>
 800547c:	e03d      	b.n	80054fa <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800547e:	4b21      	ldr	r3, [pc, #132]	; (8005504 <HAL_RCC_OscConfig+0x854>)
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005484:	4b1f      	ldr	r3, [pc, #124]	; (8005504 <HAL_RCC_OscConfig+0x854>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b01      	cmp	r3, #1
 8005490:	d031      	beq.n	80054f6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f003 0203 	and.w	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d12a      	bne.n	80054f6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d122      	bne.n	80054f6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d11a      	bne.n	80054f6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	0a5b      	lsrs	r3, r3, #9
 80054c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d111      	bne.n	80054f6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d108      	bne.n	80054f6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	0e1b      	lsrs	r3, r3, #24
 80054e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d001      	beq.n	80054fa <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3730      	adds	r7, #48	; 0x30
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	58024400 	.word	0x58024400

08005508 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e19c      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b8a      	ldr	r3, [pc, #552]	; (8005748 <HAL_RCC_ClockConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 020f 	and.w	r2, r3, #15
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d210      	bcs.n	800554c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4987      	ldr	r1, [pc, #540]	; (8005748 <HAL_RCC_ClockConfig+0x240>)
 800552c:	4b86      	ldr	r3, [pc, #536]	; (8005748 <HAL_RCC_ClockConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 020f 	bic.w	r2, r3, #15
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b83      	ldr	r3, [pc, #524]	; (8005748 <HAL_RCC_ClockConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 020f 	and.w	r2, r3, #15
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e184      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d010      	beq.n	800557a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005564:	429a      	cmp	r2, r3
 8005566:	d908      	bls.n	800557a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005568:	4978      	ldr	r1, [pc, #480]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800556a:	4b78      	ldr	r3, [pc, #480]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d010      	beq.n	80055a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	4b70      	ldr	r3, [pc, #448]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005592:	429a      	cmp	r2, r3
 8005594:	d908      	bls.n	80055a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005596:	496d      	ldr	r1, [pc, #436]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 8005598:	4b6c      	ldr	r3, [pc, #432]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d010      	beq.n	80055d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	4b64      	ldr	r3, [pc, #400]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d908      	bls.n	80055d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055c4:	4961      	ldr	r1, [pc, #388]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80055c6:	4b61      	ldr	r3, [pc, #388]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d010      	beq.n	8005604 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	4b59      	ldr	r3, [pc, #356]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d908      	bls.n	8005604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80055f2:	4956      	ldr	r1, [pc, #344]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80055f4:	4b55      	ldr	r3, [pc, #340]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4313      	orrs	r3, r2
 8005602:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	4b4d      	ldr	r3, [pc, #308]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	429a      	cmp	r2, r3
 800561e:	d908      	bls.n	8005632 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	494a      	ldr	r1, [pc, #296]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f023 020f 	bic.w	r2, r3, #15
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d055      	beq.n	80056ea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800563e:	4943      	ldr	r1, [pc, #268]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 8005640:	4b42      	ldr	r3, [pc, #264]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4313      	orrs	r3, r2
 800564e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d107      	bne.n	8005668 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005658:	4b3c      	ldr	r3, [pc, #240]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d121      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0f6      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d107      	bne.n	8005680 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005670:	4b36      	ldr	r3, [pc, #216]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d115      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0ea      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d107      	bne.n	8005698 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005688:	4b30      	ldr	r3, [pc, #192]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0de      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005698:	4b2c      	ldr	r3, [pc, #176]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0d6      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056a8:	4928      	ldr	r1, [pc, #160]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80056aa:	4b28      	ldr	r3, [pc, #160]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f023 0207 	bic.w	r2, r3, #7
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ba:	f7fb fcc9 	bl	8001050 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c0:	e00a      	b.n	80056d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c2:	f7fb fcc5 	bl	8001050 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e0be      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d8:	4b1c      	ldr	r3, [pc, #112]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d1eb      	bne.n	80056c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	429a      	cmp	r2, r3
 8005704:	d208      	bcs.n	8005718 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005706:	4911      	ldr	r1, [pc, #68]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <HAL_RCC_ClockConfig+0x244>)
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f023 020f 	bic.w	r2, r3, #15
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_RCC_ClockConfig+0x240>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d914      	bls.n	8005750 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4908      	ldr	r1, [pc, #32]	; (8005748 <HAL_RCC_ClockConfig+0x240>)
 8005728:	4b07      	ldr	r3, [pc, #28]	; (8005748 <HAL_RCC_ClockConfig+0x240>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 020f 	bic.w	r2, r3, #15
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b04      	ldr	r3, [pc, #16]	; (8005748 <HAL_RCC_ClockConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 020f 	and.w	r2, r3, #15
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d005      	beq.n	8005750 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e086      	b.n	8005856 <HAL_RCC_ClockConfig+0x34e>
 8005748:	52002000 	.word	0x52002000
 800574c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005768:	429a      	cmp	r2, r3
 800576a:	d208      	bcs.n	800577e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800576c:	493c      	ldr	r1, [pc, #240]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 800576e:	4b3c      	ldr	r3, [pc, #240]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d010      	beq.n	80057ac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	4b34      	ldr	r3, [pc, #208]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005796:	429a      	cmp	r2, r3
 8005798:	d208      	bcs.n	80057ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800579a:	4931      	ldr	r1, [pc, #196]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 800579c:	4b30      	ldr	r3, [pc, #192]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699a      	ldr	r2, [r3, #24]
 80057bc:	4b28      	ldr	r3, [pc, #160]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d208      	bcs.n	80057da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057c8:	4925      	ldr	r1, [pc, #148]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057ca:	4b25      	ldr	r3, [pc, #148]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d010      	beq.n	8005808 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d208      	bcs.n	8005808 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80057f6:	491a      	ldr	r1, [pc, #104]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057f8:	4b19      	ldr	r3, [pc, #100]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4313      	orrs	r3, r2
 8005806:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005808:	f000 f834 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 800580c:	4601      	mov	r1, r0
 800580e:	4b14      	ldr	r3, [pc, #80]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	4a12      	ldr	r2, [pc, #72]	; (8005864 <HAL_RCC_ClockConfig+0x35c>)
 800581a:	5cd3      	ldrb	r3, [r2, r3]
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	fa21 f303 	lsr.w	r3, r1, r3
 8005824:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005826:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <HAL_RCC_ClockConfig+0x358>)
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	4a0d      	ldr	r2, [pc, #52]	; (8005864 <HAL_RCC_ClockConfig+0x35c>)
 8005830:	5cd3      	ldrb	r3, [r2, r3]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
 800583c:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <HAL_RCC_ClockConfig+0x360>)
 800583e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005840:	4a0a      	ldr	r2, [pc, #40]	; (800586c <HAL_RCC_ClockConfig+0x364>)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005846:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <HAL_RCC_ClockConfig+0x368>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fb fbb6 	bl	8000fbc <HAL_InitTick>
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	58024400 	.word	0x58024400
 8005864:	08009038 	.word	0x08009038
 8005868:	20000004 	.word	0x20000004
 800586c:	20000000 	.word	0x20000000
 8005870:	20000008 	.word	0x20000008

08005874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	b089      	sub	sp, #36	; 0x24
 8005878:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800587a:	4baf      	ldr	r3, [pc, #700]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005882:	2b18      	cmp	r3, #24
 8005884:	f200 814e 	bhi.w	8005b24 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <HAL_RCC_GetSysClockFreq+0x1c>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058f5 	.word	0x080058f5
 8005894:	08005b25 	.word	0x08005b25
 8005898:	08005b25 	.word	0x08005b25
 800589c:	08005b25 	.word	0x08005b25
 80058a0:	08005b25 	.word	0x08005b25
 80058a4:	08005b25 	.word	0x08005b25
 80058a8:	08005b25 	.word	0x08005b25
 80058ac:	08005b25 	.word	0x08005b25
 80058b0:	0800591b 	.word	0x0800591b
 80058b4:	08005b25 	.word	0x08005b25
 80058b8:	08005b25 	.word	0x08005b25
 80058bc:	08005b25 	.word	0x08005b25
 80058c0:	08005b25 	.word	0x08005b25
 80058c4:	08005b25 	.word	0x08005b25
 80058c8:	08005b25 	.word	0x08005b25
 80058cc:	08005b25 	.word	0x08005b25
 80058d0:	08005921 	.word	0x08005921
 80058d4:	08005b25 	.word	0x08005b25
 80058d8:	08005b25 	.word	0x08005b25
 80058dc:	08005b25 	.word	0x08005b25
 80058e0:	08005b25 	.word	0x08005b25
 80058e4:	08005b25 	.word	0x08005b25
 80058e8:	08005b25 	.word	0x08005b25
 80058ec:	08005b25 	.word	0x08005b25
 80058f0:	08005927 	.word	0x08005927
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f4:	4b90      	ldr	r3, [pc, #576]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005900:	4b8d      	ldr	r3, [pc, #564]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	08db      	lsrs	r3, r3, #3
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	4a8c      	ldr	r2, [pc, #560]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005912:	e10a      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005914:	4b89      	ldr	r3, [pc, #548]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005916:	61bb      	str	r3, [r7, #24]
    break;
 8005918:	e107      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800591a:	4b89      	ldr	r3, [pc, #548]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800591c:	61bb      	str	r3, [r7, #24]
    break;
 800591e:	e104      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005920:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005922:	61bb      	str	r3, [r7, #24]
    break;
 8005924:	e101      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005926:	4b84      	ldr	r3, [pc, #528]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005930:	4b81      	ldr	r3, [pc, #516]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800593a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800593c:	4b7e      	ldr	r3, [pc, #504]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005946:	4b7c      	ldr	r3, [pc, #496]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80da 	beq.w	8005b1e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d05a      	beq.n	8005a26 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005970:	2b01      	cmp	r3, #1
 8005972:	d302      	bcc.n	800597a <HAL_RCC_GetSysClockFreq+0x106>
 8005974:	2b02      	cmp	r3, #2
 8005976:	d078      	beq.n	8005a6a <HAL_RCC_GetSysClockFreq+0x1f6>
 8005978:	e099      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597a:	4b6f      	ldr	r3, [pc, #444]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d02d      	beq.n	80059e2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005986:	4b6c      	ldr	r3, [pc, #432]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	4a6a      	ldr	r2, [pc, #424]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b0:	4b61      	ldr	r3, [pc, #388]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80059c4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 80059c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80059e0:	e087      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	ee07 3a90 	vmov	s15, r3
 80059e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005b4c <HAL_RCC_GetSysClockFreq+0x2d8>
 80059f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f4:	4b50      	ldr	r3, [pc, #320]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a04:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a08:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a24:	e065      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a30:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005b50 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a38:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a40:	ee07 3a90 	vmov	s15, r3
 8005a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a48:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a68:	e043      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	ee07 3a90 	vmov	s15, r3
 8005a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a74:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7c:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a84:	ee07 3a90 	vmov	s15, r3
 8005a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a90:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aac:	e021      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	ee07 3a90 	vmov	s15, r3
 8005ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005b50 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac8:	ee07 3a90 	vmov	s15, r3
 8005acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ad4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005af0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005af2:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	0a5b      	lsrs	r3, r3, #9
 8005af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afc:	3301      	adds	r3, #1
 8005afe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b16:	ee17 3a90 	vmov	r3, s15
 8005b1a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005b1c:	e005      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
    break;
 8005b22:	e002      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005b26:	61bb      	str	r3, [r7, #24]
    break;
 8005b28:	bf00      	nop
  }

  return sysclockfreq;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3724      	adds	r7, #36	; 0x24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	03d09000 	.word	0x03d09000
 8005b40:	003d0900 	.word	0x003d0900
 8005b44:	007a1200 	.word	0x007a1200
 8005b48:	46000000 	.word	0x46000000
 8005b4c:	4c742400 	.word	0x4c742400
 8005b50:	4a742400 	.word	0x4a742400
 8005b54:	4af42400 	.word	0x4af42400

08005b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b5e:	f7ff fe89 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 8005b62:	4601      	mov	r1, r0
 8005b64:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	0a1b      	lsrs	r3, r3, #8
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	4a0f      	ldr	r2, [pc, #60]	; (8005bac <HAL_RCC_GetHCLKFreq+0x54>)
 8005b70:	5cd3      	ldrb	r3, [r2, r3]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	fa21 f303 	lsr.w	r3, r1, r3
 8005b7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	4a09      	ldr	r2, [pc, #36]	; (8005bac <HAL_RCC_GetHCLKFreq+0x54>)
 8005b86:	5cd3      	ldrb	r3, [r2, r3]
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b92:	4a07      	ldr	r2, [pc, #28]	; (8005bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b96:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	08009038 	.word	0x08009038
 8005bb0:	20000004 	.word	0x20000004
 8005bb4:	20000000 	.word	0x20000000

08005bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bbc:	f7ff ffcc 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bce:	5cd3      	ldrb	r3, [r2, r3]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	08009038 	.word	0x08009038

08005be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005be8:	f7ff ffb6 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 8005bec:	4601      	mov	r1, r0
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bfa:	5cd3      	ldrb	r3, [r2, r3]
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	08009038 	.word	0x08009038

08005c10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d03d      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c34:	d013      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c3a:	d802      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005c40:	e01f      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c46:	d013      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005c48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c4c:	d01c      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005c4e:	e018      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c50:	4aaf      	ldr	r2, [pc, #700]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c52:	4baf      	ldr	r3, [pc, #700]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c5c:	e015      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2102      	movs	r1, #2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 f97f 	bl	8006f68 <RCCEx_PLL2_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c6e:	e00c      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3324      	adds	r3, #36	; 0x24
 8005c74:	2102      	movs	r1, #2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fa28 	bl	80070cc <RCCEx_PLL3_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c80:	e003      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	75fb      	strb	r3, [r7, #23]
      break;
 8005c86:	e000      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c90:	499f      	ldr	r1, [pc, #636]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c92:	4b9f      	ldr	r3, [pc, #636]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ca2:	e001      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d03d      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d826      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cd9 	.word	0x08005cd9
 8005cc8:	08005ce7 	.word	0x08005ce7
 8005ccc:	08005cf9 	.word	0x08005cf9
 8005cd0:	08005d11 	.word	0x08005d11
 8005cd4:	08005d11 	.word	0x08005d11
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd8:	4a8d      	ldr	r2, [pc, #564]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cda:	4b8d      	ldr	r3, [pc, #564]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ce4:	e015      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f93b 	bl	8006f68 <RCCEx_PLL2_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cf6:	e00c      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 f9e4 	bl	80070cc <RCCEx_PLL3_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d08:	e003      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0e:	e000      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d18:	497d      	ldr	r1, [pc, #500]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d1a:	4b7d      	ldr	r3, [pc, #500]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1e:	f023 0207 	bic.w	r2, r3, #7
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	4313      	orrs	r3, r2
 8005d28:	650b      	str	r3, [r1, #80]	; 0x50
 8005d2a:	e001      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d03e      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d01c      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005d44:	2b80      	cmp	r3, #128	; 0x80
 8005d46:	d804      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005d4c:	2b40      	cmp	r3, #64	; 0x40
 8005d4e:	d00d      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005d50:	e01e      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005d52:	2bc0      	cmp	r3, #192	; 0xc0
 8005d54:	d01f      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5a:	d01e      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d5c:	e018      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5e:	4a6c      	ldr	r2, [pc, #432]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d60:	4b6b      	ldr	r3, [pc, #428]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d6a:	e017      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f8f8 	bl	8006f68 <RCCEx_PLL2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d7c:	e00e      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3324      	adds	r3, #36	; 0x24
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 f9a1 	bl	80070cc <RCCEx_PLL3_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d8e:	e005      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
      break;
 8005d94:	e002      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005da2:	495b      	ldr	r1, [pc, #364]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005da4:	4b5a      	ldr	r3, [pc, #360]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	4313      	orrs	r3, r2
 8005db2:	650b      	str	r3, [r1, #80]	; 0x50
 8005db4:	e001      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d044      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd0:	d01f      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd6:	d805      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de0:	d00e      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005de2:	e01f      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005de4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005de8:	d01f      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dee:	d01e      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005df0:	e018      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df2:	4a47      	ldr	r2, [pc, #284]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005df4:	4b46      	ldr	r3, [pc, #280]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dfe:	e017      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3304      	adds	r3, #4
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 f8ae 	bl	8006f68 <RCCEx_PLL2_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e10:	e00e      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3324      	adds	r3, #36	; 0x24
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 f957 	bl	80070cc <RCCEx_PLL3_Config>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e22:	e005      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
      break;
 8005e28:	e002      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005e2a:	bf00      	nop
 8005e2c:	e000      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e36:	4936      	ldr	r1, [pc, #216]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e38:	4b35      	ldr	r3, [pc, #212]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e46:	4313      	orrs	r3, r2
 8005e48:	658b      	str	r3, [r1, #88]	; 0x58
 8005e4a:	e001      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
 8005e4e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d044      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e66:	d01f      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e6c:	d805      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005e72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e76:	d00e      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005e78:	e01f      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005e7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e7e:	d01f      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e84:	d01e      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e86:	e018      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e88:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e8a:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e94:	e017      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 f863 	bl	8006f68 <RCCEx_PLL2_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005ea6:	e00e      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3324      	adds	r3, #36	; 0x24
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 f90c 	bl	80070cc <RCCEx_PLL3_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005eb8:	e005      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ebe:	e002      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005ec0:	bf00      	nop
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ecc:	4910      	ldr	r1, [pc, #64]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005edc:	4313      	orrs	r3, r2
 8005ede:	658b      	str	r3, [r1, #88]	; 0x58
 8005ee0:	e001      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d035      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d00c      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d802      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01b      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005f02:	e017      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d00c      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005f08:	2b30      	cmp	r3, #48	; 0x30
 8005f0a:	d018      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005f0c:	e012      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005f0e:	bf00      	nop
 8005f10:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f14:	4aaf      	ldr	r2, [pc, #700]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f16:	4baf      	ldr	r3, [pc, #700]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f20:	e00e      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3304      	adds	r3, #4
 8005f26:	2102      	movs	r1, #2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 f81d 	bl	8006f68 <RCCEx_PLL2_Config>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f32:	e005      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
      break;
 8005f38:	e002      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f46:	49a3      	ldr	r1, [pc, #652]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f48:	4ba2      	ldr	r3, [pc, #648]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f54:	4313      	orrs	r3, r2
 8005f56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f58:	e001      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d042      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f72:	d01f      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f78:	d805      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	d00e      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005f84:	e01f      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005f86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f8a:	d01f      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f90:	d01e      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005f92:	e018      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f94:	4a8f      	ldr	r2, [pc, #572]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f96:	4b8f      	ldr	r3, [pc, #572]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fa0:	e017      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 ffdd 	bl	8006f68 <RCCEx_PLL2_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fb2:	e00e      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3324      	adds	r3, #36	; 0x24
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 f886 	bl	80070cc <RCCEx_PLL3_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fc4:	e005      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fca:	e002      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005fcc:	bf00      	nop
 8005fce:	e000      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fd8:	497e      	ldr	r1, [pc, #504]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fda:	4b7e      	ldr	r3, [pc, #504]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8005fea:	e001      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d042      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006004:	d01b      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800600a:	d805      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d022      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006016:	e01b      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006018:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800601c:	d01d      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800601e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006022:	d01c      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006024:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006028:	d01b      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800602a:	e011      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f000 ff98 	bl	8006f68 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800603c:	e012      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3324      	adds	r3, #36	; 0x24
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f001 f841 	bl	80070cc <RCCEx_PLL3_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800604e:	e009      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
      break;
 8006054:	e006      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006056:	bf00      	nop
 8006058:	e004      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800605a:	bf00      	nop
 800605c:	e002      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800605e:	bf00      	nop
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800606a:	495a      	ldr	r1, [pc, #360]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800606c:	4b59      	ldr	r3, [pc, #356]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006078:	4313      	orrs	r3, r2
 800607a:	650b      	str	r3, [r1, #80]	; 0x50
 800607c:	e001      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d044      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006098:	d01b      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800609a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800609e:	d805      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d022      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80060a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a8:	d00a      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80060aa:	e01b      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b0:	d01d      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80060b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060b6:	d01c      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80060b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060bc:	d01b      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060be:	e011      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 ff4e 	bl	8006f68 <RCCEx_PLL2_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060d0:	e012      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3324      	adds	r3, #36	; 0x24
 80060d6:	2101      	movs	r1, #1
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fff7 	bl	80070cc <RCCEx_PLL3_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060e2:	e009      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	75fb      	strb	r3, [r7, #23]
      break;
 80060e8:	e006      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80060ea:	bf00      	nop
 80060ec:	e004      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80060ee:	bf00      	nop
 80060f0:	e002      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80060f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060fe:	4935      	ldr	r1, [pc, #212]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006100:	4b34      	ldr	r3, [pc, #208]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006104:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800610e:	4313      	orrs	r3, r2
 8006110:	658b      	str	r3, [r1, #88]	; 0x58
 8006112:	e001      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d02d      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800612c:	d005      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800612e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006132:	d009      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d013      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006138:	e00f      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613a:	4a26      	ldr	r2, [pc, #152]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800613c:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006146:	e00c      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3304      	adds	r3, #4
 800614c:	2101      	movs	r1, #1
 800614e:	4618      	mov	r0, r3
 8006150:	f000 ff0a 	bl	8006f68 <RCCEx_PLL2_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006158:	e003      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
      break;
 800615e:	e000      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006168:	491a      	ldr	r1, [pc, #104]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800616a:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800616c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006176:	4313      	orrs	r3, r2
 8006178:	650b      	str	r3, [r1, #80]	; 0x50
 800617a:	e001      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d035      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006190:	2b03      	cmp	r3, #3
 8006192:	d81b      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061d9 	.word	0x080061d9
 80061a0:	080061ad 	.word	0x080061ad
 80061a4:	080061bb 	.word	0x080061bb
 80061a8:	080061d9 	.word	0x080061d9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ac:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80061ae:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061b8:	e00f      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	2102      	movs	r1, #2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fed1 	bl	8006f68 <RCCEx_PLL2_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061ca:	e006      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	75fb      	strb	r3, [r7, #23]
      break;
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80061d2:	bf00      	nop
 80061d4:	58024400 	.word	0x58024400
      break;
 80061d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061e0:	49ba      	ldr	r1, [pc, #744]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061e2:	4bba      	ldr	r3, [pc, #744]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e6:	f023 0203 	bic.w	r2, r3, #3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	4313      	orrs	r3, r2
 80061f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061f2:	e001      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
 80061f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8086 	beq.w	8006312 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006206:	4ab2      	ldr	r2, [pc, #712]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006208:	4bb1      	ldr	r3, [pc, #708]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006212:	f7fa ff1d 	bl	8001050 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006218:	e009      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800621a:	f7fa ff19 	bl	8001050 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b64      	cmp	r3, #100	; 0x64
 8006226:	d902      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	75fb      	strb	r3, [r7, #23]
        break;
 800622c:	e005      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800622e:	4ba8      	ldr	r3, [pc, #672]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0ef      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d166      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006240:	4ba2      	ldr	r3, [pc, #648]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800624a:	4053      	eors	r3, r2
 800624c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006250:	2b00      	cmp	r3, #0
 8006252:	d013      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006254:	4b9d      	ldr	r3, [pc, #628]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800625e:	4a9b      	ldr	r2, [pc, #620]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006260:	4b9a      	ldr	r3, [pc, #616]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800626a:	4a98      	ldr	r2, [pc, #608]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800626c:	4b97      	ldr	r3, [pc, #604]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006274:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006276:	4a95      	ldr	r2, [pc, #596]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006286:	d115      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006288:	f7fa fee2 	bl	8001050 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628e:	e00b      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006290:	f7fa fede 	bl	8001050 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f241 3288 	movw	r2, #5000	; 0x1388
 800629e:	4293      	cmp	r3, r2
 80062a0:	d902      	bls.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	75fb      	strb	r3, [r7, #23]
            break;
 80062a6:	e005      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062a8:	4b88      	ldr	r3, [pc, #544]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ed      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d126      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c8:	d10d      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80062ca:	4880      	ldr	r0, [pc, #512]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062cc:	4b7f      	ldr	r3, [pc, #508]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062da:	0919      	lsrs	r1, r3, #4
 80062dc:	4b7d      	ldr	r3, [pc, #500]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80062de:	400b      	ands	r3, r1
 80062e0:	4313      	orrs	r3, r2
 80062e2:	6103      	str	r3, [r0, #16]
 80062e4:	e005      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80062e6:	4a79      	ldr	r2, [pc, #484]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062e8:	4b78      	ldr	r3, [pc, #480]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062f0:	6113      	str	r3, [r2, #16]
 80062f2:	4976      	ldr	r1, [pc, #472]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062f4:	4b75      	ldr	r3, [pc, #468]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006302:	4313      	orrs	r3, r2
 8006304:	670b      	str	r3, [r1, #112]	; 0x70
 8006306:	e004      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	75bb      	strb	r3, [r7, #22]
 800630c:	e001      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d07d      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006322:	2b28      	cmp	r3, #40	; 0x28
 8006324:	d866      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	080063fb 	.word	0x080063fb
 8006330:	080063f5 	.word	0x080063f5
 8006334:	080063f5 	.word	0x080063f5
 8006338:	080063f5 	.word	0x080063f5
 800633c:	080063f5 	.word	0x080063f5
 8006340:	080063f5 	.word	0x080063f5
 8006344:	080063f5 	.word	0x080063f5
 8006348:	080063f5 	.word	0x080063f5
 800634c:	080063d1 	.word	0x080063d1
 8006350:	080063f5 	.word	0x080063f5
 8006354:	080063f5 	.word	0x080063f5
 8006358:	080063f5 	.word	0x080063f5
 800635c:	080063f5 	.word	0x080063f5
 8006360:	080063f5 	.word	0x080063f5
 8006364:	080063f5 	.word	0x080063f5
 8006368:	080063f5 	.word	0x080063f5
 800636c:	080063e3 	.word	0x080063e3
 8006370:	080063f5 	.word	0x080063f5
 8006374:	080063f5 	.word	0x080063f5
 8006378:	080063f5 	.word	0x080063f5
 800637c:	080063f5 	.word	0x080063f5
 8006380:	080063f5 	.word	0x080063f5
 8006384:	080063f5 	.word	0x080063f5
 8006388:	080063f5 	.word	0x080063f5
 800638c:	080063fb 	.word	0x080063fb
 8006390:	080063f5 	.word	0x080063f5
 8006394:	080063f5 	.word	0x080063f5
 8006398:	080063f5 	.word	0x080063f5
 800639c:	080063f5 	.word	0x080063f5
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	080063f5 	.word	0x080063f5
 80063a8:	080063f5 	.word	0x080063f5
 80063ac:	080063fb 	.word	0x080063fb
 80063b0:	080063f5 	.word	0x080063f5
 80063b4:	080063f5 	.word	0x080063f5
 80063b8:	080063f5 	.word	0x080063f5
 80063bc:	080063f5 	.word	0x080063f5
 80063c0:	080063f5 	.word	0x080063f5
 80063c4:	080063f5 	.word	0x080063f5
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	080063fb 	.word	0x080063fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	2101      	movs	r1, #1
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fdc6 	bl	8006f68 <RCCEx_PLL2_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063e0:	e00c      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3324      	adds	r3, #36	; 0x24
 80063e6:	2101      	movs	r1, #1
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fe6f 	bl	80070cc <RCCEx_PLL3_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063f2:	e003      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	75fb      	strb	r3, [r7, #23]
      break;
 80063f8:	e000      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80063fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d109      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006402:	4932      	ldr	r1, [pc, #200]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006404:	4b31      	ldr	r3, [pc, #196]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006410:	4313      	orrs	r3, r2
 8006412:	654b      	str	r3, [r1, #84]	; 0x54
 8006414:	e001      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d037      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642a:	2b05      	cmp	r3, #5
 800642c:	d820      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006477 	.word	0x08006477
 8006438:	0800644d 	.word	0x0800644d
 800643c:	0800645f 	.word	0x0800645f
 8006440:	08006477 	.word	0x08006477
 8006444:	08006477 	.word	0x08006477
 8006448:	08006477 	.word	0x08006477
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fd88 	bl	8006f68 <RCCEx_PLL2_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800645c:	e00c      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3324      	adds	r3, #36	; 0x24
 8006462:	2101      	movs	r1, #1
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fe31 	bl	80070cc <RCCEx_PLL3_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800646e:	e003      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]
      break;
 8006474:	e000      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800647e:	4913      	ldr	r1, [pc, #76]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006480:	4b12      	ldr	r3, [pc, #72]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006484:	f023 0207 	bic.w	r2, r3, #7
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648c:	4313      	orrs	r3, r2
 800648e:	654b      	str	r3, [r1, #84]	; 0x54
 8006490:	e001      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d040      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	d827      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	08006503 	.word	0x08006503
 80064b8:	080064d9 	.word	0x080064d9
 80064bc:	080064eb 	.word	0x080064eb
 80064c0:	08006503 	.word	0x08006503
 80064c4:	08006503 	.word	0x08006503
 80064c8:	08006503 	.word	0x08006503
 80064cc:	58024400 	.word	0x58024400
 80064d0:	58024800 	.word	0x58024800
 80064d4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3304      	adds	r3, #4
 80064dc:	2101      	movs	r1, #1
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fd42 	bl	8006f68 <RCCEx_PLL2_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064e8:	e00c      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3324      	adds	r3, #36	; 0x24
 80064ee:	2101      	movs	r1, #1
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fdeb 	bl	80070cc <RCCEx_PLL3_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064fa:	e003      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006500:	e000      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800650a:	49b2      	ldr	r1, [pc, #712]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800650c:	4bb1      	ldr	r3, [pc, #708]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800650e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006510:	f023 0207 	bic.w	r2, r3, #7
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	4313      	orrs	r3, r2
 800651c:	658b      	str	r3, [r1, #88]	; 0x58
 800651e:	e001      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d044      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800653a:	d01b      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800653c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006540:	d805      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d022      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800654a:	d00a      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800654c:	e01b      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d01d      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006558:	d01c      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800655a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800655e:	d01b      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006560:	e011      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3304      	adds	r3, #4
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fcfd 	bl	8006f68 <RCCEx_PLL2_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006572:	e012      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	2102      	movs	r1, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fda6 	bl	80070cc <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006584:	e009      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
      break;
 800658a:	e006      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800658c:	bf00      	nop
 800658e:	e004      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006590:	bf00      	nop
 8006592:	e002      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065a0:	498c      	ldr	r1, [pc, #560]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065a2:	4b8c      	ldr	r3, [pc, #560]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b0:	4313      	orrs	r3, r2
 80065b2:	654b      	str	r3, [r1, #84]	; 0x54
 80065b4:	e001      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d044      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d0:	d01b      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80065d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d6:	d805      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d022      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80065dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e0:	d00a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80065e2:	e01b      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80065e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e8:	d01d      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80065ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065ee:	d01c      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80065f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065f4:	d01b      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80065f6:	e011      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fcb2 	bl	8006f68 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006608:	e012      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3324      	adds	r3, #36	; 0x24
 800660e:	2102      	movs	r1, #2
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fd5b 	bl	80070cc <RCCEx_PLL3_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800661a:	e009      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
      break;
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006622:	bf00      	nop
 8006624:	e004      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006626:	bf00      	nop
 8006628:	e002      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800662e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006636:	4967      	ldr	r1, [pc, #412]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006638:	4b66      	ldr	r3, [pc, #408]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006646:	4313      	orrs	r3, r2
 8006648:	658b      	str	r3, [r1, #88]	; 0x58
 800664a:	e001      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d044      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006666:	d01b      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800666c:	d805      	bhi.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d022      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006676:	d00a      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006678:	e01b      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800667a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667e:	d01d      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006680:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006684:	d01c      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800668a:	d01b      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800668c:	e011      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3304      	adds	r3, #4
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fc67 	bl	8006f68 <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800669e:	e012      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	2102      	movs	r1, #2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fd10 	bl	80070cc <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066b0:	e009      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
      break;
 80066b6:	e006      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80066b8:	bf00      	nop
 80066ba:	e004      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80066bc:	bf00      	nop
 80066be:	e002      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80066c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066cc:	4941      	ldr	r1, [pc, #260]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80066ce:	4b41      	ldr	r3, [pc, #260]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066dc:	4313      	orrs	r3, r2
 80066de:	658b      	str	r3, [r1, #88]	; 0x58
 80066e0:	e001      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d01a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fc:	d10a      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3324      	adds	r3, #36	; 0x24
 8006702:	2102      	movs	r1, #2
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fce1 	bl	80070cc <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006714:	492f      	ldr	r1, [pc, #188]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006724:	4313      	orrs	r3, r2
 8006726:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800673a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673e:	d10a      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3324      	adds	r3, #36	; 0x24
 8006744:	2102      	movs	r1, #2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fcc0 	bl	80070cc <RCCEx_PLL3_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006756:	491f      	ldr	r1, [pc, #124]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800675a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006766:	4313      	orrs	r3, r2
 8006768:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d032      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006780:	d00d      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006786:	d016      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d111      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3304      	adds	r3, #4
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fbe8 	bl	8006f68 <RCCEx_PLL2_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800679c:	e00c      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	2102      	movs	r1, #2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fc91 	bl	80070cc <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067ae:	e003      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]
      break;
 80067b4:	e000      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80067b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10c      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067be:	4905      	ldr	r1, [pc, #20]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80067c0:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80067c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067ce:	4313      	orrs	r3, r2
 80067d0:	658b      	str	r3, [r1, #88]	; 0x58
 80067d2:	e003      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80067d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d02f      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067f2:	d00c      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80067f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067f8:	d015      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80067fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067fe:	d10f      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006800:	4a81      	ldr	r2, [pc, #516]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006802:	4b81      	ldr	r3, [pc, #516]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800680c:	e00c      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3324      	adds	r3, #36	; 0x24
 8006812:	2101      	movs	r1, #1
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fc59 	bl	80070cc <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800681e:	e003      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
      break;
 8006824:	e000      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800682e:	4976      	ldr	r1, [pc, #472]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006830:	4b75      	ldr	r3, [pc, #468]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800683e:	4313      	orrs	r3, r2
 8006840:	654b      	str	r3, [r1, #84]	; 0x54
 8006842:	e001      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d029      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d007      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006862:	e00f      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006864:	4a68      	ldr	r2, [pc, #416]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006866:	4b68      	ldr	r3, [pc, #416]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800686e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006870:	e00b      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
 8006876:	2102      	movs	r1, #2
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fb75 	bl	8006f68 <RCCEx_PLL2_Config>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006882:	e002      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006890:	495d      	ldr	r1, [pc, #372]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006892:	4b5d      	ldr	r3, [pc, #372]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006896:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689e:	4313      	orrs	r3, r2
 80068a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068a2:	e001      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3324      	adds	r3, #36	; 0x24
 80068b8:	2102      	movs	r1, #2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fc06 	bl	80070cc <RCCEx_PLL3_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d02f      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d00c      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80068e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e4:	d802      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80068ea:	e00d      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80068ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f0:	d00f      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80068f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068f6:	d00e      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80068f8:	e006      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fa:	4a43      	ldr	r2, [pc, #268]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80068fc:	4b42      	ldr	r3, [pc, #264]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006904:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006906:	e007      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
      break;
 800690c:	e004      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800691e:	493a      	ldr	r1, [pc, #232]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006920:	4b39      	ldr	r3, [pc, #228]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800692c:	4313      	orrs	r3, r2
 800692e:	654b      	str	r3, [r1, #84]	; 0x54
 8006930:	e001      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006942:	4931      	ldr	r1, [pc, #196]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006944:	4b30      	ldr	r3, [pc, #192]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006950:	4313      	orrs	r3, r2
 8006952:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006960:	4929      	ldr	r1, [pc, #164]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006962:	4b29      	ldr	r3, [pc, #164]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006970:	4313      	orrs	r3, r2
 8006972:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006980:	4921      	ldr	r1, [pc, #132]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006982:	4b21      	ldr	r3, [pc, #132]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698e:	4313      	orrs	r3, r2
 8006990:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800699e:	4a1a      	ldr	r2, [pc, #104]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80069a0:	4b19      	ldr	r3, [pc, #100]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069a8:	6113      	str	r3, [r2, #16]
 80069aa:	4917      	ldr	r1, [pc, #92]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80069ac:	4b16      	ldr	r3, [pc, #88]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069b6:	4313      	orrs	r3, r2
 80069b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	da08      	bge.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069c2:	4911      	ldr	r1, [pc, #68]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80069c4:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80069c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d0:	4313      	orrs	r3, r2
 80069d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d009      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069e0:	4909      	ldr	r1, [pc, #36]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80069e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	4313      	orrs	r3, r2
 80069f2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80069f4:	7dbb      	ldrb	r3, [r7, #22]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xdee>
  {
    return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  }
  return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	58024400 	.word	0x58024400

08006a0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a10:	f7ff f8a2 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 8006a14:	4601      	mov	r1, r0
 8006a16:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	091b      	lsrs	r3, r3, #4
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	4a04      	ldr	r2, [pc, #16]	; (8006a34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a22:	5cd3      	ldrb	r3, [r2, r3]
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	58024400 	.word	0x58024400
 8006a34:	08009038 	.word	0x08009038

08006a38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b089      	sub	sp, #36	; 0x24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a40:	4b9d      	ldr	r3, [pc, #628]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006a4a:	4b9b      	ldr	r3, [pc, #620]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	0b1b      	lsrs	r3, r3, #12
 8006a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a56:	4b98      	ldr	r3, [pc, #608]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	091b      	lsrs	r3, r3, #4
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a62:	4b95      	ldr	r3, [pc, #596]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	08db      	lsrs	r3, r3, #3
 8006a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	fb02 f303 	mul.w	r3, r2, r3
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 810a 	beq.w	8006c9a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d05a      	beq.n	8006b42 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d302      	bcc.n	8006a96 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d078      	beq.n	8006b86 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006a94:	e099      	b.n	8006bca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a96:	4b88      	ldr	r3, [pc, #544]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d02d      	beq.n	8006afe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aa2:	4b85      	ldr	r3, [pc, #532]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	08db      	lsrs	r3, r3, #3
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	4a83      	ldr	r2, [pc, #524]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006acc:	4b7a      	ldr	r3, [pc, #488]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006adc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006afc:	e087      	b.n	8006c0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b08:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b10:	4b69      	ldr	r3, [pc, #420]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b20:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b24:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b40:	e065      	b.n	8006c0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b54:	4b58      	ldr	r3, [pc, #352]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b64:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b68:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b84:	e043      	b.n	8006c0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b90:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b98:	4b47      	ldr	r3, [pc, #284]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bac:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bc8:	e021      	b.n	8006c0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bdc:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bec:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c0e:	4b2a      	ldr	r3, [pc, #168]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	0a5b      	lsrs	r3, r3, #9
 8006c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c34:	ee17 2a90 	vmov	r2, s15
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	0c1b      	lsrs	r3, r3, #16
 8006c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c62:	ee17 2a90 	vmov	r2, s15
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006c6a:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	0e1b      	lsrs	r3, r3, #24
 8006c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c90:	ee17 2a90 	vmov	r2, s15
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c98:	e008      	b.n	8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	3724      	adds	r7, #36	; 0x24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	58024400 	.word	0x58024400
 8006cbc:	03d09000 	.word	0x03d09000
 8006cc0:	46000000 	.word	0x46000000
 8006cc4:	4c742400 	.word	0x4c742400
 8006cc8:	4a742400 	.word	0x4a742400
 8006ccc:	4af42400 	.word	0x4af42400

08006cd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b089      	sub	sp, #36	; 0x24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cd8:	4b9d      	ldr	r3, [pc, #628]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ce2:	4b9b      	ldr	r3, [pc, #620]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	0d1b      	lsrs	r3, r3, #20
 8006ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cee:	4b98      	ldr	r3, [pc, #608]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006cfa:	4b95      	ldr	r3, [pc, #596]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 810a 	beq.w	8006f32 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d05a      	beq.n	8006dda <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d302      	bcc.n	8006d2e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d078      	beq.n	8006e1e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006d2c:	e099      	b.n	8006e62 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d2e:	4b88      	ldr	r3, [pc, #544]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d02d      	beq.n	8006d96 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d3a:	4b85      	ldr	r3, [pc, #532]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	4a83      	ldr	r2, [pc, #524]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d64:	4b7a      	ldr	r3, [pc, #488]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	ee07 3a90 	vmov	s15, r3
 8006d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d90:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d94:	e087      	b.n	8006ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da8:	4b69      	ldr	r3, [pc, #420]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dbc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dd8:	e065      	b.n	8006ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dec:	4b58      	ldr	r3, [pc, #352]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e1c:	e043      	b.n	8006ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e30:	4b47      	ldr	r3, [pc, #284]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e60:	e021      	b.n	8006ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e74:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006ea6:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	0a5b      	lsrs	r3, r3, #9
 8006eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ecc:	ee17 2a90 	vmov	r2, s15
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ed4:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efa:	ee17 2a90 	vmov	r2, s15
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	0e1b      	lsrs	r3, r3, #24
 8006f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f28:	ee17 2a90 	vmov	r2, s15
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f30:	e008      	b.n	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
}
 8006f44:	bf00      	nop
 8006f46:	3724      	adds	r7, #36	; 0x24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	58024400 	.word	0x58024400
 8006f54:	03d09000 	.word	0x03d09000
 8006f58:	46000000 	.word	0x46000000
 8006f5c:	4c742400 	.word	0x4c742400
 8006f60:	4a742400 	.word	0x4a742400
 8006f64:	4af42400 	.word	0x4af42400

08006f68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f76:	4b53      	ldr	r3, [pc, #332]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d101      	bne.n	8006f86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e099      	b.n	80070ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f86:	4a4f      	ldr	r2, [pc, #316]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f88:	4b4e      	ldr	r3, [pc, #312]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f92:	f7fa f85d 	bl	8001050 <HAL_GetTick>
 8006f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f98:	e008      	b.n	8006fac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f9a:	f7fa f859 	bl	8001050 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e086      	b.n	80070ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fac:	4b45      	ldr	r3, [pc, #276]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f0      	bne.n	8006f9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fb8:	4942      	ldr	r1, [pc, #264]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fba:	4b42      	ldr	r3, [pc, #264]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	031b      	lsls	r3, r3, #12
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	628b      	str	r3, [r1, #40]	; 0x28
 8006fcc:	493d      	ldr	r1, [pc, #244]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	025b      	lsls	r3, r3, #9
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ffe:	4313      	orrs	r3, r2
 8007000:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007002:	4930      	ldr	r1, [pc, #192]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007004:	4b2f      	ldr	r3, [pc, #188]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007014:	492b      	ldr	r1, [pc, #172]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007016:	4b2b      	ldr	r3, [pc, #172]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	f023 0220 	bic.w	r2, r3, #32
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	4313      	orrs	r3, r2
 8007024:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007026:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007028:	4b26      	ldr	r3, [pc, #152]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	f023 0310 	bic.w	r3, r3, #16
 8007030:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007032:	4924      	ldr	r1, [pc, #144]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007034:	4b23      	ldr	r3, [pc, #140]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007038:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <RCCEx_PLL2_Config+0x160>)
 800703a:	4013      	ands	r3, r2
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	69d2      	ldr	r2, [r2, #28]
 8007040:	00d2      	lsls	r2, r2, #3
 8007042:	4313      	orrs	r3, r2
 8007044:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007046:	4a1f      	ldr	r2, [pc, #124]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007048:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	f043 0310 	orr.w	r3, r3, #16
 8007050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d106      	bne.n	8007066 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007058:	4a1a      	ldr	r2, [pc, #104]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800705a:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007064:	e00f      	b.n	8007086 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d106      	bne.n	800707a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800706c:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007078:	e005      	b.n	8007086 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800707a:	4a12      	ldr	r2, [pc, #72]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800707c:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007086:	4a0f      	ldr	r2, [pc, #60]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007088:	4b0e      	ldr	r3, [pc, #56]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7f9 ffdd 	bl	8001050 <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007098:	e008      	b.n	80070ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800709a:	f7f9 ffd9 	bl	8001050 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e006      	b.n	80070ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0f0      	beq.n	800709a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	58024400 	.word	0x58024400
 80070c8:	ffff0007 	.word	0xffff0007

080070cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070da:	4b53      	ldr	r3, [pc, #332]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d101      	bne.n	80070ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e099      	b.n	800721e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070ea:	4a4f      	ldr	r2, [pc, #316]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070ec:	4b4e      	ldr	r3, [pc, #312]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f6:	f7f9 ffab 	bl	8001050 <HAL_GetTick>
 80070fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070fc:	e008      	b.n	8007110 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070fe:	f7f9 ffa7 	bl	8001050 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e086      	b.n	800721e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007110:	4b45      	ldr	r3, [pc, #276]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f0      	bne.n	80070fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800711c:	4942      	ldr	r1, [pc, #264]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800711e:	4b42      	ldr	r3, [pc, #264]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	051b      	lsls	r3, r3, #20
 800712c:	4313      	orrs	r3, r2
 800712e:	628b      	str	r3, [r1, #40]	; 0x28
 8007130:	493d      	ldr	r1, [pc, #244]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	3b01      	subs	r3, #1
 8007138:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	3b01      	subs	r3, #1
 8007142:	025b      	lsls	r3, r3, #9
 8007144:	b29b      	uxth	r3, r3
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	3b01      	subs	r3, #1
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	3b01      	subs	r3, #1
 800715c:	061b      	lsls	r3, r3, #24
 800715e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007162:	4313      	orrs	r3, r2
 8007164:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007166:	4930      	ldr	r1, [pc, #192]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007168:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007178:	492b      	ldr	r1, [pc, #172]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800717a:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	4313      	orrs	r3, r2
 8007188:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800718a:	4a27      	ldr	r2, [pc, #156]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800718c:	4b26      	ldr	r3, [pc, #152]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007194:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007196:	4924      	ldr	r1, [pc, #144]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007198:	4b23      	ldr	r3, [pc, #140]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800719a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800719c:	4b23      	ldr	r3, [pc, #140]	; (800722c <RCCEx_PLL3_Config+0x160>)
 800719e:	4013      	ands	r3, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	69d2      	ldr	r2, [r2, #28]
 80071a4:	00d2      	lsls	r2, r2, #3
 80071a6:	4313      	orrs	r3, r2
 80071a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071aa:	4a1f      	ldr	r2, [pc, #124]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071ac:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071bc:	4a1a      	ldr	r2, [pc, #104]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071be:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071c8:	e00f      	b.n	80071ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d106      	bne.n	80071de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071d0:	4a15      	ldr	r2, [pc, #84]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071dc:	e005      	b.n	80071ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071de:	4a12      	ldr	r2, [pc, #72]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071e0:	4b11      	ldr	r3, [pc, #68]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071ea:	4a0f      	ldr	r2, [pc, #60]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	4b0e      	ldr	r3, [pc, #56]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f6:	f7f9 ff2b 	bl	8001050 <HAL_GetTick>
 80071fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071fc:	e008      	b.n	8007210 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071fe:	f7f9 ff27 	bl	8001050 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e006      	b.n	800721e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0f0      	beq.n	80071fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	58024400 	.word	0x58024400
 800722c:	ffff0007 	.word	0xffff0007

08007230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e042      	b.n	80072c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7f9 fd0f 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2224      	movs	r2, #36	; 0x24
 800725e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fc86 	bl	8007b84 <UART_SetConfig>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e022      	b.n	80072c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fa1a 	bl	80086c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6812      	ldr	r2, [r2, #0]
 8007298:	6852      	ldr	r2, [r2, #4]
 800729a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800729e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	6892      	ldr	r2, [r2, #8]
 80072aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	6812      	ldr	r2, [r2, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 faa1 	bl	8008808 <UART_CheckIdleState>
 80072c6:	4603      	mov	r3, r0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	; 0x28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d17a      	bne.n	80073de <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <HAL_UART_Transmit_DMA+0x24>
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e073      	b.n	80073e0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_UART_Transmit_DMA+0x36>
 8007302:	2302      	movs	r3, #2
 8007304:	e06c      	b.n	80073e0 <HAL_UART_Transmit_DMA+0x110>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2221      	movs	r2, #33	; 0x21
 8007330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007338:	2b00      	cmp	r3, #0
 800733a:	d02c      	beq.n	8007396 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007340:	4a29      	ldr	r2, [pc, #164]	; (80073e8 <HAL_UART_Transmit_DMA+0x118>)
 8007342:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007348:	4a28      	ldr	r2, [pc, #160]	; (80073ec <HAL_UART_Transmit_DMA+0x11c>)
 800734a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007350:	4a27      	ldr	r2, [pc, #156]	; (80073f0 <HAL_UART_Transmit_DMA+0x120>)
 8007352:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007358:	2200      	movs	r2, #0
 800735a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007364:	4619      	mov	r1, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3328      	adds	r3, #40	; 0x28
 800736c:	461a      	mov	r2, r3
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	f7fa fb9e 	bl	8001ab0 <HAL_DMA_Start_IT>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00d      	beq.n	8007396 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2210      	movs	r2, #16
 800737e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e024      	b.n	80073e0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2240      	movs	r2, #64	; 0x40
 800739c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	613b      	str	r3, [r7, #16]
   return(result);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3308      	adds	r3, #8
 80073c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c6:	623a      	str	r2, [r7, #32]
 80073c8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	69f9      	ldr	r1, [r7, #28]
 80073cc:	6a3a      	ldr	r2, [r7, #32]
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e5      	bne.n	80073a6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3728      	adds	r7, #40	; 0x28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	08008b7d 	.word	0x08008b7d
 80073ec:	08008c13 	.word	0x08008c13
 80073f0:	08008c2f 	.word	0x08008c2f

080073f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b0ba      	sub	sp, #232	; 0xe8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800741a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800741e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007422:	4013      	ands	r3, r2
 8007424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800742c:	2b00      	cmp	r3, #0
 800742e:	d11b      	bne.n	8007468 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d015      	beq.n	8007468 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800743c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007440:	f003 0320 	and.w	r3, r3, #32
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800744c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 835b 	beq.w	8007b14 <HAL_UART_IRQHandler+0x720>
      {
        huart->RxISR(huart);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
      }
      return;
 8007466:	e355      	b.n	8007b14 <HAL_UART_IRQHandler+0x720>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 811f 	beq.w	80076b0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007472:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007476:	4b8b      	ldr	r3, [pc, #556]	; (80076a4 <HAL_UART_IRQHandler+0x2b0>)
 8007478:	4013      	ands	r3, r2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800747e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007482:	4b89      	ldr	r3, [pc, #548]	; (80076a8 <HAL_UART_IRQHandler+0x2b4>)
 8007484:	4013      	ands	r3, r2
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 8112 	beq.w	80076b0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800748c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d011      	beq.n	80074bc <HAL_UART_IRQHandler+0xc8>
 8007498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800749c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00b      	beq.n	80074bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2201      	movs	r2, #1
 80074aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b2:	f043 0201 	orr.w	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d011      	beq.n	80074ec <HAL_UART_IRQHandler+0xf8>
 80074c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2202      	movs	r2, #2
 80074da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e2:	f043 0204 	orr.w	r2, r3, #4
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d011      	beq.n	800751c <HAL_UART_IRQHandler+0x128>
 80074f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2204      	movs	r2, #4
 800750a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007512:	f043 0202 	orr.w	r2, r3, #2
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800751c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d017      	beq.n	8007558 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007534:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007538:	4b5a      	ldr	r3, [pc, #360]	; (80076a4 <HAL_UART_IRQHandler+0x2b0>)
 800753a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2208      	movs	r2, #8
 8007546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800754e:	f043 0208 	orr.w	r2, r3, #8
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007560:	2b00      	cmp	r3, #0
 8007562:	d012      	beq.n	800758a <HAL_UART_IRQHandler+0x196>
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007580:	f043 0220 	orr.w	r2, r3, #32
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 82c1 	beq.w	8007b18 <HAL_UART_IRQHandler+0x724>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d013      	beq.n	80075ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d105      	bne.n	80075ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d005      	beq.n	80075ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d04f      	beq.n	800768e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 fa5e 	bl	8008ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fe:	2b40      	cmp	r3, #64	; 0x40
 8007600:	d141      	bne.n	8007686 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3308      	adds	r3, #8
 8007608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800761c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3308      	adds	r3, #8
 800762a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800762e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800763a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1d9      	bne.n	8007602 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d013      	beq.n	800767e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800765a:	4a14      	ldr	r2, [pc, #80]	; (80076ac <HAL_UART_IRQHandler+0x2b8>)
 800765c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007662:	4618      	mov	r0, r3
 8007664:	f7fa ffac 	bl	80025c0 <HAL_DMA_Abort_IT>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d017      	beq.n	800769e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007678:	4610      	mov	r0, r2
 800767a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	e00f      	b.n	800769e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa6a 	bl	8007b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007684:	e00b      	b.n	800769e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa66 	bl	8007b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	e007      	b.n	800769e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa62 	bl	8007b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800769c:	e23c      	b.n	8007b18 <HAL_UART_IRQHandler+0x724>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769e:	bf00      	nop
    return;
 80076a0:	e23a      	b.n	8007b18 <HAL_UART_IRQHandler+0x724>
 80076a2:	bf00      	nop
 80076a4:	10000001 	.word	0x10000001
 80076a8:	04000120 	.word	0x04000120
 80076ac:	08008caf 	.word	0x08008caf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	f040 81ce 	bne.w	8007a56 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 81c7 	beq.w	8007a56 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 81c0 	beq.w	8007a56 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2210      	movs	r2, #16
 80076dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b40      	cmp	r3, #64	; 0x40
 80076ea:	f040 813b 	bne.w	8007964 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a8b      	ldr	r2, [pc, #556]	; (8007924 <HAL_UART_IRQHandler+0x530>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d059      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a89      	ldr	r2, [pc, #548]	; (8007928 <HAL_UART_IRQHandler+0x534>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d053      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a87      	ldr	r2, [pc, #540]	; (800792c <HAL_UART_IRQHandler+0x538>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d04d      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a85      	ldr	r2, [pc, #532]	; (8007930 <HAL_UART_IRQHandler+0x53c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d047      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a83      	ldr	r2, [pc, #524]	; (8007934 <HAL_UART_IRQHandler+0x540>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d041      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a81      	ldr	r2, [pc, #516]	; (8007938 <HAL_UART_IRQHandler+0x544>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d03b      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a7f      	ldr	r2, [pc, #508]	; (800793c <HAL_UART_IRQHandler+0x548>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d035      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a7d      	ldr	r2, [pc, #500]	; (8007940 <HAL_UART_IRQHandler+0x54c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d02f      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a7b      	ldr	r2, [pc, #492]	; (8007944 <HAL_UART_IRQHandler+0x550>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d029      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a79      	ldr	r2, [pc, #484]	; (8007948 <HAL_UART_IRQHandler+0x554>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d023      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a77      	ldr	r2, [pc, #476]	; (800794c <HAL_UART_IRQHandler+0x558>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01d      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a75      	ldr	r2, [pc, #468]	; (8007950 <HAL_UART_IRQHandler+0x55c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d017      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a73      	ldr	r2, [pc, #460]	; (8007954 <HAL_UART_IRQHandler+0x560>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d011      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a71      	ldr	r2, [pc, #452]	; (8007958 <HAL_UART_IRQHandler+0x564>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00b      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a6f      	ldr	r2, [pc, #444]	; (800795c <HAL_UART_IRQHandler+0x568>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d005      	beq.n	80077ae <HAL_UART_IRQHandler+0x3ba>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a6d      	ldr	r2, [pc, #436]	; (8007960 <HAL_UART_IRQHandler+0x56c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d105      	bne.n	80077ba <HAL_UART_IRQHandler+0x3c6>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	e004      	b.n	80077c4 <HAL_UART_IRQHandler+0x3d0>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((nb_remaining_rx_data > 0U)
 80077c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 81a5 	beq.w	8007b1c <HAL_UART_IRQHandler+0x728>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077d8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80077dc:	429a      	cmp	r2, r3
 80077de:	f080 819d 	bcs.w	8007b1c <HAL_UART_IRQHandler+0x728>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80077e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f6:	f000 8086 	beq.w	8007906 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800780e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007828:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007830:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800783c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1da      	bne.n	80077fa <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007868:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800786c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007870:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800787a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e1      	bne.n	8007844 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3308      	adds	r3, #8
 8007886:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3308      	adds	r3, #8
 80078a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e3      	bne.n	8007880 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d6:	f023 0310 	bic.w	r3, r3, #16
 80078da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80078ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e4      	bne.n	80078c6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007900:	4618      	mov	r0, r3
 8007902:	f7fa fb3f 	bl	8001f84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007912:	b29b      	uxth	r3, r3
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	b29b      	uxth	r3, r3
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f926 	bl	8007b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007920:	e0fc      	b.n	8007b1c <HAL_UART_IRQHandler+0x728>
 8007922:	bf00      	nop
 8007924:	40020010 	.word	0x40020010
 8007928:	40020028 	.word	0x40020028
 800792c:	40020040 	.word	0x40020040
 8007930:	40020058 	.word	0x40020058
 8007934:	40020070 	.word	0x40020070
 8007938:	40020088 	.word	0x40020088
 800793c:	400200a0 	.word	0x400200a0
 8007940:	400200b8 	.word	0x400200b8
 8007944:	40020410 	.word	0x40020410
 8007948:	40020428 	.word	0x40020428
 800794c:	40020440 	.word	0x40020440
 8007950:	40020458 	.word	0x40020458
 8007954:	40020470 	.word	0x40020470
 8007958:	40020488 	.word	0x40020488
 800795c:	400204a0 	.word	0x400204a0
 8007960:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007970:	b29b      	uxth	r3, r3
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
      if ((huart->RxXferCount > 0U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80cd 	beq.w	8007b20 <HAL_UART_IRQHandler+0x72c>
          && (nb_rx_data > 0U))
 8007986:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80c8 	beq.w	8007b20 <HAL_UART_IRQHandler+0x72c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079b2:	647b      	str	r3, [r7, #68]	; 0x44
 80079b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e4      	bne.n	8007990 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3308      	adds	r3, #8
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	623b      	str	r3, [r7, #32]
   return(result);
 80079d6:	6a3a      	ldr	r2, [r7, #32]
 80079d8:	4b54      	ldr	r3, [pc, #336]	; (8007b2c <HAL_UART_IRQHandler+0x738>)
 80079da:	4013      	ands	r3, r2
 80079dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3308      	adds	r3, #8
 80079e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079ea:	633a      	str	r2, [r7, #48]	; 0x30
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e3      	bne.n	80079c6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0310 	bic.w	r3, r3, #16
 8007a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	617b      	str	r3, [r7, #20]
   return(result);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e4      	bne.n	8007a12 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a48:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f88c 	bl	8007b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a54:	e064      	b.n	8007b20 <HAL_UART_IRQHandler+0x72c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00e      	beq.n	8007a80 <HAL_UART_IRQHandler+0x68c>
 8007a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f959 	bl	8008d30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a7e:	e052      	b.n	8007b26 <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d014      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d105      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d03b      	beq.n	8007b24 <HAL_UART_IRQHandler+0x730>
    {
      huart->TxISR(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	4798      	blx	r3
    }
    return;
 8007ab4:	e036      	b.n	8007b24 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x6e2>
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 f903 	bl	8008cda <UART_EndTransmit_IT>
    return;
 8007ad4:	e027      	b.n	8007b26 <HAL_UART_IRQHandler+0x732>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <HAL_UART_IRQHandler+0x702>
 8007ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 f932 	bl	8008d58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007af4:	e017      	b.n	8007b26 <HAL_UART_IRQHandler+0x732>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d011      	beq.n	8007b26 <HAL_UART_IRQHandler+0x732>
 8007b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da0d      	bge.n	8007b26 <HAL_UART_IRQHandler+0x732>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 f91a 	bl	8008d44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b10:	bf00      	nop
 8007b12:	e008      	b.n	8007b26 <HAL_UART_IRQHandler+0x732>
      return;
 8007b14:	bf00      	nop
 8007b16:	e006      	b.n	8007b26 <HAL_UART_IRQHandler+0x732>
    return;
 8007b18:	bf00      	nop
 8007b1a:	e004      	b.n	8007b26 <HAL_UART_IRQHandler+0x732>
      return;
 8007b1c:	bf00      	nop
 8007b1e:	e002      	b.n	8007b26 <HAL_UART_IRQHandler+0x732>
      return;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <HAL_UART_IRQHandler+0x732>
    return;
 8007b24:	bf00      	nop
  }
}
 8007b26:	37e8      	adds	r7, #232	; 0xe8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	effffffe 	.word	0xeffffffe

08007b30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b84:	b5b0      	push	{r4, r5, r7, lr}
 8007b86:	b08e      	sub	sp, #56	; 0x38
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	4bc2      	ldr	r3, [pc, #776]	; (8007ec0 <UART_SetConfig+0x33c>)
 8007bb6:	400b      	ands	r3, r1
 8007bb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	6852      	ldr	r2, [r2, #4]
 8007bc8:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	68d2      	ldr	r2, [r2, #12]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4ab9      	ldr	r2, [pc, #740]	; (8007ec4 <UART_SetConfig+0x340>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bea:	4313      	orrs	r3, r2
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6899      	ldr	r1, [r3, #8]
 8007bf8:	4bb3      	ldr	r3, [pc, #716]	; (8007ec8 <UART_SetConfig+0x344>)
 8007bfa:	400b      	ands	r3, r1
 8007bfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c0c:	f022 010f 	bic.w	r1, r2, #15
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c14:	430a      	orrs	r2, r1
 8007c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4aab      	ldr	r2, [pc, #684]	; (8007ecc <UART_SetConfig+0x348>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d177      	bne.n	8007d12 <UART_SetConfig+0x18e>
 8007c22:	4bab      	ldr	r3, [pc, #684]	; (8007ed0 <UART_SetConfig+0x34c>)
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c2a:	2b28      	cmp	r3, #40	; 0x28
 8007c2c:	d86c      	bhi.n	8007d08 <UART_SetConfig+0x184>
 8007c2e:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <UART_SetConfig+0xb0>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007cd9 	.word	0x08007cd9
 8007c38:	08007d09 	.word	0x08007d09
 8007c3c:	08007d09 	.word	0x08007d09
 8007c40:	08007d09 	.word	0x08007d09
 8007c44:	08007d09 	.word	0x08007d09
 8007c48:	08007d09 	.word	0x08007d09
 8007c4c:	08007d09 	.word	0x08007d09
 8007c50:	08007d09 	.word	0x08007d09
 8007c54:	08007ce1 	.word	0x08007ce1
 8007c58:	08007d09 	.word	0x08007d09
 8007c5c:	08007d09 	.word	0x08007d09
 8007c60:	08007d09 	.word	0x08007d09
 8007c64:	08007d09 	.word	0x08007d09
 8007c68:	08007d09 	.word	0x08007d09
 8007c6c:	08007d09 	.word	0x08007d09
 8007c70:	08007d09 	.word	0x08007d09
 8007c74:	08007ce9 	.word	0x08007ce9
 8007c78:	08007d09 	.word	0x08007d09
 8007c7c:	08007d09 	.word	0x08007d09
 8007c80:	08007d09 	.word	0x08007d09
 8007c84:	08007d09 	.word	0x08007d09
 8007c88:	08007d09 	.word	0x08007d09
 8007c8c:	08007d09 	.word	0x08007d09
 8007c90:	08007d09 	.word	0x08007d09
 8007c94:	08007cf1 	.word	0x08007cf1
 8007c98:	08007d09 	.word	0x08007d09
 8007c9c:	08007d09 	.word	0x08007d09
 8007ca0:	08007d09 	.word	0x08007d09
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007d09 	.word	0x08007d09
 8007cac:	08007d09 	.word	0x08007d09
 8007cb0:	08007d09 	.word	0x08007d09
 8007cb4:	08007cf9 	.word	0x08007cf9
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	08007d09 	.word	0x08007d09
 8007cc0:	08007d09 	.word	0x08007d09
 8007cc4:	08007d09 	.word	0x08007d09
 8007cc8:	08007d09 	.word	0x08007d09
 8007ccc:	08007d09 	.word	0x08007d09
 8007cd0:	08007d09 	.word	0x08007d09
 8007cd4:	08007d01 	.word	0x08007d01
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cde:	e233      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce6:	e22f      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007ce8:	2308      	movs	r3, #8
 8007cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cee:	e22b      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf6:	e227      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfe:	e223      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d00:	2340      	movs	r3, #64	; 0x40
 8007d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d06:	e21f      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d08:	2380      	movs	r3, #128	; 0x80
 8007d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0e:	bf00      	nop
 8007d10:	e21a      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a6f      	ldr	r2, [pc, #444]	; (8007ed4 <UART_SetConfig+0x350>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d132      	bne.n	8007d82 <UART_SetConfig+0x1fe>
 8007d1c:	4b6c      	ldr	r3, [pc, #432]	; (8007ed0 <UART_SetConfig+0x34c>)
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	2b05      	cmp	r3, #5
 8007d26:	d827      	bhi.n	8007d78 <UART_SetConfig+0x1f4>
 8007d28:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <UART_SetConfig+0x1ac>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d49 	.word	0x08007d49
 8007d34:	08007d51 	.word	0x08007d51
 8007d38:	08007d59 	.word	0x08007d59
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d69 	.word	0x08007d69
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d4e:	e1fb      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d56:	e1f7      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5e:	e1f3      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d66:	e1ef      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d68:	2320      	movs	r3, #32
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e1eb      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d70:	2340      	movs	r3, #64	; 0x40
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	e1e7      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d78:	2380      	movs	r3, #128	; 0x80
 8007d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d7e:	bf00      	nop
 8007d80:	e1e2      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a54      	ldr	r2, [pc, #336]	; (8007ed8 <UART_SetConfig+0x354>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d132      	bne.n	8007df2 <UART_SetConfig+0x26e>
 8007d8c:	4b50      	ldr	r3, [pc, #320]	; (8007ed0 <UART_SetConfig+0x34c>)
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d827      	bhi.n	8007de8 <UART_SetConfig+0x264>
 8007d98:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <UART_SetConfig+0x21c>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007db9 	.word	0x08007db9
 8007da4:	08007dc1 	.word	0x08007dc1
 8007da8:	08007dc9 	.word	0x08007dc9
 8007dac:	08007dd1 	.word	0x08007dd1
 8007db0:	08007dd9 	.word	0x08007dd9
 8007db4:	08007de1 	.word	0x08007de1
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dbe:	e1c3      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc6:	e1bf      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dce:	e1bb      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd6:	e1b7      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007dd8:	2320      	movs	r3, #32
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dde:	e1b3      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de6:	e1af      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007de8:	2380      	movs	r3, #128	; 0x80
 8007dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dee:	bf00      	nop
 8007df0:	e1aa      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a39      	ldr	r2, [pc, #228]	; (8007edc <UART_SetConfig+0x358>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d132      	bne.n	8007e62 <UART_SetConfig+0x2de>
 8007dfc:	4b34      	ldr	r3, [pc, #208]	; (8007ed0 <UART_SetConfig+0x34c>)
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	2b05      	cmp	r3, #5
 8007e06:	d827      	bhi.n	8007e58 <UART_SetConfig+0x2d4>
 8007e08:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <UART_SetConfig+0x28c>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007e29 	.word	0x08007e29
 8007e14:	08007e31 	.word	0x08007e31
 8007e18:	08007e39 	.word	0x08007e39
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e49 	.word	0x08007e49
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e2e:	e18b      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007e30:	2304      	movs	r3, #4
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e187      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007e38:	2308      	movs	r3, #8
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e183      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007e40:	2310      	movs	r3, #16
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e17f      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007e48:	2320      	movs	r3, #32
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e17b      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007e50:	2340      	movs	r3, #64	; 0x40
 8007e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e56:	e177      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007e58:	2380      	movs	r3, #128	; 0x80
 8007e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5e:	bf00      	nop
 8007e60:	e172      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1e      	ldr	r2, [pc, #120]	; (8007ee0 <UART_SetConfig+0x35c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d144      	bne.n	8007ef6 <UART_SetConfig+0x372>
 8007e6c:	4b18      	ldr	r3, [pc, #96]	; (8007ed0 <UART_SetConfig+0x34c>)
 8007e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	2b05      	cmp	r3, #5
 8007e76:	d839      	bhi.n	8007eec <UART_SetConfig+0x368>
 8007e78:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <UART_SetConfig+0x2fc>)
 8007e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7e:	bf00      	nop
 8007e80:	08007e99 	.word	0x08007e99
 8007e84:	08007ea1 	.word	0x08007ea1
 8007e88:	08007ea9 	.word	0x08007ea9
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007ee5 	.word	0x08007ee5
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9e:	e153      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea6:	e14f      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eae:	e14b      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb6:	e147      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007eb8:	2320      	movs	r3, #32
 8007eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ebe:	e143      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007ec0:	cfff69f3 	.word	0xcfff69f3
 8007ec4:	58000c00 	.word	0x58000c00
 8007ec8:	11fff4ff 	.word	0x11fff4ff
 8007ecc:	40011000 	.word	0x40011000
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	40004400 	.word	0x40004400
 8007ed8:	40004800 	.word	0x40004800
 8007edc:	40004c00 	.word	0x40004c00
 8007ee0:	40005000 	.word	0x40005000
 8007ee4:	2340      	movs	r3, #64	; 0x40
 8007ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eea:	e12d      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007eec:	2380      	movs	r3, #128	; 0x80
 8007eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ef2:	bf00      	nop
 8007ef4:	e128      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4ab6      	ldr	r2, [pc, #728]	; (80081d4 <UART_SetConfig+0x650>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d178      	bne.n	8007ff2 <UART_SetConfig+0x46e>
 8007f00:	4bb5      	ldr	r3, [pc, #724]	; (80081d8 <UART_SetConfig+0x654>)
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f08:	2b28      	cmp	r3, #40	; 0x28
 8007f0a:	d86d      	bhi.n	8007fe8 <UART_SetConfig+0x464>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <UART_SetConfig+0x390>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007fb9 	.word	0x08007fb9
 8007f18:	08007fe9 	.word	0x08007fe9
 8007f1c:	08007fe9 	.word	0x08007fe9
 8007f20:	08007fe9 	.word	0x08007fe9
 8007f24:	08007fe9 	.word	0x08007fe9
 8007f28:	08007fe9 	.word	0x08007fe9
 8007f2c:	08007fe9 	.word	0x08007fe9
 8007f30:	08007fe9 	.word	0x08007fe9
 8007f34:	08007fc1 	.word	0x08007fc1
 8007f38:	08007fe9 	.word	0x08007fe9
 8007f3c:	08007fe9 	.word	0x08007fe9
 8007f40:	08007fe9 	.word	0x08007fe9
 8007f44:	08007fe9 	.word	0x08007fe9
 8007f48:	08007fe9 	.word	0x08007fe9
 8007f4c:	08007fe9 	.word	0x08007fe9
 8007f50:	08007fe9 	.word	0x08007fe9
 8007f54:	08007fc9 	.word	0x08007fc9
 8007f58:	08007fe9 	.word	0x08007fe9
 8007f5c:	08007fe9 	.word	0x08007fe9
 8007f60:	08007fe9 	.word	0x08007fe9
 8007f64:	08007fe9 	.word	0x08007fe9
 8007f68:	08007fe9 	.word	0x08007fe9
 8007f6c:	08007fe9 	.word	0x08007fe9
 8007f70:	08007fe9 	.word	0x08007fe9
 8007f74:	08007fd1 	.word	0x08007fd1
 8007f78:	08007fe9 	.word	0x08007fe9
 8007f7c:	08007fe9 	.word	0x08007fe9
 8007f80:	08007fe9 	.word	0x08007fe9
 8007f84:	08007fe9 	.word	0x08007fe9
 8007f88:	08007fe9 	.word	0x08007fe9
 8007f8c:	08007fe9 	.word	0x08007fe9
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007fd9 	.word	0x08007fd9
 8007f98:	08007fe9 	.word	0x08007fe9
 8007f9c:	08007fe9 	.word	0x08007fe9
 8007fa0:	08007fe9 	.word	0x08007fe9
 8007fa4:	08007fe9 	.word	0x08007fe9
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007fe9 	.word	0x08007fe9
 8007fb0:	08007fe9 	.word	0x08007fe9
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fbe:	e0c3      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc6:	e0bf      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fce:	e0bb      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd6:	e0b7      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007fd8:	2320      	movs	r3, #32
 8007fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fde:	e0b3      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007fe0:	2340      	movs	r3, #64	; 0x40
 8007fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe6:	e0af      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fee:	bf00      	nop
 8007ff0:	e0aa      	b.n	8008148 <UART_SetConfig+0x5c4>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a79      	ldr	r2, [pc, #484]	; (80081dc <UART_SetConfig+0x658>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d132      	bne.n	8008062 <UART_SetConfig+0x4de>
 8007ffc:	4b76      	ldr	r3, [pc, #472]	; (80081d8 <UART_SetConfig+0x654>)
 8007ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	2b05      	cmp	r3, #5
 8008006:	d827      	bhi.n	8008058 <UART_SetConfig+0x4d4>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <UART_SetConfig+0x48c>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008029 	.word	0x08008029
 8008014:	08008031 	.word	0x08008031
 8008018:	08008039 	.word	0x08008039
 800801c:	08008041 	.word	0x08008041
 8008020:	08008049 	.word	0x08008049
 8008024:	08008051 	.word	0x08008051
 8008028:	2300      	movs	r3, #0
 800802a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802e:	e08b      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008030:	2304      	movs	r3, #4
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e087      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008038:	2308      	movs	r3, #8
 800803a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803e:	e083      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008040:	2310      	movs	r3, #16
 8008042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008046:	e07f      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008048:	2320      	movs	r3, #32
 800804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804e:	e07b      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008056:	e077      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008058:	2380      	movs	r3, #128	; 0x80
 800805a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800805e:	bf00      	nop
 8008060:	e072      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a5e      	ldr	r2, [pc, #376]	; (80081e0 <UART_SetConfig+0x65c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d132      	bne.n	80080d2 <UART_SetConfig+0x54e>
 800806c:	4b5a      	ldr	r3, [pc, #360]	; (80081d8 <UART_SetConfig+0x654>)
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	f003 0307 	and.w	r3, r3, #7
 8008074:	2b05      	cmp	r3, #5
 8008076:	d827      	bhi.n	80080c8 <UART_SetConfig+0x544>
 8008078:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <UART_SetConfig+0x4fc>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	08008099 	.word	0x08008099
 8008084:	080080a1 	.word	0x080080a1
 8008088:	080080a9 	.word	0x080080a9
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b9 	.word	0x080080b9
 8008094:	080080c1 	.word	0x080080c1
 8008098:	2300      	movs	r3, #0
 800809a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809e:	e053      	b.n	8008148 <UART_SetConfig+0x5c4>
 80080a0:	2304      	movs	r3, #4
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a6:	e04f      	b.n	8008148 <UART_SetConfig+0x5c4>
 80080a8:	2308      	movs	r3, #8
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ae:	e04b      	b.n	8008148 <UART_SetConfig+0x5c4>
 80080b0:	2310      	movs	r3, #16
 80080b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b6:	e047      	b.n	8008148 <UART_SetConfig+0x5c4>
 80080b8:	2320      	movs	r3, #32
 80080ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080be:	e043      	b.n	8008148 <UART_SetConfig+0x5c4>
 80080c0:	2340      	movs	r3, #64	; 0x40
 80080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c6:	e03f      	b.n	8008148 <UART_SetConfig+0x5c4>
 80080c8:	2380      	movs	r3, #128	; 0x80
 80080ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ce:	bf00      	nop
 80080d0:	e03a      	b.n	8008148 <UART_SetConfig+0x5c4>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a43      	ldr	r2, [pc, #268]	; (80081e4 <UART_SetConfig+0x660>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d132      	bne.n	8008142 <UART_SetConfig+0x5be>
 80080dc:	4b3e      	ldr	r3, [pc, #248]	; (80081d8 <UART_SetConfig+0x654>)
 80080de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	2b05      	cmp	r3, #5
 80080e6:	d827      	bhi.n	8008138 <UART_SetConfig+0x5b4>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x56c>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008109 	.word	0x08008109
 80080f4:	08008111 	.word	0x08008111
 80080f8:	08008119 	.word	0x08008119
 80080fc:	08008121 	.word	0x08008121
 8008100:	08008129 	.word	0x08008129
 8008104:	08008131 	.word	0x08008131
 8008108:	2302      	movs	r3, #2
 800810a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810e:	e01b      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008110:	2304      	movs	r3, #4
 8008112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008116:	e017      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008118:	2308      	movs	r3, #8
 800811a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811e:	e013      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008120:	2310      	movs	r3, #16
 8008122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008126:	e00f      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008128:	2320      	movs	r3, #32
 800812a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812e:	e00b      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008130:	2340      	movs	r3, #64	; 0x40
 8008132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008136:	e007      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008138:	2380      	movs	r3, #128	; 0x80
 800813a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813e:	bf00      	nop
 8008140:	e002      	b.n	8008148 <UART_SetConfig+0x5c4>
 8008142:	2380      	movs	r3, #128	; 0x80
 8008144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a25      	ldr	r2, [pc, #148]	; (80081e4 <UART_SetConfig+0x660>)
 800814e:	4293      	cmp	r3, r2
 8008150:	f040 80ad 	bne.w	80082ae <UART_SetConfig+0x72a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008154:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008158:	2b08      	cmp	r3, #8
 800815a:	d019      	beq.n	8008190 <UART_SetConfig+0x60c>
 800815c:	2b08      	cmp	r3, #8
 800815e:	dc04      	bgt.n	800816a <UART_SetConfig+0x5e6>
 8008160:	2b02      	cmp	r3, #2
 8008162:	d009      	beq.n	8008178 <UART_SetConfig+0x5f4>
 8008164:	2b04      	cmp	r3, #4
 8008166:	d00b      	beq.n	8008180 <UART_SetConfig+0x5fc>
 8008168:	e042      	b.n	80081f0 <UART_SetConfig+0x66c>
 800816a:	2b20      	cmp	r3, #32
 800816c:	d02b      	beq.n	80081c6 <UART_SetConfig+0x642>
 800816e:	2b40      	cmp	r3, #64	; 0x40
 8008170:	d02c      	beq.n	80081cc <UART_SetConfig+0x648>
 8008172:	2b10      	cmp	r3, #16
 8008174:	d014      	beq.n	80081a0 <UART_SetConfig+0x61c>
 8008176:	e03b      	b.n	80081f0 <UART_SetConfig+0x66c>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008178:	f7fe fc48 	bl	8006a0c <HAL_RCCEx_GetD3PCLK1Freq>
 800817c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800817e:	e03d      	b.n	80081fc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008180:	f107 0314 	add.w	r3, r7, #20
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe fc57 	bl	8006a38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800818e:	e035      	b.n	80081fc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008190:	f107 0308 	add.w	r3, r7, #8
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe fd9b 	bl	8006cd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800819e:	e02d      	b.n	80081fc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a0:	4b0d      	ldr	r3, [pc, #52]	; (80081d8 <UART_SetConfig+0x654>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0320 	and.w	r3, r3, #32
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d009      	beq.n	80081c0 <UART_SetConfig+0x63c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081ac:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <UART_SetConfig+0x654>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	08db      	lsrs	r3, r3, #3
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	4a0c      	ldr	r2, [pc, #48]	; (80081e8 <UART_SetConfig+0x664>)
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081be:	e01d      	b.n	80081fc <UART_SetConfig+0x678>
          pclk = (uint32_t) HSI_VALUE;
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <UART_SetConfig+0x664>)
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081c4:	e01a      	b.n	80081fc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <UART_SetConfig+0x668>)
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081ca:	e017      	b.n	80081fc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081d2:	e013      	b.n	80081fc <UART_SetConfig+0x678>
 80081d4:	40011400 	.word	0x40011400
 80081d8:	58024400 	.word	0x58024400
 80081dc:	40007800 	.word	0x40007800
 80081e0:	40007c00 	.word	0x40007c00
 80081e4:	58000c00 	.word	0x58000c00
 80081e8:	03d09000 	.word	0x03d09000
 80081ec:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80081fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8243 	beq.w	800868a <UART_SetConfig+0xb06>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	4aa8      	ldr	r2, [pc, #672]	; (80084ac <UART_SetConfig+0x928>)
 800820a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800820e:	461a      	mov	r2, r3
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	fbb3 f3f2 	udiv	r3, r3, r2
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4613      	mov	r3, r2
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	441a      	add	r2, r3
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	429a      	cmp	r2, r3
 8008226:	d805      	bhi.n	8008234 <UART_SetConfig+0x6b0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	429a      	cmp	r2, r3
 8008232:	d203      	bcs.n	800823c <UART_SetConfig+0x6b8>
      {
        ret = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800823a:	e226      	b.n	800868a <UART_SetConfig+0xb06>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	4618      	mov	r0, r3
 8008240:	f04f 0100 	mov.w	r1, #0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	4a98      	ldr	r2, [pc, #608]	; (80084ac <UART_SetConfig+0x928>)
 800824a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800824e:	b29a      	uxth	r2, r3
 8008250:	f04f 0300 	mov.w	r3, #0
 8008254:	f7f8 f840 	bl	80002d8 <__aeabi_uldivmod>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	021d      	lsls	r5, r3, #8
 800825e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8008262:	0214      	lsls	r4, r2, #8
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	085b      	lsrs	r3, r3, #1
 800826a:	461a      	mov	r2, r3
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	18a0      	adds	r0, r4, r2
 8008272:	eb45 0103 	adc.w	r1, r5, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f04f 0400 	mov.w	r4, #0
 800827e:	461a      	mov	r2, r3
 8008280:	4623      	mov	r3, r4
 8008282:	f7f8 f829 	bl	80002d8 <__aeabi_uldivmod>
 8008286:	4603      	mov	r3, r0
 8008288:	460c      	mov	r4, r1
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008292:	d308      	bcc.n	80082a6 <UART_SetConfig+0x722>
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800829a:	d204      	bcs.n	80082a6 <UART_SetConfig+0x722>
        {
          huart->Instance->BRR = usartdiv;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a2:	60da      	str	r2, [r3, #12]
 80082a4:	e1f1      	b.n	800868a <UART_SetConfig+0xb06>
        }
        else
        {
          ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082ac:	e1ed      	b.n	800868a <UART_SetConfig+0xb06>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b6:	f040 8101 	bne.w	80084bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80082ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	f200 80b8 	bhi.w	8008434 <UART_SetConfig+0x8b0>
 80082c4:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0x748>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080083d1 	.word	0x080083d1
 80082d0:	080083d9 	.word	0x080083d9
 80082d4:	08008435 	.word	0x08008435
 80082d8:	08008435 	.word	0x08008435
 80082dc:	080083e1 	.word	0x080083e1
 80082e0:	08008435 	.word	0x08008435
 80082e4:	08008435 	.word	0x08008435
 80082e8:	08008435 	.word	0x08008435
 80082ec:	080083f1 	.word	0x080083f1
 80082f0:	08008435 	.word	0x08008435
 80082f4:	08008435 	.word	0x08008435
 80082f8:	08008435 	.word	0x08008435
 80082fc:	08008435 	.word	0x08008435
 8008300:	08008435 	.word	0x08008435
 8008304:	08008435 	.word	0x08008435
 8008308:	08008435 	.word	0x08008435
 800830c:	08008401 	.word	0x08008401
 8008310:	08008435 	.word	0x08008435
 8008314:	08008435 	.word	0x08008435
 8008318:	08008435 	.word	0x08008435
 800831c:	08008435 	.word	0x08008435
 8008320:	08008435 	.word	0x08008435
 8008324:	08008435 	.word	0x08008435
 8008328:	08008435 	.word	0x08008435
 800832c:	08008435 	.word	0x08008435
 8008330:	08008435 	.word	0x08008435
 8008334:	08008435 	.word	0x08008435
 8008338:	08008435 	.word	0x08008435
 800833c:	08008435 	.word	0x08008435
 8008340:	08008435 	.word	0x08008435
 8008344:	08008435 	.word	0x08008435
 8008348:	08008435 	.word	0x08008435
 800834c:	08008427 	.word	0x08008427
 8008350:	08008435 	.word	0x08008435
 8008354:	08008435 	.word	0x08008435
 8008358:	08008435 	.word	0x08008435
 800835c:	08008435 	.word	0x08008435
 8008360:	08008435 	.word	0x08008435
 8008364:	08008435 	.word	0x08008435
 8008368:	08008435 	.word	0x08008435
 800836c:	08008435 	.word	0x08008435
 8008370:	08008435 	.word	0x08008435
 8008374:	08008435 	.word	0x08008435
 8008378:	08008435 	.word	0x08008435
 800837c:	08008435 	.word	0x08008435
 8008380:	08008435 	.word	0x08008435
 8008384:	08008435 	.word	0x08008435
 8008388:	08008435 	.word	0x08008435
 800838c:	08008435 	.word	0x08008435
 8008390:	08008435 	.word	0x08008435
 8008394:	08008435 	.word	0x08008435
 8008398:	08008435 	.word	0x08008435
 800839c:	08008435 	.word	0x08008435
 80083a0:	08008435 	.word	0x08008435
 80083a4:	08008435 	.word	0x08008435
 80083a8:	08008435 	.word	0x08008435
 80083ac:	08008435 	.word	0x08008435
 80083b0:	08008435 	.word	0x08008435
 80083b4:	08008435 	.word	0x08008435
 80083b8:	08008435 	.word	0x08008435
 80083bc:	08008435 	.word	0x08008435
 80083c0:	08008435 	.word	0x08008435
 80083c4:	08008435 	.word	0x08008435
 80083c8:	08008435 	.word	0x08008435
 80083cc:	0800842d 	.word	0x0800842d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fd fbf2 	bl	8005bb8 <HAL_RCC_GetPCLK1Freq>
 80083d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083d6:	e033      	b.n	8008440 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d8:	f7fd fc04 	bl	8005be4 <HAL_RCC_GetPCLK2Freq>
 80083dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083de:	e02f      	b.n	8008440 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe fb27 	bl	8006a38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083ee:	e027      	b.n	8008440 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f0:	f107 0308 	add.w	r3, r7, #8
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fe fc6b 	bl	8006cd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083fe:	e01f      	b.n	8008440 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008400:	4b2b      	ldr	r3, [pc, #172]	; (80084b0 <UART_SetConfig+0x92c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <UART_SetConfig+0x89c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800840c:	4b28      	ldr	r3, [pc, #160]	; (80084b0 <UART_SetConfig+0x92c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	4a27      	ldr	r2, [pc, #156]	; (80084b4 <UART_SetConfig+0x930>)
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800841e:	e00f      	b.n	8008440 <UART_SetConfig+0x8bc>
          pclk = (uint32_t) HSI_VALUE;
 8008420:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <UART_SetConfig+0x930>)
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008424:	e00c      	b.n	8008440 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <UART_SetConfig+0x934>)
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800842a:	e009      	b.n	8008440 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008432:	e005      	b.n	8008440 <UART_SetConfig+0x8bc>
      default:
        pclk = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800843e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 8121 	beq.w	800868a <UART_SetConfig+0xb06>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	4a17      	ldr	r2, [pc, #92]	; (80084ac <UART_SetConfig+0x928>)
 800844e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008452:	461a      	mov	r2, r3
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	fbb3 f3f2 	udiv	r3, r3, r2
 800845a:	005a      	lsls	r2, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	441a      	add	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	fbb2 f3f3 	udiv	r3, r2, r3
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	2b0f      	cmp	r3, #15
 8008472:	d916      	bls.n	80084a2 <UART_SetConfig+0x91e>
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847a:	d212      	bcs.n	80084a2 <UART_SetConfig+0x91e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	b29b      	uxth	r3, r3
 8008480:	f023 030f 	bic.w	r3, r3, #15
 8008484:	847b      	strh	r3, [r7, #34]	; 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	085b      	lsrs	r3, r3, #1
 800848a:	b29b      	uxth	r3, r3
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	b29a      	uxth	r2, r3
 8008492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008494:	4313      	orrs	r3, r2
 8008496:	847b      	strh	r3, [r7, #34]	; 0x22
        huart->Instance->BRR = brrtemp;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800849e:	60da      	str	r2, [r3, #12]
 80084a0:	e0f3      	b.n	800868a <UART_SetConfig+0xb06>
      }
      else
      {
        ret = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80084a8:	e0ef      	b.n	800868a <UART_SetConfig+0xb06>
 80084aa:	bf00      	nop
 80084ac:	08009050 	.word	0x08009050
 80084b0:	58024400 	.word	0x58024400
 80084b4:	03d09000 	.word	0x03d09000
 80084b8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80084bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	f200 80b7 	bhi.w	8008634 <UART_SetConfig+0xab0>
 80084c6:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <UART_SetConfig+0x948>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080085d1 	.word	0x080085d1
 80084d0:	080085d9 	.word	0x080085d9
 80084d4:	08008635 	.word	0x08008635
 80084d8:	08008635 	.word	0x08008635
 80084dc:	080085e1 	.word	0x080085e1
 80084e0:	08008635 	.word	0x08008635
 80084e4:	08008635 	.word	0x08008635
 80084e8:	08008635 	.word	0x08008635
 80084ec:	080085f1 	.word	0x080085f1
 80084f0:	08008635 	.word	0x08008635
 80084f4:	08008635 	.word	0x08008635
 80084f8:	08008635 	.word	0x08008635
 80084fc:	08008635 	.word	0x08008635
 8008500:	08008635 	.word	0x08008635
 8008504:	08008635 	.word	0x08008635
 8008508:	08008635 	.word	0x08008635
 800850c:	08008601 	.word	0x08008601
 8008510:	08008635 	.word	0x08008635
 8008514:	08008635 	.word	0x08008635
 8008518:	08008635 	.word	0x08008635
 800851c:	08008635 	.word	0x08008635
 8008520:	08008635 	.word	0x08008635
 8008524:	08008635 	.word	0x08008635
 8008528:	08008635 	.word	0x08008635
 800852c:	08008635 	.word	0x08008635
 8008530:	08008635 	.word	0x08008635
 8008534:	08008635 	.word	0x08008635
 8008538:	08008635 	.word	0x08008635
 800853c:	08008635 	.word	0x08008635
 8008540:	08008635 	.word	0x08008635
 8008544:	08008635 	.word	0x08008635
 8008548:	08008635 	.word	0x08008635
 800854c:	08008627 	.word	0x08008627
 8008550:	08008635 	.word	0x08008635
 8008554:	08008635 	.word	0x08008635
 8008558:	08008635 	.word	0x08008635
 800855c:	08008635 	.word	0x08008635
 8008560:	08008635 	.word	0x08008635
 8008564:	08008635 	.word	0x08008635
 8008568:	08008635 	.word	0x08008635
 800856c:	08008635 	.word	0x08008635
 8008570:	08008635 	.word	0x08008635
 8008574:	08008635 	.word	0x08008635
 8008578:	08008635 	.word	0x08008635
 800857c:	08008635 	.word	0x08008635
 8008580:	08008635 	.word	0x08008635
 8008584:	08008635 	.word	0x08008635
 8008588:	08008635 	.word	0x08008635
 800858c:	08008635 	.word	0x08008635
 8008590:	08008635 	.word	0x08008635
 8008594:	08008635 	.word	0x08008635
 8008598:	08008635 	.word	0x08008635
 800859c:	08008635 	.word	0x08008635
 80085a0:	08008635 	.word	0x08008635
 80085a4:	08008635 	.word	0x08008635
 80085a8:	08008635 	.word	0x08008635
 80085ac:	08008635 	.word	0x08008635
 80085b0:	08008635 	.word	0x08008635
 80085b4:	08008635 	.word	0x08008635
 80085b8:	08008635 	.word	0x08008635
 80085bc:	08008635 	.word	0x08008635
 80085c0:	08008635 	.word	0x08008635
 80085c4:	08008635 	.word	0x08008635
 80085c8:	08008635 	.word	0x08008635
 80085cc:	0800862d 	.word	0x0800862d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d0:	f7fd faf2 	bl	8005bb8 <HAL_RCC_GetPCLK1Freq>
 80085d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80085d6:	e033      	b.n	8008640 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085d8:	f7fd fb04 	bl	8005be4 <HAL_RCC_GetPCLK2Freq>
 80085dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80085de:	e02f      	b.n	8008640 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e0:	f107 0314 	add.w	r3, r7, #20
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe fa27 	bl	8006a38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085ee:	e027      	b.n	8008640 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f0:	f107 0308 	add.w	r3, r7, #8
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe fb6b 	bl	8006cd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085fe:	e01f      	b.n	8008640 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008600:	4b2c      	ldr	r3, [pc, #176]	; (80086b4 <UART_SetConfig+0xb30>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <UART_SetConfig+0xa9c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800860c:	4b29      	ldr	r3, [pc, #164]	; (80086b4 <UART_SetConfig+0xb30>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	4a28      	ldr	r2, [pc, #160]	; (80086b8 <UART_SetConfig+0xb34>)
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
 800861c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800861e:	e00f      	b.n	8008640 <UART_SetConfig+0xabc>
          pclk = (uint32_t) HSI_VALUE;
 8008620:	4b25      	ldr	r3, [pc, #148]	; (80086b8 <UART_SetConfig+0xb34>)
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008624:	e00c      	b.n	8008640 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008626:	4b25      	ldr	r3, [pc, #148]	; (80086bc <UART_SetConfig+0xb38>)
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800862a:	e009      	b.n	8008640 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800862c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008632:	e005      	b.n	8008640 <UART_SetConfig+0xabc>
      default:
        pclk = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800863e:	bf00      	nop
    }

    if (pclk != 0U)
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d021      	beq.n	800868a <UART_SetConfig+0xb06>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <UART_SetConfig+0xb3c>)
 800864c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008650:	461a      	mov	r2, r3
 8008652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008654:	fbb3 f2f2 	udiv	r2, r3, r2
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	441a      	add	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	fbb2 f3f3 	udiv	r3, r2, r3
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	2b0f      	cmp	r3, #15
 800866e:	d909      	bls.n	8008684 <UART_SetConfig+0xb00>
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008676:	d205      	bcs.n	8008684 <UART_SetConfig+0xb00>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867e:	b292      	uxth	r2, r2
 8008680:	60da      	str	r2, [r3, #12]
 8008682:	e002      	b.n	800868a <UART_SetConfig+0xb06>
      }
      else
      {
        ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80086a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3738      	adds	r7, #56	; 0x38
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bdb0      	pop	{r4, r5, r7, pc}
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400
 80086b8:	03d09000 	.word	0x03d09000
 80086bc:	003d0900 	.word	0x003d0900
 80086c0:	08009050 	.word	0x08009050

080086c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	6812      	ldr	r2, [r2, #0]
 80086e0:	6852      	ldr	r2, [r2, #4]
 80086e2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	6852      	ldr	r2, [r2, #4]
 8008704:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800870c:	430a      	orrs	r2, r1
 800870e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	6852      	ldr	r2, [r2, #4]
 8008726:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	6852      	ldr	r2, [r2, #4]
 8008748:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008750:	430a      	orrs	r2, r1
 8008752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	6892      	ldr	r2, [r2, #8]
 800876a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008772:	430a      	orrs	r2, r1
 8008774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	6812      	ldr	r2, [r2, #0]
 800878a:	6892      	ldr	r2, [r2, #8]
 800878c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008794:	430a      	orrs	r2, r1
 8008796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01a      	beq.n	80087da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6812      	ldr	r2, [r2, #0]
 80087ac:	6852      	ldr	r2, [r2, #4]
 80087ae:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80087b6:	430a      	orrs	r2, r1
 80087b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c2:	d10a      	bne.n	80087da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6812      	ldr	r2, [r2, #0]
 80087cc:	6852      	ldr	r2, [r2, #4]
 80087ce:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087d6:	430a      	orrs	r2, r1
 80087d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6812      	ldr	r2, [r2, #0]
 80087ee:	6852      	ldr	r2, [r2, #4]
 80087f0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80087f8:	430a      	orrs	r2, r1
 80087fa:	605a      	str	r2, [r3, #4]
  }
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af02      	add	r7, sp, #8
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008818:	f7f8 fc1a 	bl	8001050 <HAL_GetTick>
 800881c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b08      	cmp	r3, #8
 800882a:	d10e      	bne.n	800884a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800882c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f82f 	bl	800889e <UART_WaitOnFlagUntilTimeout>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e025      	b.n	8008896 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b04      	cmp	r3, #4
 8008856:	d10e      	bne.n	8008876 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f819 	bl	800889e <UART_WaitOnFlagUntilTimeout>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e00f      	b.n	8008896 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2220      	movs	r2, #32
 8008882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b09c      	sub	sp, #112	; 0x70
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	603b      	str	r3, [r7, #0]
 80088aa:	4613      	mov	r3, r2
 80088ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ae:	e0a9      	b.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	f000 80a5 	beq.w	8008a04 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ba:	f7f8 fbc9 	bl	8001050 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	1ad2      	subs	r2, r2, r3
 80088c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d802      	bhi.n	80088d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80088ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d140      	bne.n	8008952 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088e4:	667b      	str	r3, [r7, #100]	; 0x64
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e6      	bne.n	80088d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	f023 0301 	bic.w	r3, r3, #1
 8008918:	663b      	str	r3, [r7, #96]	; 0x60
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3308      	adds	r3, #8
 8008920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008922:	64ba      	str	r2, [r7, #72]	; 0x48
 8008924:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e5      	bne.n	8008902 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2220      	movs	r2, #32
 8008942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e069      	b.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d051      	beq.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800896a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800896e:	d149      	bne.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008978:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800898e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
 800899a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800899e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e6      	bne.n	800897a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3308      	adds	r3, #8
 80089b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	613b      	str	r3, [r7, #16]
   return(result);
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f023 0301 	bic.w	r3, r3, #1
 80089c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3308      	adds	r3, #8
 80089ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089cc:	623a      	str	r2, [r7, #32]
 80089ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d0:	69f9      	ldr	r1, [r7, #28]
 80089d2:	6a3a      	ldr	r2, [r7, #32]
 80089d4:	e841 2300 	strex	r3, r2, [r1]
 80089d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e5      	bne.n	80089ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e010      	b.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	69da      	ldr	r2, [r3, #28]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	401a      	ands	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	f43f af46 	beq.w	80088b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3770      	adds	r7, #112	; 0x70
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b08f      	sub	sp, #60	; 0x3c
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a56:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e6      	bne.n	8008a36 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	e853 3f00 	ldrex	r3, [r3]
 8008a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a7e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3308      	adds	r3, #8
 8008a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a88:	61ba      	str	r2, [r7, #24]
 8008a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8c:	6979      	ldr	r1, [r7, #20]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	e841 2300 	strex	r3, r2, [r1]
 8008a94:	613b      	str	r3, [r7, #16]
   return(result);
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e5      	bne.n	8008a68 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008aa4:	bf00      	nop
 8008aa6:	373c      	adds	r7, #60	; 0x3c
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b095      	sub	sp, #84	; 0x54
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e6      	bne.n	8008ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <UART_EndRxTransfer+0xc8>)
 8008afe:	4013      	ands	r3, r2
 8008b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e5      	bne.n	8008aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d118      	bne.n	8008b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f023 0310 	bic.w	r3, r3, #16
 8008b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6979      	ldr	r1, [r7, #20]
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	613b      	str	r3, [r7, #16]
   return(result);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e6      	bne.n	8008b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008b6c:	bf00      	nop
 8008b6e:	3754      	adds	r7, #84	; 0x54
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	effffffe 	.word	0xeffffffe

08008b7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b090      	sub	sp, #64	; 0x40
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b92:	d037      	beq.n	8008c04 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	623b      	str	r3, [r7, #32]
   return(result);
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bbc:	633a      	str	r2, [r7, #48]	; 0x30
 8008bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e5      	bne.n	8008b9c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	69b9      	ldr	r1, [r7, #24]
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e6      	bne.n	8008bd0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c02:	e002      	b.n	8008c0a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008c04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c06:	f7fe ff93 	bl	8007b30 <HAL_UART_TxCpltCallback>
}
 8008c0a:	bf00      	nop
 8008c0c:	3740      	adds	r7, #64	; 0x40
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7fe ff8f 	bl	8007b44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b086      	sub	sp, #24
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c56:	2b80      	cmp	r3, #128	; 0x80
 8008c58:	d109      	bne.n	8008c6e <UART_DMAError+0x40>
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b21      	cmp	r3, #33	; 0x21
 8008c5e:	d106      	bne.n	8008c6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	f7ff fee0 	bl	8008a2e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b40      	cmp	r3, #64	; 0x40
 8008c7a:	d109      	bne.n	8008c90 <UART_DMAError+0x62>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b22      	cmp	r3, #34	; 0x22
 8008c80:	d106      	bne.n	8008c90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008c8a:	6978      	ldr	r0, [r7, #20]
 8008c8c:	f7ff ff10 	bl	8008ab0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c96:	f043 0210 	orr.w	r2, r3, #16
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ca0:	6978      	ldr	r0, [r7, #20]
 8008ca2:	f7fe ff59 	bl	8007b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ca6:	bf00      	nop
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7fe ff43 	bl	8007b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b088      	sub	sp, #32
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	61bb      	str	r3, [r7, #24]
 8008d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6979      	ldr	r1, [r7, #20]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e6      	bne.n	8008ce2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7fe ff04 	bl	8007b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d28:	bf00      	nop
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e027      	b.n	8008dd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2224      	movs	r2, #36	; 0x24
 8008d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	6812      	ldr	r2, [r2, #0]
 8008da4:	f022 0201 	bic.w	r2, r2, #1
 8008da8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008db0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e02d      	b.n	8008e52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2224      	movs	r2, #36	; 0x24
 8008e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	6812      	ldr	r2, [r2, #0]
 8008e18:	f022 0201 	bic.w	r2, r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	6812      	ldr	r2, [r2, #0]
 8008e26:	6892      	ldr	r2, [r2, #8]
 8008e28:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f850 	bl	8008ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2220      	movs	r2, #32
 8008e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e02d      	b.n	8008ece <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2224      	movs	r2, #36	; 0x24
 8008e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	6812      	ldr	r2, [r2, #0]
 8008e94:	f022 0201 	bic.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6812      	ldr	r2, [r2, #0]
 8008ea2:	6892      	ldr	r2, [r2, #8]
 8008ea4:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f812 	bl	8008ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d108      	bne.n	8008efa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ef8:	e031      	b.n	8008f5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008efa:	2310      	movs	r3, #16
 8008efc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008efe:	2310      	movs	r3, #16
 8008f00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	0e5b      	lsrs	r3, r3, #25
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	0f5b      	lsrs	r3, r3, #29
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	7b3a      	ldrb	r2, [r7, #12]
 8008f26:	4911      	ldr	r1, [pc, #68]	; (8008f6c <UARTEx_SetNbDataToProcess+0x94>)
 8008f28:	5c8a      	ldrb	r2, [r1, r2]
 8008f2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f2e:	7b3a      	ldrb	r2, [r7, #12]
 8008f30:	490f      	ldr	r1, [pc, #60]	; (8008f70 <UARTEx_SetNbDataToProcess+0x98>)
 8008f32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f34:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	7b7a      	ldrb	r2, [r7, #13]
 8008f44:	4909      	ldr	r1, [pc, #36]	; (8008f6c <UARTEx_SetNbDataToProcess+0x94>)
 8008f46:	5c8a      	ldrb	r2, [r1, r2]
 8008f48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f4c:	7b7a      	ldrb	r2, [r7, #13]
 8008f4e:	4908      	ldr	r1, [pc, #32]	; (8008f70 <UARTEx_SetNbDataToProcess+0x98>)
 8008f50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f52:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f5e:	bf00      	nop
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	08009068 	.word	0x08009068
 8008f70:	08009070 	.word	0x08009070

08008f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008fac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008f78:	f7f7 ff5c 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008f7c:	480c      	ldr	r0, [pc, #48]	; (8008fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008f7e:	490d      	ldr	r1, [pc, #52]	; (8008fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008f80:	4a0d      	ldr	r2, [pc, #52]	; (8008fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f84:	e002      	b.n	8008f8c <LoopCopyDataInit>

08008f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f8a:	3304      	adds	r3, #4

08008f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f90:	d3f9      	bcc.n	8008f86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f92:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008f94:	4c0a      	ldr	r4, [pc, #40]	; (8008fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f98:	e001      	b.n	8008f9e <LoopFillZerobss>

08008f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f9c:	3204      	adds	r2, #4

08008f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fa0:	d3fb      	bcc.n	8008f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008fa2:	f000 f811 	bl	8008fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008fa6:	f7f7 fb1f 	bl	80005e8 <main>
  bx  lr
 8008faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008fb4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8008fb8:	08009088 	.word	0x08009088
  ldr r2, =_sbss
 8008fbc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8008fc0:	200002e8 	.word	0x200002e8

08008fc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008fc4:	e7fe      	b.n	8008fc4 <ADC3_IRQHandler>
	...

08008fc8 <__libc_init_array>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	4e0d      	ldr	r6, [pc, #52]	; (8009000 <__libc_init_array+0x38>)
 8008fcc:	4c0d      	ldr	r4, [pc, #52]	; (8009004 <__libc_init_array+0x3c>)
 8008fce:	1ba4      	subs	r4, r4, r6
 8008fd0:	10a4      	asrs	r4, r4, #2
 8008fd2:	2500      	movs	r5, #0
 8008fd4:	42a5      	cmp	r5, r4
 8008fd6:	d109      	bne.n	8008fec <__libc_init_array+0x24>
 8008fd8:	4e0b      	ldr	r6, [pc, #44]	; (8009008 <__libc_init_array+0x40>)
 8008fda:	4c0c      	ldr	r4, [pc, #48]	; (800900c <__libc_init_array+0x44>)
 8008fdc:	f000 f820 	bl	8009020 <_init>
 8008fe0:	1ba4      	subs	r4, r4, r6
 8008fe2:	10a4      	asrs	r4, r4, #2
 8008fe4:	2500      	movs	r5, #0
 8008fe6:	42a5      	cmp	r5, r4
 8008fe8:	d105      	bne.n	8008ff6 <__libc_init_array+0x2e>
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ff0:	4798      	blx	r3
 8008ff2:	3501      	adds	r5, #1
 8008ff4:	e7ee      	b.n	8008fd4 <__libc_init_array+0xc>
 8008ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ffa:	4798      	blx	r3
 8008ffc:	3501      	adds	r5, #1
 8008ffe:	e7f2      	b.n	8008fe6 <__libc_init_array+0x1e>
 8009000:	08009080 	.word	0x08009080
 8009004:	08009080 	.word	0x08009080
 8009008:	08009080 	.word	0x08009080
 800900c:	08009084 	.word	0x08009084

08009010 <memset>:
 8009010:	4402      	add	r2, r0
 8009012:	4603      	mov	r3, r0
 8009014:	4293      	cmp	r3, r2
 8009016:	d100      	bne.n	800901a <memset+0xa>
 8009018:	4770      	bx	lr
 800901a:	f803 1b01 	strb.w	r1, [r3], #1
 800901e:	e7f9      	b.n	8009014 <memset+0x4>

08009020 <_init>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr

0800902c <_fini>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr
