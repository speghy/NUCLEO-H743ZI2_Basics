
BlinkerWithButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006470  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006740  08006740  00007740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006748  08006748  00007748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800674c  0800674c  0000774c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006750  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006760  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080067c0  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  08006820  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  08006820  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c10  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002854  00000000  00000000  0001fd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00022568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd7  00000000  00000000  000234b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003727b  00000000  00000000  0002408f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001465b  00000000  00000000  0005b30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e00d  00000000  00000000  0006f965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cd972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000411c  00000000  00000000  001cd9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001d1ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080066f0 	.word	0x080066f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080066f0 	.word	0x080066f0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fd0a 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f82c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f974 	bl	80008c0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f8a8 	bl	800072c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f8f2 	bl	80007c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f93c 	bl	800085c <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(ReadKey)
 80005e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <main+0x58>)
 80005ea:	f001 fc99 	bl	8001f20 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f7      	beq.n	80005e4 <main+0x1c>
	  {
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80005f4:	2101      	movs	r1, #1
 80005f6:	480b      	ldr	r0, [pc, #44]	@ (8000624 <main+0x5c>)
 80005f8:	f001 fcc3 	bl	8001f82 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000600:	f000 fd82 	bl	8001108 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000604:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000608:	4806      	ldr	r0, [pc, #24]	@ (8000624 <main+0x5c>)
 800060a:	f001 fcba 	bl	8001f82 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 800060e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000612:	f000 fd79 	bl	8001108 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 8000616:	2102      	movs	r1, #2
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <main+0x60>)
 800061a:	f001 fcb2 	bl	8001f82 <HAL_GPIO_TogglePin>
	  if(ReadKey)
 800061e:	e7e1      	b.n	80005e4 <main+0x1c>
 8000620:	58020800 	.word	0x58020800
 8000624:	58020400 	.word	0x58020400
 8000628:	58021000 	.word	0x58021000

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	@ 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000636:	224c      	movs	r2, #76	@ 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 f82b 	bl	8006696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 f825 	bl	8006696 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064c:	2002      	movs	r0, #2
 800064e:	f001 fde3 	bl	8002218 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b33      	ldr	r3, [pc, #204]	@ (8000724 <SystemClock_Config+0xf8>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	4a32      	ldr	r2, [pc, #200]	@ (8000724 <SystemClock_Config+0xf8>)
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000662:	4b30      	ldr	r3, [pc, #192]	@ (8000724 <SystemClock_Config+0xf8>)
 8000664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <SystemClock_Config+0xfc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000674:	4a2c      	ldr	r2, [pc, #176]	@ (8000728 <SystemClock_Config+0xfc>)
 8000676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <SystemClock_Config+0xfc>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000688:	bf00      	nop
 800068a:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <SystemClock_Config+0xfc>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000696:	d1f8      	bne.n	800068a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000698:	2303      	movs	r3, #3
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2340      	movs	r3, #64	@ 0x40
 80006a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b6:	2318      	movs	r3, #24
 80006b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006c6:	230c      	movs	r3, #12
 80006c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fde8 	bl	80022ac <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006e2:	f000 f9c9 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	233f      	movs	r3, #63	@ 0x3f
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2101      	movs	r1, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fa28 	bl	8002b60 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000716:	f000 f9af 	bl	8000a78 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	@ 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58000400 	.word	0x58000400
 8000728:	58024800 	.word	0x58024800

0800072c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000730:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <MX_ETH_Init+0x80>)
 8000732:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <MX_ETH_Init+0x84>)
 8000734:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_ETH_Init+0x88>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_ETH_Init+0x88>)
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_ETH_Init+0x88>)
 8000744:	22e1      	movs	r2, #225	@ 0xe1
 8000746:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_ETH_Init+0x88>)
 800074a:	2200      	movs	r2, #0
 800074c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_ETH_Init+0x88>)
 8000750:	2200      	movs	r2, #0
 8000752:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_ETH_Init+0x88>)
 8000756:	2200      	movs	r2, #0
 8000758:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_ETH_Init+0x80>)
 800075c:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_ETH_Init+0x88>)
 800075e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_ETH_Init+0x80>)
 8000762:	2201      	movs	r2, #1
 8000764:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_ETH_Init+0x80>)
 8000768:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <MX_ETH_Init+0x8c>)
 800076a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_ETH_Init+0x80>)
 800076e:	4a13      	ldr	r2, [pc, #76]	@ (80007bc <MX_ETH_Init+0x90>)
 8000770:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_ETH_Init+0x80>)
 8000774:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000778:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800077a:	480c      	ldr	r0, [pc, #48]	@ (80007ac <MX_ETH_Init+0x80>)
 800077c:	f000 fdec 	bl	8001358 <HAL_ETH_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000786:	f000 f977 	bl	8000a78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800078a:	2238      	movs	r2, #56	@ 0x38
 800078c:	2100      	movs	r1, #0
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_ETH_Init+0x94>)
 8000790:	f005 ff81 	bl	8006696 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_ETH_Init+0x94>)
 8000796:	2221      	movs	r2, #33	@ 0x21
 8000798:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_ETH_Init+0x94>)
 800079c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007a2:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_ETH_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	24000124 	.word	0x24000124
 80007b0:	40028000 	.word	0x40028000
 80007b4:	2400074c 	.word	0x2400074c
 80007b8:	24000070 	.word	0x24000070
 80007bc:	24000010 	.word	0x24000010
 80007c0:	240000ec 	.word	0x240000ec

080007c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007ca:	4a23      	ldr	r2, [pc, #140]	@ (8000858 <MX_USART3_UART_Init+0x94>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ce:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080c:	4811      	ldr	r0, [pc, #68]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 800080e:	f004 fb5f 	bl	8004ed0 <HAL_UART_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 f92e 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	480d      	ldr	r0, [pc, #52]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 8000820:	f005 fb67 	bl	8005ef2 <HAL_UARTEx_SetTxFifoThreshold>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800082a:	f000 f925 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4808      	ldr	r0, [pc, #32]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 8000832:	f005 fb9c 	bl	8005f6e <HAL_UARTEx_SetRxFifoThreshold>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f91c 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_USART3_UART_Init+0x90>)
 8000842:	f005 fb1d 	bl	8005e80 <HAL_UARTEx_DisableFifoMode>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f914 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	240001d4 	.word	0x240001d4
 8000858:	40004800 	.word	0x40004800

0800085c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000862:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000864:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000868:	2209      	movs	r2, #9
 800086a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086e:	2202      	movs	r2, #2
 8000870:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000874:	2200      	movs	r2, #0
 8000876:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087a:	2202      	movs	r2, #2
 800087c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000880:	2201      	movs	r2, #1
 8000882:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000886:	2200      	movs	r2, #0
 8000888:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088c:	2200      	movs	r2, #0
 800088e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000892:	2201      	movs	r2, #1
 8000894:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000898:	2201      	movs	r2, #1
 800089a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a4:	f001 fb87 	bl	8001fb6 <HAL_PCD_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008ae:	f000 f8e3 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	24000268 	.word	0x24000268
 80008bc:	40080000 	.word	0x40080000

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	@ 0x30
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b62      	ldr	r3, [pc, #392]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	4a60      	ldr	r2, [pc, #384]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e6:	4b5e      	ldr	r3, [pc, #376]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f4:	4b5a      	ldr	r3, [pc, #360]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fa:	4a59      	ldr	r2, [pc, #356]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000904:	4b56      	ldr	r3, [pc, #344]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b53      	ldr	r3, [pc, #332]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	4a51      	ldr	r2, [pc, #324]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000922:	4b4f      	ldr	r3, [pc, #316]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b4b      	ldr	r3, [pc, #300]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000936:	4a4a      	ldr	r2, [pc, #296]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000940:	4b47      	ldr	r3, [pc, #284]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	4b44      	ldr	r3, [pc, #272]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a42      	ldr	r2, [pc, #264]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b40      	ldr	r3, [pc, #256]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0308 	and.w	r3, r3, #8
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a3b      	ldr	r2, [pc, #236]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	4b35      	ldr	r3, [pc, #212]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a33      	ldr	r2, [pc, #204]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <MX_GPIO_Init+0x1a0>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009ae:	482d      	ldr	r0, [pc, #180]	@ (8000a64 <MX_GPIO_Init+0x1a4>)
 80009b0:	f001 face 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ba:	482b      	ldr	r0, [pc, #172]	@ (8000a68 <MX_GPIO_Init+0x1a8>)
 80009bc:	f001 fac8 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2102      	movs	r1, #2
 80009c4:	4829      	ldr	r0, [pc, #164]	@ (8000a6c <MX_GPIO_Init+0x1ac>)
 80009c6:	f001 fac3 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4824      	ldr	r0, [pc, #144]	@ (8000a70 <MX_GPIO_Init+0x1b0>)
 80009e0:	f001 f8ee 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009e4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4819      	ldr	r0, [pc, #100]	@ (8000a64 <MX_GPIO_Init+0x1a4>)
 80009fe:	f001 f8df 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4813      	ldr	r0, [pc, #76]	@ (8000a68 <MX_GPIO_Init+0x1a8>)
 8000a1c:	f001 f8d0 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <MX_GPIO_Init+0x1b4>)
 8000a36:	f001 f8c3 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <MX_GPIO_Init+0x1ac>)
 8000a52:	f001 f8b5 	bl	8001bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	@ 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58024400 	.word	0x58024400
 8000a64:	58020400 	.word	0x58020400
 8000a68:	58020c00 	.word	0x58020c00
 8000a6c:	58021000 	.word	0x58021000
 8000a70:	58020800 	.word	0x58020800
 8000a74:	58021800 	.word	0x58021800

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_MspInit+0x30>)
 8000a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a90:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x30>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_MspInit+0x30>)
 8000a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	@ 0x38
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a59      	ldr	r2, [pc, #356]	@ (8000c3c <HAL_ETH_MspInit+0x184>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	f040 80ab 	bne.w	8000c32 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000adc:	4b58      	ldr	r3, [pc, #352]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ae2:	4a57      	ldr	r2, [pc, #348]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ae8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aec:	4b54      	ldr	r3, [pc, #336]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000afa:	4b51      	ldr	r3, [pc, #324]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b00:	4a4f      	ldr	r2, [pc, #316]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b18:	4b49      	ldr	r3, [pc, #292]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b1e:	4a48      	ldr	r2, [pc, #288]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b24:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b42      	ldr	r3, [pc, #264]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	4a40      	ldr	r2, [pc, #256]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b46:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b3a      	ldr	r3, [pc, #232]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5a:	4a39      	ldr	r2, [pc, #228]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b64:	4b36      	ldr	r3, [pc, #216]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b33      	ldr	r3, [pc, #204]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b78:	4a31      	ldr	r2, [pc, #196]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b82:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b96:	4a2a      	ldr	r2, [pc, #168]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba0:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bae:	2332      	movs	r3, #50	@ 0x32
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbe:	230b      	movs	r3, #11
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481e      	ldr	r0, [pc, #120]	@ (8000c44 <HAL_ETH_MspInit+0x18c>)
 8000bca:	f000 fff9 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bce:	2386      	movs	r3, #134	@ 0x86
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bde:	230b      	movs	r3, #11
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <HAL_ETH_MspInit+0x190>)
 8000bea:	f000 ffe9 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	@ (8000c4c <HAL_ETH_MspInit+0x194>)
 8000c0c:	f000 ffd8 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <HAL_ETH_MspInit+0x198>)
 8000c2e:	f000 ffc7 	bl	8001bc0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c32:	bf00      	nop
 8000c34:	3738      	adds	r7, #56	@ 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40028000 	.word	0x40028000
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58020800 	.word	0x58020800
 8000c48:	58020000 	.word	0x58020000
 8000c4c:	58020400 	.word	0x58020400
 8000c50:	58021800 	.word	0x58021800

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ba      	sub	sp, #232	@ 0xe8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	22c0      	movs	r2, #192	@ 0xc0
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 fd0e 	bl	8006696 <memset>
  if(huart->Instance==USART3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <HAL_UART_MspInit+0xc8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d146      	bne.n	8000d12 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c84:	f04f 0202 	mov.w	r2, #2
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 faec 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ca6:	f7ff fee7 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d00:	2307      	movs	r3, #7
 8000d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <HAL_UART_MspInit+0xd0>)
 8000d0e:	f000 ff57 	bl	8001bc0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d12:	bf00      	nop
 8000d14:	37e8      	adds	r7, #232	@ 0xe8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58020c00 	.word	0x58020c00

08000d28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	22c0      	movs	r2, #192	@ 0xc0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f005 fca4 	bl	8006696 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a30      	ldr	r2, [pc, #192]	@ (8000e14 <HAL_PCD_MspInit+0xec>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d159      	bne.n	8000e0c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d58:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fa81 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000d7c:	f7ff fe7c 	bl	8000a78 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d80:	f001 fa84 	bl	800228c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000da2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4814      	ldr	r0, [pc, #80]	@ (8000e1c <HAL_PCD_MspInit+0xf4>)
 8000dca:	f000 fef9 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <HAL_PCD_MspInit+0xf4>)
 8000dea:	f000 fee9 	bl	8001bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e0c:	bf00      	nop
 8000e0e:	37e8      	adds	r7, #232	@ 0xe8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40080000 	.word	0x40080000
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58020000 	.word	0x58020000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <NMI_Handler+0x4>

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e76:	f000 f927 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e84:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <SystemInit+0xe4>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8a:	4a36      	ldr	r2, [pc, #216]	@ (8000f64 <SystemInit+0xe4>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e94:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <SystemInit+0xe8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	2b06      	cmp	r3, #6
 8000e9e:	d807      	bhi.n	8000eb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ea0:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <SystemInit+0xe8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 030f 	bic.w	r3, r3, #15
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8000f68 <SystemInit+0xe8>)
 8000eaa:	f043 0307 	orr.w	r3, r3, #7
 8000eae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <SystemInit+0xec>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f6c <SystemInit+0xec>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f6c <SystemInit+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <SystemInit+0xec>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4929      	ldr	r1, [pc, #164]	@ (8000f6c <SystemInit+0xec>)
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <SystemInit+0xf0>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <SystemInit+0xe8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <SystemInit+0xe8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f023 030f 	bic.w	r3, r3, #15
 8000ee2:	4a21      	ldr	r2, [pc, #132]	@ (8000f68 <SystemInit+0xe8>)
 8000ee4:	f043 0307 	orr.w	r3, r3, #7
 8000ee8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <SystemInit+0xec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <SystemInit+0xec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <SystemInit+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <SystemInit+0xec>)
 8000efe:	4a1d      	ldr	r2, [pc, #116]	@ (8000f74 <SystemInit+0xf4>)
 8000f00:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <SystemInit+0xec>)
 8000f04:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <SystemInit+0xf8>)
 8000f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <SystemInit+0xec>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <SystemInit+0xfc>)
 8000f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <SystemInit+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <SystemInit+0xec>)
 8000f16:	4a19      	ldr	r2, [pc, #100]	@ (8000f7c <SystemInit+0xfc>)
 8000f18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <SystemInit+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <SystemInit+0xec>)
 8000f22:	4a16      	ldr	r2, [pc, #88]	@ (8000f7c <SystemInit+0xfc>)
 8000f24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <SystemInit+0xec>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <SystemInit+0xec>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <SystemInit+0xec>)
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <SystemInit+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <SystemInit+0x100>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <SystemInit+0x104>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f4a:	d202      	bcs.n	8000f52 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <SystemInit+0x108>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <SystemInit+0x10c>)
 8000f54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	52002000 	.word	0x52002000
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f74:	02020200 	.word	0x02020200
 8000f78:	01ff0000 	.word	0x01ff0000
 8000f7c:	01010280 	.word	0x01010280
 8000f80:	5c001000 	.word	0x5c001000
 8000f84:	ffff0000 	.word	0xffff0000
 8000f88:	51008108 	.word	0x51008108
 8000f8c:	52004000 	.word	0x52004000

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f94:	f7ff ff74 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f005 fb73 	bl	80066a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fb01 	bl	80005c8 <main>
  bx  lr
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fd0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fd4:	08006750 	.word	0x08006750
  ldr r2, =_sbss
 8000fd8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000fdc:	24000758 	.word	0x24000758

08000fe0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC3_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f000 f982 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ff0:	f001 ff6c 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_Init+0x68>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	4913      	ldr	r1, [pc, #76]	@ (8001050 <HAL_Init+0x6c>)
 8001002:	5ccb      	ldrb	r3, [r1, r3]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	fa22 f303 	lsr.w	r3, r2, r3
 800100c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_Init+0x68>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <HAL_Init+0x6c>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	fa22 f303 	lsr.w	r3, r2, r3
 8001024:	4a0b      	ldr	r2, [pc, #44]	@ (8001054 <HAL_Init+0x70>)
 8001026:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001028:	4a0b      	ldr	r2, [pc, #44]	@ (8001058 <HAL_Init+0x74>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f814 	bl	800105c <HAL_InitTick>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e002      	b.n	8001044 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800103e:	f7ff fd21 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	58024400 	.word	0x58024400
 8001050:	08006708 	.word	0x08006708
 8001054:	24000004 	.word	0x24000004
 8001058:	24000000 	.word	0x24000000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001064:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_InitTick+0x60>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e021      	b.n	80010b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <HAL_InitTick+0x64>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <HAL_InitTick+0x60>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f959 	bl	800133e <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f931 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <HAL_InitTick+0x68>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2400000c 	.word	0x2400000c
 80010c0:	24000000 	.word	0x24000000
 80010c4:	24000008 	.word	0x24000008

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	2400000c 	.word	0x2400000c
 80010ec:	24000754 	.word	0x24000754

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	24000754 	.word	0x24000754

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2400000c 	.word	0x2400000c

08001150 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <HAL_GetREVID+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0c1b      	lsrs	r3, r3, #16
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	5c001000 	.word	0x5c001000

08001168 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001178:	4904      	ldr	r1, [pc, #16]	@ (800118c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	58000400 	.word	0x58000400

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0000 	.word	0x05fa0000

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff47 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff5e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff90 	bl	8001248 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5f 	bl	80011f4 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffb2 	bl	80012b0 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0e3      	b.n	8001532 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001370:	2b00      	cmp	r3, #0
 8001372:	d106      	bne.n	8001382 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2223      	movs	r2, #35	@ 0x23
 8001378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fb9b 	bl	8000ab8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b6e      	ldr	r3, [pc, #440]	@ (800153c <HAL_ETH_Init+0x1e4>)
 8001384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001388:	4a6c      	ldr	r2, [pc, #432]	@ (800153c <HAL_ETH_Init+0x1e4>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001392:	4b6a      	ldr	r3, [pc, #424]	@ (800153c <HAL_ETH_Init+0x1e4>)
 8001394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7a1b      	ldrb	r3, [r3, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d103      	bne.n	80013b0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fedd 	bl	8001168 <HAL_SYSCFG_ETHInterfaceSelect>
 80013ae:	e003      	b.n	80013b8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013b0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013b4:	f7ff fed8 	bl	8001168 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013b8:	4b61      	ldr	r3, [pc, #388]	@ (8001540 <HAL_ETH_Init+0x1e8>)
 80013ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d4:	f7ff fe8c 	bl	80010f0 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013da:	e011      	b.n	8001400 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013dc:	f7ff fe88 	bl	80010f0 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013ea:	d909      	bls.n	8001400 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2204      	movs	r2, #4
 80013f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	22e0      	movs	r2, #224	@ 0xe0
 80013f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e098      	b.n	8001532 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e4      	bne.n	80013dc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f89e 	bl	8001554 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001418:	f001 fed2 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 800141c:	4603      	mov	r3, r0
 800141e:	4a49      	ldr	r2, [pc, #292]	@ (8001544 <HAL_ETH_Init+0x1ec>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	0c9a      	lsrs	r2, r3, #18
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3a01      	subs	r2, #1
 800142c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fa81 	bl	8001938 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001442:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800144e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001452:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	22e0      	movs	r2, #224	@ 0xe0
 800146e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e05d      	b.n	8001532 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800147e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001482:	4b31      	ldr	r3, [pc, #196]	@ (8001548 <HAL_ETH_Init+0x1f0>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6952      	ldr	r2, [r2, #20]
 800148a:	0051      	lsls	r1, r2, #1
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	430b      	orrs	r3, r1
 8001492:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001496:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fae9 	bl	8001a72 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fb2f 	bl	8001b04 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	3305      	adds	r3, #5
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	021a      	lsls	r2, r3, #8
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	3304      	adds	r3, #4
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	3303      	adds	r3, #3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	061a      	lsls	r2, r3, #24
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	041b      	lsls	r3, r3, #16
 80014d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014f4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_ETH_Init+0x1f4>)
 8001506:	430b      	orrs	r3, r1
 8001508:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <HAL_ETH_Init+0x1f8>)
 800151a:	430b      	orrs	r3, r1
 800151c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2210      	movs	r2, #16
 800152c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	58024400 	.word	0x58024400
 8001540:	58000400 	.word	0x58000400
 8001544:	431bde83 	.word	0x431bde83
 8001548:	ffff8001 	.word	0xffff8001
 800154c:	0c020060 	.word	0x0c020060
 8001550:	0c20c000 	.word	0x0c20c000

08001554 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001564:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800156c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800156e:	f001 fe27 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8001572:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4a1a      	ldr	r2, [pc, #104]	@ (80015e0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d804      	bhi.n	8001586 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e022      	b.n	80015cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d204      	bcs.n	8001598 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e019      	b.n	80015cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d915      	bls.n	80015cc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <HAL_ETH_SetMDIOClockRange+0x98>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d804      	bhi.n	80015b2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e00c      	b.n	80015cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d804      	bhi.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e003      	b.n	80015cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80015ca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	02160ebf 	.word	0x02160ebf
 80015e4:	03938700 	.word	0x03938700
 80015e8:	05f5e0ff 	.word	0x05f5e0ff
 80015ec:	08f0d17f 	.word	0x08f0d17f
 80015f0:	0ee6b27f 	.word	0x0ee6b27f

080015f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	791b      	ldrb	r3, [r3, #4]
 800160c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800160e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7b1b      	ldrb	r3, [r3, #12]
 8001614:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	7b5b      	ldrb	r3, [r3, #13]
 800161c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800161e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7b9b      	ldrb	r3, [r3, #14]
 8001624:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001626:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	7bdb      	ldrb	r3, [r3, #15]
 800162c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800162e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	7c12      	ldrb	r2, [r2, #16]
 8001634:	2a00      	cmp	r2, #0
 8001636:	d102      	bne.n	800163e <ETH_SetMACConfig+0x4a>
 8001638:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800163c:	e000      	b.n	8001640 <ETH_SetMACConfig+0x4c>
 800163e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001640:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	7c52      	ldrb	r2, [r2, #17]
 8001646:	2a00      	cmp	r2, #0
 8001648:	d102      	bne.n	8001650 <ETH_SetMACConfig+0x5c>
 800164a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800164e:	e000      	b.n	8001652 <ETH_SetMACConfig+0x5e>
 8001650:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001652:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	7c9b      	ldrb	r3, [r3, #18]
 8001658:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800165a:	431a      	orrs	r2, r3
               macconf->Speed |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001660:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	7f1b      	ldrb	r3, [r3, #28]
 800166c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800166e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	7f5b      	ldrb	r3, [r3, #29]
 8001674:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001676:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	7f92      	ldrb	r2, [r2, #30]
 800167c:	2a00      	cmp	r2, #0
 800167e:	d102      	bne.n	8001686 <ETH_SetMACConfig+0x92>
 8001680:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001684:	e000      	b.n	8001688 <ETH_SetMACConfig+0x94>
 8001686:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001688:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	7fdb      	ldrb	r3, [r3, #31]
 800168e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001690:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001698:	2a00      	cmp	r2, #0
 800169a:	d102      	bne.n	80016a2 <ETH_SetMACConfig+0xae>
 800169c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a0:	e000      	b.n	80016a4 <ETH_SetMACConfig+0xb0>
 80016a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016a4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80016b2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016b4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b56      	ldr	r3, [pc, #344]	@ (8001820 <ETH_SetMACConfig+0x22c>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	430b      	orrs	r3, r1
 80016d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016f2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016fc:	2a00      	cmp	r2, #0
 80016fe:	d102      	bne.n	8001706 <ETH_SetMACConfig+0x112>
 8001700:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001704:	e000      	b.n	8001708 <ETH_SetMACConfig+0x114>
 8001706:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001708:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4b42      	ldr	r3, [pc, #264]	@ (8001824 <ETH_SetMACConfig+0x230>)
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	430b      	orrs	r3, r1
 8001724:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800172c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	4b3a      	ldr	r3, [pc, #232]	@ (8001828 <ETH_SetMACConfig+0x234>)
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	430b      	orrs	r3, r1
 8001748:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001750:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001756:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800175e:	2a00      	cmp	r2, #0
 8001760:	d101      	bne.n	8001766 <ETH_SetMACConfig+0x172>
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	e000      	b.n	8001768 <ETH_SetMACConfig+0x174>
 8001766:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001768:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800176e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001770:	4313      	orrs	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800177a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800177e:	4013      	ands	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	430b      	orrs	r3, r1
 8001788:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001790:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001798:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800179a:	4313      	orrs	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a6:	f023 0103 	bic.w	r1, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80017be:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d101      	bne.n	80017e2 <ETH_SetMACConfig+0x1ee>
 80017de:	2240      	movs	r2, #64	@ 0x40
 80017e0:	e000      	b.n	80017e4 <ETH_SetMACConfig+0x1f0>
 80017e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001804:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	430a      	orrs	r2, r1
 8001810:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	00048083 	.word	0x00048083
 8001824:	c0f88000 	.word	0xc0f88000
 8001828:	fffffef0 	.word	0xfffffef0

0800182c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b38      	ldr	r3, [pc, #224]	@ (8001924 <ETH_SetDMAConfig+0xf8>)
 8001842:	4013      	ands	r3, r2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	6811      	ldr	r1, [r2, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	430b      	orrs	r3, r1
 800184e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001852:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	791b      	ldrb	r3, [r3, #4]
 8001858:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800185e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	7b1b      	ldrb	r3, [r3, #12]
 8001864:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <ETH_SetDMAConfig+0xfc>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	430b      	orrs	r3, r1
 8001880:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001884:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	7b5b      	ldrb	r3, [r3, #13]
 800188a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001890:	4313      	orrs	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80018a0:	4b22      	ldr	r3, [pc, #136]	@ (800192c <ETH_SetDMAConfig+0x100>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	68f9      	ldr	r1, [r7, #12]
 80018aa:	430b      	orrs	r3, r1
 80018ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018b0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7d1b      	ldrb	r3, [r3, #20]
 80018bc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	7f5b      	ldrb	r3, [r3, #29]
 80018c4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <ETH_SetDMAConfig+0x104>)
 80018d8:	4013      	ands	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	68f9      	ldr	r1, [r7, #12]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018e6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	7f1b      	ldrb	r3, [r3, #28]
 80018ee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001900:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <ETH_SetDMAConfig+0x108>)
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	430b      	orrs	r3, r1
 8001910:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001914:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	ffff87fd 	.word	0xffff87fd
 8001928:	ffff2ffe 	.word	0xffff2ffe
 800192c:	fffec000 	.word	0xfffec000
 8001930:	ffc0efef 	.word	0xffc0efef
 8001934:	7fc0ffff 	.word	0x7fc0ffff

08001938 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0a4      	sub	sp, #144	@ 0x90
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001940:	2301      	movs	r3, #1
 8001942:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001946:	2300      	movs	r3, #0
 8001948:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001962:	2301      	movs	r3, #1
 8001964:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001974:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001978:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001980:	2300      	movs	r3, #0
 8001982:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001990:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001994:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019b2:	2300      	movs	r3, #0
 80019b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019ba:	2300      	movs	r3, #0
 80019bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019d0:	2320      	movs	r3, #32
 80019d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019e2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019ec:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a12:	2300      	movs	r3, #0
 8001a14:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fde6 	bl	80015f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a42:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a58:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4619      	mov	r1, r3
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fee1 	bl	800182c <ETH_SetDMAConfig>
}
 8001a6a:	bf00      	nop
 8001a6c:	3790      	adds	r7, #144	@ 0x90
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b085      	sub	sp, #20
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e01d      	b.n	8001abc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68d9      	ldr	r1, [r3, #12]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	3206      	adds	r2, #6
 8001ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d9de      	bls.n	8001a80 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e023      	b.n	8001b5a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6919      	ldr	r1, [r3, #16]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	3212      	adds	r2, #18
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d9d8      	bls.n	8001b12 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b86:	461a      	mov	r2, r3
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bae:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bce:	4b89      	ldr	r3, [pc, #548]	@ (8001df4 <HAL_GPIO_Init+0x234>)
 8001bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bd2:	e194      	b.n	8001efe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8186 	beq.w	8001ef8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d005      	beq.n	8001c04 <HAL_GPIO_Init+0x44>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d130      	bne.n	8001c66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 0201 	and.w	r2, r3, #1
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d017      	beq.n	8001ca2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d123      	bne.n	8001cf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	69b9      	ldr	r1, [r7, #24]
 8001cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80e0 	beq.w	8001ef8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d38:	4b2f      	ldr	r3, [pc, #188]	@ (8001df8 <HAL_GPIO_Init+0x238>)
 8001d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001df8 <HAL_GPIO_Init+0x238>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d48:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_GPIO_Init+0x238>)
 8001d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a29      	ldr	r2, [pc, #164]	@ (8001dfc <HAL_GPIO_Init+0x23c>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a20      	ldr	r2, [pc, #128]	@ (8001e00 <HAL_GPIO_Init+0x240>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d052      	beq.n	8001e28 <HAL_GPIO_Init+0x268>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	@ (8001e04 <HAL_GPIO_Init+0x244>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d031      	beq.n	8001dee <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <HAL_GPIO_Init+0x248>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d02b      	beq.n	8001dea <HAL_GPIO_Init+0x22a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <HAL_GPIO_Init+0x24c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d025      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e10 <HAL_GPIO_Init+0x250>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01f      	beq.n	8001de2 <HAL_GPIO_Init+0x222>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <HAL_GPIO_Init+0x254>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_Init+0x21e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1a      	ldr	r2, [pc, #104]	@ (8001e18 <HAL_GPIO_Init+0x258>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0x21a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a19      	ldr	r2, [pc, #100]	@ (8001e1c <HAL_GPIO_Init+0x25c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00d      	beq.n	8001dd6 <HAL_GPIO_Init+0x216>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a18      	ldr	r2, [pc, #96]	@ (8001e20 <HAL_GPIO_Init+0x260>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_Init+0x212>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	@ (8001e24 <HAL_GPIO_Init+0x264>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_GPIO_Init+0x20e>
 8001dca:	2309      	movs	r3, #9
 8001dcc:	e02d      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dce:	230a      	movs	r3, #10
 8001dd0:	e02b      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	e029      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	e027      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e025      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e023      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e021      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e01f      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e01d      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e01b      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001df2:	bf00      	nop
 8001df4:	58000080 	.word	0x58000080
 8001df8:	58024400 	.word	0x58024400
 8001dfc:	58000400 	.word	0x58000400
 8001e00:	58020000 	.word	0x58020000
 8001e04:	58020400 	.word	0x58020400
 8001e08:	58020800 	.word	0x58020800
 8001e0c:	58020c00 	.word	0x58020c00
 8001e10:	58021000 	.word	0x58021000
 8001e14:	58021400 	.word	0x58021400
 8001e18:	58021800 	.word	0x58021800
 8001e1c:	58021c00 	.word	0x58021c00
 8001e20:	58022000 	.word	0x58022000
 8001e24:	58022400 	.word	0x58022400
 8001e28:	2300      	movs	r3, #0
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	f002 0203 	and.w	r2, r2, #3
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	4093      	lsls	r3, r2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3a:	4938      	ldr	r1, [pc, #224]	@ (8001f1c <HAL_GPIO_Init+0x35c>)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3301      	adds	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f47f ae63 	bne.w	8001bd4 <HAL_GPIO_Init+0x14>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	3724      	adds	r7, #36	@ 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	58000400 	.word	0x58000400

08001f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	041a      	lsls	r2, r3, #16
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af02      	add	r7, sp, #8
 8001fbc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0fe      	b.n	80021c6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d106      	bne.n	8001fe2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7fe fea3 	bl	8000d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f004 f8bc 	bl	800616c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7c1a      	ldrb	r2, [r3, #16]
 8001ffc:	f88d 2000 	strb.w	r2, [sp]
 8002000:	3304      	adds	r3, #4
 8002002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002004:	f004 f840 	bl	8006088 <USB_CoreInit>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0d5      	b.n	80021c6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f004 f8b4 	bl	800618e <USB_SetCurrentMode>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0c6      	b.n	80021c6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e04a      	b.n	80020d4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3315      	adds	r3, #21
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3314      	adds	r3, #20
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	b298      	uxth	r0, r3
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	332e      	adds	r3, #46	@ 0x2e
 800207a:	4602      	mov	r2, r0
 800207c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3318      	adds	r3, #24
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	331c      	adds	r3, #28
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3320      	adds	r3, #32
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3324      	adds	r3, #36	@ 0x24
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	3301      	adds	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d3af      	bcc.n	800203e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e044      	b.n	800216e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	3301      	adds	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3b5      	bcc.n	80020e4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7c1a      	ldrb	r2, [r3, #16]
 8002180:	f88d 2000 	strb.w	r2, [sp]
 8002184:	3304      	adds	r3, #4
 8002186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002188:	f004 f84e 	bl	8006228 <USB_DevInit>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e013      	b.n	80021c6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7b1b      	ldrb	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f80b 	bl	80021d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 fa09 	bl	80065d6 <USB_DevDisconnect>

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021fe:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_PCDEx_ActivateLPM+0x44>)
 8002200:	4313      	orrs	r3, r2
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	10000003 	.word	0x10000003

08002218 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_PWREx_ConfigSupply+0x70>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d00a      	beq.n	8002242 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <HAL_PWREx_ConfigSupply+0x70>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e01f      	b.n	800227e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e01d      	b.n	800227e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <HAL_PWREx_ConfigSupply+0x70>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	490f      	ldr	r1, [pc, #60]	@ (8002288 <HAL_PWREx_ConfigSupply+0x70>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4313      	orrs	r3, r2
 8002250:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002252:	f7fe ff4d 	bl	80010f0 <HAL_GetTick>
 8002256:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002258:	e009      	b.n	800226e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800225a:	f7fe ff49 	bl	80010f0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002268:	d901      	bls.n	800226e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e007      	b.n	800227e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_PWREx_ConfigSupply+0x70>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800227a:	d1ee      	bne.n	800225a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	58024800 	.word	0x58024800

0800228c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	58024800 	.word	0x58024800

080022ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f000 bc48 	b.w	8002b50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8088 	beq.w	80023de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ce:	4b99      	ldr	r3, [pc, #612]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d8:	4b96      	ldr	r3, [pc, #600]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d007      	beq.n	80022f4 <HAL_RCC_OscConfig+0x48>
 80022e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e6:	2b18      	cmp	r3, #24
 80022e8:	d111      	bne.n	800230e <HAL_RCC_OscConfig+0x62>
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d06d      	beq.n	80023dc <HAL_RCC_OscConfig+0x130>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d169      	bne.n	80023dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f000 bc21 	b.w	8002b50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x7a>
 8002318:	4b86      	ldr	r3, [pc, #536]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a85      	ldr	r2, [pc, #532]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e02e      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x9c>
 800232e:	4b81      	ldr	r3, [pc, #516]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a80      	ldr	r2, [pc, #512]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b7e      	ldr	r3, [pc, #504]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7d      	ldr	r2, [pc, #500]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0xc0>
 8002352:	4b78      	ldr	r3, [pc, #480]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a77      	ldr	r2, [pc, #476]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b75      	ldr	r3, [pc, #468]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a74      	ldr	r2, [pc, #464]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 800236c:	4b71      	ldr	r3, [pc, #452]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a70      	ldr	r2, [pc, #448]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b6e      	ldr	r3, [pc, #440]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6d      	ldr	r2, [pc, #436]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe feb0 	bl	80010f0 <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe feac 	bl	80010f0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e3d4      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023a6:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe9c 	bl	80010f0 <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fe98 	bl	80010f0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e3c0      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ce:	4b59      	ldr	r3, [pc, #356]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x110>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80ca 	beq.w	8002580 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ec:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80023f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_RCC_OscConfig+0x166>
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	2b18      	cmp	r3, #24
 8002406:	d156      	bne.n	80024b6 <HAL_RCC_OscConfig+0x20a>
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d151      	bne.n	80024b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002412:	4b48      	ldr	r3, [pc, #288]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x17e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e392      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800242a:	4b42      	ldr	r3, [pc, #264]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0219 	bic.w	r2, r3, #25
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	493f      	ldr	r1, [pc, #252]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fe58 	bl	80010f0 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002444:	f7fe fe54 	bl	80010f0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e37c      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002456:	4b37      	ldr	r3, [pc, #220]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	f7fe fe75 	bl	8001150 <HAL_GetREVID>
 8002466:	4603      	mov	r3, r0
 8002468:	f241 0203 	movw	r2, #4099	@ 0x1003
 800246c:	4293      	cmp	r3, r2
 800246e:	d817      	bhi.n	80024a0 <HAL_RCC_OscConfig+0x1f4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b40      	cmp	r3, #64	@ 0x40
 8002476:	d108      	bne.n	800248a <HAL_RCC_OscConfig+0x1de>
 8002478:	4b2e      	ldr	r3, [pc, #184]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002480:	4a2c      	ldr	r2, [pc, #176]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002486:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002488:	e07a      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b2a      	ldr	r3, [pc, #168]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	031b      	lsls	r3, r3, #12
 8002498:	4926      	ldr	r1, [pc, #152]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249e:	e06f      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	4921      	ldr	r1, [pc, #132]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b4:	e064      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d047      	beq.n	800254e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024be:	4b1d      	ldr	r3, [pc, #116]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0219 	bic.w	r2, r3, #25
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	491a      	ldr	r1, [pc, #104]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fe0e 	bl	80010f0 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe fe0a 	bl	80010f0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e332      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	f7fe fe2b 	bl	8001150 <HAL_GetREVID>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002500:	4293      	cmp	r3, r2
 8002502:	d819      	bhi.n	8002538 <HAL_RCC_OscConfig+0x28c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b40      	cmp	r3, #64	@ 0x40
 800250a:	d108      	bne.n	800251e <HAL_RCC_OscConfig+0x272>
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002514:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800251a:	6053      	str	r3, [r2, #4]
 800251c:	e030      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	031b      	lsls	r3, r3, #12
 800252c:	4901      	ldr	r1, [pc, #4]	@ (8002534 <HAL_RCC_OscConfig+0x288>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
 8002532:	e025      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
 8002534:	58024400 	.word	0x58024400
 8002538:	4b9a      	ldr	r3, [pc, #616]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	4997      	ldr	r1, [pc, #604]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
 800254c:	e018      	b.n	8002580 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b95      	ldr	r3, [pc, #596]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a94      	ldr	r2, [pc, #592]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fdc9 	bl	80010f0 <HAL_GetTick>
 800255e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe fdc5 	bl	80010f0 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e2ed      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002574:	4b8b      	ldr	r3, [pc, #556]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a9 	beq.w	80026e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258e:	4b85      	ldr	r3, [pc, #532]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002596:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002598:	4b82      	ldr	r3, [pc, #520]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d007      	beq.n	80025b4 <HAL_RCC_OscConfig+0x308>
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b18      	cmp	r3, #24
 80025a8:	d13a      	bne.n	8002620 <HAL_RCC_OscConfig+0x374>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d135      	bne.n	8002620 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025b4:	4b7b      	ldr	r3, [pc, #492]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x320>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b80      	cmp	r3, #128	@ 0x80
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e2c1      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025cc:	f7fe fdc0 	bl	8001150 <HAL_GetREVID>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d817      	bhi.n	800260a <HAL_RCC_OscConfig+0x35e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d108      	bne.n	80025f4 <HAL_RCC_OscConfig+0x348>
 80025e2:	4b70      	ldr	r3, [pc, #448]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025ea:	4a6e      	ldr	r2, [pc, #440]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025f2:	e075      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025f4:	4b6b      	ldr	r3, [pc, #428]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	069b      	lsls	r3, r3, #26
 8002602:	4968      	ldr	r1, [pc, #416]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002608:	e06a      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800260a:	4b66      	ldr	r3, [pc, #408]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	4962      	ldr	r1, [pc, #392]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800261e:	e05f      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d042      	beq.n	80026ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002628:	4b5e      	ldr	r3, [pc, #376]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a5d      	ldr	r2, [pc, #372]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fd5c 	bl	80010f0 <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800263c:	f7fe fd58 	bl	80010f0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e280      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800264e:	4b55      	ldr	r3, [pc, #340]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800265a:	f7fe fd79 	bl	8001150 <HAL_GetREVID>
 800265e:	4603      	mov	r3, r0
 8002660:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002664:	4293      	cmp	r3, r2
 8002666:	d817      	bhi.n	8002698 <HAL_RCC_OscConfig+0x3ec>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	2b20      	cmp	r3, #32
 800266e:	d108      	bne.n	8002682 <HAL_RCC_OscConfig+0x3d6>
 8002670:	4b4c      	ldr	r3, [pc, #304]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002678:	4a4a      	ldr	r2, [pc, #296]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800267e:	6053      	str	r3, [r2, #4]
 8002680:	e02e      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
 8002682:	4b48      	ldr	r3, [pc, #288]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	069b      	lsls	r3, r3, #26
 8002690:	4944      	ldr	r1, [pc, #272]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
 8002696:	e023      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
 8002698:	4b42      	ldr	r3, [pc, #264]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	493f      	ldr	r1, [pc, #252]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
 80026ac:	e018      	b.n	80026e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026ae:	4b3d      	ldr	r3, [pc, #244]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a3c      	ldr	r2, [pc, #240]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fd19 	bl	80010f0 <HAL_GetTick>
 80026be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026c2:	f7fe fd15 	bl	80010f0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e23d      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026d4:	4b33      	ldr	r3, [pc, #204]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d036      	beq.n	800275a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d019      	beq.n	8002728 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f4:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f8:	4a2a      	ldr	r2, [pc, #168]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fcf6 	bl	80010f0 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe fcf2 	bl	80010f0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e21a      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800271a:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800271c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x45c>
 8002726:	e018      	b.n	800275a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272c:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fcdc 	bl	80010f0 <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe fcd8 	bl	80010f0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e200      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d039      	beq.n	80027da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800277a:	f7fe fcb9 	bl	80010f0 <HAL_GetTick>
 800277e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002782:	f7fe fcb5 	bl	80010f0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1dd      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x4d6>
 80027a0:	e01b      	b.n	80027da <HAL_RCC_OscConfig+0x52e>
 80027a2:	bf00      	nop
 80027a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a9a      	ldr	r2, [pc, #616]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80027ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027b4:	f7fe fc9c 	bl	80010f0 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027bc:	f7fe fc98 	bl	80010f0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1c0      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ce:	4b92      	ldr	r3, [pc, #584]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8081 	beq.w	80028ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a1c <HAL_RCC_OscConfig+0x770>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a8b      	ldr	r2, [pc, #556]	@ (8002a1c <HAL_RCC_OscConfig+0x770>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fc7c 	bl	80010f0 <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7fe fc78 	bl	80010f0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	@ 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1a0      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280e:	4b83      	ldr	r3, [pc, #524]	@ (8002a1c <HAL_RCC_OscConfig+0x770>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x584>
 8002822:	4b7d      	ldr	r3, [pc, #500]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	4a7c      	ldr	r2, [pc, #496]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	@ 0x70
 800282e:	e02d      	b.n	800288c <HAL_RCC_OscConfig+0x5e0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10c      	bne.n	8002852 <HAL_RCC_OscConfig+0x5a6>
 8002838:	4b77      	ldr	r3, [pc, #476]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a76      	ldr	r2, [pc, #472]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
 8002844:	4b74      	ldr	r3, [pc, #464]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	4a73      	ldr	r2, [pc, #460]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x5e0>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b05      	cmp	r3, #5
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x5c8>
 800285a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	@ 0x70
 8002866:	4b6c      	ldr	r3, [pc, #432]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	@ 0x70
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0x5e0>
 8002874:	4b68      	ldr	r3, [pc, #416]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a67      	ldr	r2, [pc, #412]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002880:	4b65      	ldr	r3, [pc, #404]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a64      	ldr	r2, [pc, #400]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fc2c 	bl	80010f0 <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe fc28 	bl	80010f0 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e14e      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028b2:	4b59      	ldr	r3, [pc, #356]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ee      	beq.n	800289c <HAL_RCC_OscConfig+0x5f0>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fc16 	bl	80010f0 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fc12 	bl	80010f0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e138      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028de:	4b4e      	ldr	r3, [pc, #312]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 812d 	beq.w	8002b4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028f4:	4b48      	ldr	r3, [pc, #288]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028fc:	2b18      	cmp	r3, #24
 80028fe:	f000 80bd 	beq.w	8002a7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	2b02      	cmp	r3, #2
 8002908:	f040 809e 	bne.w	8002a48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b42      	ldr	r3, [pc, #264]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a41      	ldr	r2, [pc, #260]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fbea 	bl	80010f0 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fbe6 	bl	80010f0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e10e      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002932:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293e:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002942:	4b37      	ldr	r3, [pc, #220]	@ (8002a20 <HAL_RCC_OscConfig+0x774>)
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	430a      	orrs	r2, r1
 8002952:	4931      	ldr	r1, [pc, #196]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	628b      	str	r3, [r1, #40]	@ 0x28
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	3b01      	subs	r3, #1
 800295e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002966:	3b01      	subs	r3, #1
 8002968:	025b      	lsls	r3, r3, #9
 800296a:	b29b      	uxth	r3, r3
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	3b01      	subs	r3, #1
 8002974:	041b      	lsls	r3, r3, #16
 8002976:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002980:	3b01      	subs	r3, #1
 8002982:	061b      	lsls	r3, r3, #24
 8002984:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002988:	4923      	ldr	r1, [pc, #140]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800298e:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002992:	4a21      	ldr	r2, [pc, #132]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800299a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 800299c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800299e:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <HAL_RCC_OscConfig+0x778>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029a6:	00d2      	lsls	r2, r2, #3
 80029a8:	491b      	ldr	r1, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	f023 020c 	bic.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4917      	ldr	r1, [pc, #92]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029c0:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	f023 0202 	bic.w	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029cc:	4912      	ldr	r1, [pc, #72]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029d2:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	4a10      	ldr	r2, [pc, #64]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029de:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029f6:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_RCC_OscConfig+0x76c>)
 8002a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fb6f 	bl	80010f0 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a14:	e011      	b.n	8002a3a <HAL_RCC_OscConfig+0x78e>
 8002a16:	bf00      	nop
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	58024800 	.word	0x58024800
 8002a20:	fffffc0c 	.word	0xfffffc0c
 8002a24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe fb62 	bl	80010f0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e08a      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x77c>
 8002a46:	e082      	b.n	8002b4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b43      	ldr	r3, [pc, #268]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fb4c 	bl	80010f0 <HAL_GetTick>
 8002a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fb48 	bl	80010f0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e070      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x7b0>
 8002a7a:	e068      	b.n	8002b4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a7c:	4b36      	ldr	r3, [pc, #216]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a82:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d031      	beq.n	8002af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0203 	and.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d12a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d122      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	0a5b      	lsrs	r3, r3, #9
 8002ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d111      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0e1b      	lsrs	r3, r3, #24
 8002ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e02b      	b.n	8002b50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002af8:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d01f      	beq.n	8002b4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b1a:	f7fe fae9 	bl	80010f0 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b20:	bf00      	nop
 8002b22:	f7fe fae5 	bl	80010f0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d0f9      	beq.n	8002b22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_RCC_OscConfig+0x8b0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b3a:	00d2      	lsls	r2, r2, #3
 8002b3c:	4906      	ldr	r1, [pc, #24]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_RCC_OscConfig+0x8ac>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3730      	adds	r7, #48	@ 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	ffff0007 	.word	0xffff0007

08002b60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e19c      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b8a      	ldr	r3, [pc, #552]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b87      	ldr	r3, [pc, #540]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 020f 	bic.w	r2, r3, #15
 8002b8a:	4985      	ldr	r1, [pc, #532]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b83      	ldr	r3, [pc, #524]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e184      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bc0:	4b78      	ldr	r3, [pc, #480]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	4975      	ldr	r1, [pc, #468]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d908      	bls.n	8002c00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bee:	4b6d      	ldr	r3, [pc, #436]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	496a      	ldr	r1, [pc, #424]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	4b64      	ldr	r3, [pc, #400]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d908      	bls.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c1c:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	495e      	ldr	r1, [pc, #376]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	4b59      	ldr	r3, [pc, #356]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d908      	bls.n	8002c5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c4a:	4b56      	ldr	r3, [pc, #344]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4953      	ldr	r1, [pc, #332]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d908      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b4a      	ldr	r3, [pc, #296]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f023 020f 	bic.w	r2, r3, #15
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4947      	ldr	r1, [pc, #284]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d055      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c96:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4940      	ldr	r1, [pc, #256]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d121      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0f6      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cc8:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d115      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0ea      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ce0:	4b30      	ldr	r3, [pc, #192]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0de      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0d6      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d00:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f023 0207 	bic.w	r2, r3, #7
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4925      	ldr	r1, [pc, #148]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d12:	f7fe f9ed 	bl	80010f0 <HAL_GetTick>
 8002d16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7fe f9e9 	bl	80010f0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0be      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d30:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d1eb      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d208      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f023 020f 	bic.w	r2, r3, #15
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	490e      	ldr	r1, [pc, #56]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d214      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	4906      	ldr	r1, [pc, #24]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e086      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
 8002da0:	52002000 	.word	0x52002000
 8002da4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d208      	bcs.n	8002dd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4939      	ldr	r1, [pc, #228]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	4b34      	ldr	r3, [pc, #208]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d208      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002df2:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	492e      	ldr	r1, [pc, #184]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	4b28      	ldr	r3, [pc, #160]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d208      	bcs.n	8002e32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e20:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4922      	ldr	r1, [pc, #136]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d208      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4917      	ldr	r1, [pc, #92]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e60:	f000 f834 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	4912      	ldr	r1, [pc, #72]	@ (8002ebc <HAL_RCC_ClockConfig+0x35c>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <HAL_RCC_ClockConfig+0x35c>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <HAL_RCC_ClockConfig+0x360>)
 8002e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e98:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <HAL_RCC_ClockConfig+0x364>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_RCC_ClockConfig+0x368>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe f8da 	bl	800105c <HAL_InitTick>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	08006708 	.word	0x08006708
 8002ec0:	24000004 	.word	0x24000004
 8002ec4:	24000000 	.word	0x24000000
 8002ec8:	24000008 	.word	0x24000008

08002ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	@ 0x24
 8002ed0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed2:	4bb3      	ldr	r3, [pc, #716]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eda:	2b18      	cmp	r3, #24
 8002edc:	f200 8155 	bhi.w	800318a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f4d 	.word	0x08002f4d
 8002eec:	0800318b 	.word	0x0800318b
 8002ef0:	0800318b 	.word	0x0800318b
 8002ef4:	0800318b 	.word	0x0800318b
 8002ef8:	0800318b 	.word	0x0800318b
 8002efc:	0800318b 	.word	0x0800318b
 8002f00:	0800318b 	.word	0x0800318b
 8002f04:	0800318b 	.word	0x0800318b
 8002f08:	08002f73 	.word	0x08002f73
 8002f0c:	0800318b 	.word	0x0800318b
 8002f10:	0800318b 	.word	0x0800318b
 8002f14:	0800318b 	.word	0x0800318b
 8002f18:	0800318b 	.word	0x0800318b
 8002f1c:	0800318b 	.word	0x0800318b
 8002f20:	0800318b 	.word	0x0800318b
 8002f24:	0800318b 	.word	0x0800318b
 8002f28:	08002f79 	.word	0x08002f79
 8002f2c:	0800318b 	.word	0x0800318b
 8002f30:	0800318b 	.word	0x0800318b
 8002f34:	0800318b 	.word	0x0800318b
 8002f38:	0800318b 	.word	0x0800318b
 8002f3c:	0800318b 	.word	0x0800318b
 8002f40:	0800318b 	.word	0x0800318b
 8002f44:	0800318b 	.word	0x0800318b
 8002f48:	08002f7f 	.word	0x08002f7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f4c:	4b94      	ldr	r3, [pc, #592]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f58:	4b91      	ldr	r3, [pc, #580]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	4a90      	ldr	r2, [pc, #576]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f6a:	e111      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f6c:	4b8d      	ldr	r3, [pc, #564]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f6e:	61bb      	str	r3, [r7, #24]
      break;
 8002f70:	e10e      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f72:	4b8d      	ldr	r3, [pc, #564]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f74:	61bb      	str	r3, [r7, #24]
      break;
 8002f76:	e10b      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f78:	4b8c      	ldr	r3, [pc, #560]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f7a:	61bb      	str	r3, [r7, #24]
      break;
 8002f7c:	e108      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f7e:	4b88      	ldr	r3, [pc, #544]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f88:	4b85      	ldr	r3, [pc, #532]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f94:	4b82      	ldr	r3, [pc, #520]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f9e:	4b80      	ldr	r3, [pc, #512]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa2:	08db      	lsrs	r3, r3, #3
 8002fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80e1 	beq.w	8003184 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	f000 8083 	beq.w	80030d0 <HAL_RCC_GetSysClockFreq+0x204>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	f200 80a1 	bhi.w	8003114 <HAL_RCC_GetSysClockFreq+0x248>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x114>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d056      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fde:	e099      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d02d      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fec:	4b6c      	ldr	r3, [pc, #432]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	08db      	lsrs	r3, r3, #3
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003016:	4b62      	ldr	r3, [pc, #392]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003026:	ed97 6a02 	vldr	s12, [r7, #8]
 800302a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800302e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800303e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003042:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003046:	e087      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003052:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305a:	4b51      	ldr	r3, [pc, #324]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306a:	ed97 6a02 	vldr	s12, [r7, #8]
 800306e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800307e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800308a:	e065      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003096:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800309a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309e:	4b40      	ldr	r3, [pc, #256]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ce:	e043      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80030de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e2:	4b2f      	ldr	r3, [pc, #188]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003112:	e021      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003126:	4b1e      	ldr	r3, [pc, #120]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003136:	ed97 6a02 	vldr	s12, [r7, #8]
 800313a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800313e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800314a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003156:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	0a5b      	lsrs	r3, r3, #9
 800315e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003162:	3301      	adds	r3, #1
 8003164:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003170:	edd7 6a07 	vldr	s13, [r7, #28]
 8003174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800317c:	ee17 3a90 	vmov	r3, s15
 8003180:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003182:	e005      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
      break;
 8003188:	e002      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800318a:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800318c:	61bb      	str	r3, [r7, #24]
      break;
 800318e:	bf00      	nop
  }

  return sysclockfreq;
 8003190:	69bb      	ldr	r3, [r7, #24]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	@ 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	58024400 	.word	0x58024400
 80031a4:	03d09000 	.word	0x03d09000
 80031a8:	003d0900 	.word	0x003d0900
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	46000000 	.word	0x46000000
 80031b4:	4c742400 	.word	0x4c742400
 80031b8:	4a742400 	.word	0x4a742400
 80031bc:	4af42400 	.word	0x4af42400

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031c6:	f7ff fe81 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 80031ca:	4602      	mov	r2, r0
 80031cc:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x50>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	490f      	ldr	r1, [pc, #60]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x54>)
 80031d8:	5ccb      	ldrb	r3, [r1, r3]
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x50>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	4a09      	ldr	r2, [pc, #36]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x54>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a07      	ldr	r2, [pc, #28]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x58>)
 80031fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031fe:	4a07      	ldr	r2, [pc, #28]	@ (800321c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x58>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	58024400 	.word	0x58024400
 8003214:	08006708 	.word	0x08006708
 8003218:	24000004 	.word	0x24000004
 800321c:	24000000 	.word	0x24000000

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003224:	f7ff ffcc 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4904      	ldr	r1, [pc, #16]	@ (8003248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	58024400 	.word	0x58024400
 8003248:	08006708 	.word	0x08006708

0800324c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003250:	f7ff ffb6 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4904      	ldr	r1, [pc, #16]	@ (8003274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	58024400 	.word	0x58024400
 8003274:	08006708 	.word	0x08006708

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b0ca      	sub	sp, #296	@ 0x128
 800327e:	af00      	add	r7, sp, #0
 8003280:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800328a:	2300      	movs	r3, #0
 800328c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800329c:	2500      	movs	r5, #0
 800329e:	ea54 0305 	orrs.w	r3, r4, r5
 80032a2:	d049      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032ae:	d02f      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032b4:	d828      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ba:	d01a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032c0:	d822      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ca:	d007      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032cc:	e01c      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ce:	4bb8      	ldr	r3, [pc, #736]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d2:	4ab7      	ldr	r2, [pc, #732]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032da:	e01a      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	3308      	adds	r3, #8
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fc8f 	bl	8004c08 <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032f0:	e00f      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f6:	3328      	adds	r3, #40	@ 0x28
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fd36 	bl	8004d6c <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800331a:	4ba5      	ldr	r3, [pc, #660]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800331c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003328:	4aa1      	ldr	r2, [pc, #644]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800332a:	430b      	orrs	r3, r1
 800332c:	6513      	str	r3, [r2, #80]	@ 0x50
 800332e:	e003      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003344:	f04f 0900 	mov.w	r9, #0
 8003348:	ea58 0309 	orrs.w	r3, r8, r9
 800334c:	d047      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	2b04      	cmp	r3, #4
 8003356:	d82a      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003375 	.word	0x08003375
 8003364:	08003383 	.word	0x08003383
 8003368:	08003399 	.word	0x08003399
 800336c:	080033b7 	.word	0x080033b7
 8003370:	080033b7 	.word	0x080033b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003374:	4b8e      	ldr	r3, [pc, #568]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	4a8d      	ldr	r2, [pc, #564]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800337e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003380:	e01a      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003386:	3308      	adds	r3, #8
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f001 fc3c 	bl	8004c08 <RCCEx_PLL2_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003396:	e00f      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	3328      	adds	r3, #40	@ 0x28
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 fce3 	bl	8004d6c <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ac:	e004      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033c0:	4b7b      	ldr	r3, [pc, #492]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c4:	f023 0107 	bic.w	r1, r3, #7
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	4a78      	ldr	r2, [pc, #480]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80033ea:	f04f 0b00 	mov.w	fp, #0
 80033ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80033f2:	d04c      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80033f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033fe:	d030      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003404:	d829      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003406:	2bc0      	cmp	r3, #192	@ 0xc0
 8003408:	d02d      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800340a:	2bc0      	cmp	r3, #192	@ 0xc0
 800340c:	d825      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800340e:	2b80      	cmp	r3, #128	@ 0x80
 8003410:	d018      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003412:	2b80      	cmp	r3, #128	@ 0x80
 8003414:	d821      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800341a:	2b40      	cmp	r3, #64	@ 0x40
 800341c:	d007      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800341e:	e01c      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003420:	4b63      	ldr	r3, [pc, #396]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	4a62      	ldr	r2, [pc, #392]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800342c:	e01c      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	3308      	adds	r3, #8
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f001 fbe6 	bl	8004c08 <RCCEx_PLL2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003442:	e011      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	3328      	adds	r3, #40	@ 0x28
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f001 fc8d 	bl	8004d6c <RCCEx_PLL3_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003470:	4b4f      	ldr	r3, [pc, #316]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003474:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347e:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003480:	430b      	orrs	r3, r1
 8003482:	6513      	str	r3, [r2, #80]	@ 0x50
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800349a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80034a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80034a8:	460b      	mov	r3, r1
 80034aa:	4313      	orrs	r3, r2
 80034ac:	d053      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034ba:	d035      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80034bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034c0:	d82e      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034c6:	d031      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80034c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034cc:	d828      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034d2:	d01a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80034d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034d8:	d822      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034e2:	d007      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80034e4:	e01c      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e6:	4b32      	ldr	r3, [pc, #200]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	4a31      	ldr	r2, [pc, #196]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034f2:	e01c      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f8:	3308      	adds	r3, #8
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fb83 	bl	8004c08 <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003508:	e011      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f001 fc2a 	bl	8004d6c <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800351e:	e006      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003526:	e002      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800352c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003536:	4b1e      	ldr	r3, [pc, #120]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003546:	4a1a      	ldr	r2, [pc, #104]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003548:	430b      	orrs	r3, r1
 800354a:	6593      	str	r3, [r2, #88]	@ 0x58
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003562:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800356c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003570:	460b      	mov	r3, r1
 8003572:	4313      	orrs	r3, r2
 8003574:	d056      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800357e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003582:	d038      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003584:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003588:	d831      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800358a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800358e:	d034      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003590:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003594:	d82b      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003596:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800359a:	d01d      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800359c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035a0:	d825      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035ac:	e01f      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ae:	bf00      	nop
 80035b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b4:	4ba2      	ldr	r3, [pc, #648]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	4aa1      	ldr	r2, [pc, #644]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c0:	e01c      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c6:	3308      	adds	r3, #8
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fb1c 	bl	8004c08 <RCCEx_PLL2_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035d6:	e011      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	3328      	adds	r3, #40	@ 0x28
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 fbc3 	bl	8004d6c <RCCEx_PLL3_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ec:	e006      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035f4:	e002      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003604:	4b8e      	ldr	r3, [pc, #568]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003614:	4a8a      	ldr	r2, [pc, #552]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003616:	430b      	orrs	r3, r1
 8003618:	6593      	str	r3, [r2, #88]	@ 0x58
 800361a:	e003      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003630:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800363a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800363e:	460b      	mov	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	d03a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364a:	2b30      	cmp	r3, #48	@ 0x30
 800364c:	d01f      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800364e:	2b30      	cmp	r3, #48	@ 0x30
 8003650:	d819      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003652:	2b20      	cmp	r3, #32
 8003654:	d00c      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003656:	2b20      	cmp	r3, #32
 8003658:	d815      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d019      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800365e:	2b10      	cmp	r3, #16
 8003660:	d111      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003662:	4b77      	ldr	r3, [pc, #476]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	4a76      	ldr	r2, [pc, #472]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800366e:	e011      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003674:	3308      	adds	r3, #8
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f001 fac5 	bl	8004c08 <RCCEx_PLL2_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003684:	e006      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800368c:	e002      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800368e:	bf00      	nop
 8003690:	e000      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800369c:	4b68      	ldr	r3, [pc, #416]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800369e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036aa:	4a65      	ldr	r2, [pc, #404]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ac:	430b      	orrs	r3, r1
 80036ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036b0:	e003      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80036c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4313      	orrs	r3, r2
 80036d8:	d051      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036e4:	d035      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80036e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ea:	d82e      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036f0:	d031      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80036f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036f6:	d828      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036fc:	d01a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003702:	d822      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370c:	d007      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800370e:	e01c      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4b4b      	ldr	r3, [pc, #300]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	4a4a      	ldr	r2, [pc, #296]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800371c:	e01c      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	3308      	adds	r3, #8
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f001 fa6e 	bl	8004c08 <RCCEx_PLL2_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003732:	e011      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	3328      	adds	r3, #40	@ 0x28
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fb15 	bl	8004d6c <RCCEx_PLL3_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003748:	e006      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003750:	e002      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003760:	4b37      	ldr	r3, [pc, #220]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003764:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376e:	4a34      	ldr	r2, [pc, #208]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6513      	str	r3, [r2, #80]	@ 0x50
 8003774:	e003      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800378a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800378e:	2300      	movs	r3, #0
 8003790:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003794:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003798:	460b      	mov	r3, r1
 800379a:	4313      	orrs	r3, r2
 800379c:	d056      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a8:	d033      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ae:	d82c      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037b4:	d02f      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037ba:	d826      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037c0:	d02b      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80037c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037c6:	d820      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037cc:	d012      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80037ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037d2:	d81a      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d022      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037dc:	d115      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	3308      	adds	r3, #8
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fa0e 	bl	8004c08 <RCCEx_PLL2_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037f2:	e015      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	3328      	adds	r3, #40	@ 0x28
 80037fa:	2101      	movs	r1, #1
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 fab5 	bl	8004d6c <RCCEx_PLL3_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003808:	e00a      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003810:	e006      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003812:	bf00      	nop
 8003814:	e004      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003816:	bf00      	nop
 8003818:	e002      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800381e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003836:	4a02      	ldr	r2, [pc, #8]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003838:	430b      	orrs	r3, r1
 800383a:	6513      	str	r3, [r2, #80]	@ 0x50
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800383e:	bf00      	nop
 8003840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003862:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003866:	460b      	mov	r3, r1
 8003868:	4313      	orrs	r3, r2
 800386a:	d055      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003874:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003878:	d033      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800387a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800387e:	d82c      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003884:	d02f      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388a:	d826      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800388c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003890:	d02b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003896:	d820      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800389c:	d012      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800389e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038a2:	d81a      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ac:	d115      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	3308      	adds	r3, #8
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 f9a6 	bl	8004c08 <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038c2:	e015      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	3328      	adds	r3, #40	@ 0x28
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fa4d 	bl	8004d6c <RCCEx_PLL3_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038d8:	e00a      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038e0:	e006      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038e2:	bf00      	nop
 80038e4:	e004      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038f8:	4ba3      	ldr	r3, [pc, #652]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003908:	4a9f      	ldr	r2, [pc, #636]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800390a:	430b      	orrs	r3, r1
 800390c:	6593      	str	r3, [r2, #88]	@ 0x58
 800390e:	e003      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800392e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003932:	460b      	mov	r3, r1
 8003934:	4313      	orrs	r3, r2
 8003936:	d037      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003942:	d00e      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003948:	d816      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d018      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800394e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003952:	d111      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4b8c      	ldr	r3, [pc, #560]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	4a8b      	ldr	r2, [pc, #556]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003960:	e00f      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	3308      	adds	r3, #8
 8003968:	2101      	movs	r1, #1
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f94c 	bl	8004c08 <RCCEx_PLL2_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003976:	e004      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800398a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a7b      	ldr	r2, [pc, #492]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800399a:	430b      	orrs	r3, r1
 800399c:	6513      	str	r3, [r2, #80]	@ 0x50
 800399e:	e003      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80039b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4313      	orrs	r3, r2
 80039c6:	d039      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d81c      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80039d2:	a201      	add	r2, pc, #4	@ (adr r2, 80039d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	08003a15 	.word	0x08003a15
 80039dc:	080039e9 	.word	0x080039e9
 80039e0:	080039f7 	.word	0x080039f7
 80039e4:	08003a15 	.word	0x08003a15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e8:	4b67      	ldr	r3, [pc, #412]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	4a66      	ldr	r2, [pc, #408]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039f4:	e00f      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fa:	3308      	adds	r3, #8
 80039fc:	2102      	movs	r1, #2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 f902 	bl	8004c08 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a0a:	e004      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a12:	e000      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	f023 0103 	bic.w	r1, r3, #3
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2c:	4a56      	ldr	r2, [pc, #344]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a56:	460b      	mov	r3, r1
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f000 809f 	beq.w	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a4a      	ldr	r2, [pc, #296]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a6a:	f7fd fb41 	bl	80010f0 <HAL_GetTick>
 8003a6e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a72:	e00b      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a74:	f7fd fb3c 	bl	80010f0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	@ 0x64
 8003a82:	d903      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a8a:	e005      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ed      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d179      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003aa0:	4b39      	ldr	r3, [pc, #228]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aac:	4053      	eors	r3, r2
 8003aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d015      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab6:	4b34      	ldr	r3, [pc, #208]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac2:	4b31      	ldr	r3, [pc, #196]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	4a30      	ldr	r2, [pc, #192]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003acc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ace:	4b2e      	ldr	r3, [pc, #184]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ada:	4a2b      	ldr	r2, [pc, #172]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ae0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aee:	d118      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fd fafe 	bl	80010f0 <HAL_GetTick>
 8003af4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003af8:	e00d      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fd faf9 	bl	80010f0 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d903      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b16:	4b1c      	ldr	r3, [pc, #112]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0eb      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d129      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3a:	d10e      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b4c:	091a      	lsrs	r2, r3, #4
 8003b4e:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	4a0d      	ldr	r2, [pc, #52]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6113      	str	r3, [r2, #16]
 8003b58:	e005      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b64:	6113      	str	r3, [r2, #16]
 8003b66:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b76:	4a04      	ldr	r2, [pc, #16]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7c:	e00e      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b86:	e009      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	58024800 	.word	0x58024800
 8003b90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f002 0301 	and.w	r3, r2, #1
 8003ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bb2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f000 8089 	beq.w	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bc4:	2b28      	cmp	r3, #40	@ 0x28
 8003bc6:	d86b      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003ca9 	.word	0x08003ca9
 8003bd4:	08003ca1 	.word	0x08003ca1
 8003bd8:	08003ca1 	.word	0x08003ca1
 8003bdc:	08003ca1 	.word	0x08003ca1
 8003be0:	08003ca1 	.word	0x08003ca1
 8003be4:	08003ca1 	.word	0x08003ca1
 8003be8:	08003ca1 	.word	0x08003ca1
 8003bec:	08003ca1 	.word	0x08003ca1
 8003bf0:	08003c75 	.word	0x08003c75
 8003bf4:	08003ca1 	.word	0x08003ca1
 8003bf8:	08003ca1 	.word	0x08003ca1
 8003bfc:	08003ca1 	.word	0x08003ca1
 8003c00:	08003ca1 	.word	0x08003ca1
 8003c04:	08003ca1 	.word	0x08003ca1
 8003c08:	08003ca1 	.word	0x08003ca1
 8003c0c:	08003ca1 	.word	0x08003ca1
 8003c10:	08003c8b 	.word	0x08003c8b
 8003c14:	08003ca1 	.word	0x08003ca1
 8003c18:	08003ca1 	.word	0x08003ca1
 8003c1c:	08003ca1 	.word	0x08003ca1
 8003c20:	08003ca1 	.word	0x08003ca1
 8003c24:	08003ca1 	.word	0x08003ca1
 8003c28:	08003ca1 	.word	0x08003ca1
 8003c2c:	08003ca1 	.word	0x08003ca1
 8003c30:	08003ca9 	.word	0x08003ca9
 8003c34:	08003ca1 	.word	0x08003ca1
 8003c38:	08003ca1 	.word	0x08003ca1
 8003c3c:	08003ca1 	.word	0x08003ca1
 8003c40:	08003ca1 	.word	0x08003ca1
 8003c44:	08003ca1 	.word	0x08003ca1
 8003c48:	08003ca1 	.word	0x08003ca1
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003ca9 	.word	0x08003ca9
 8003c54:	08003ca1 	.word	0x08003ca1
 8003c58:	08003ca1 	.word	0x08003ca1
 8003c5c:	08003ca1 	.word	0x08003ca1
 8003c60:	08003ca1 	.word	0x08003ca1
 8003c64:	08003ca1 	.word	0x08003ca1
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003ca9 	.word	0x08003ca9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c78:	3308      	adds	r3, #8
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 ffc3 	bl	8004c08 <RCCEx_PLL2_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c88:	e00f      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8e:	3328      	adds	r3, #40	@ 0x28
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 f86a 	bl	8004d6c <RCCEx_PLL3_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c9e:	e004      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cb2:	4bbf      	ldr	r3, [pc, #764]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc0:	4abb      	ldr	r2, [pc, #748]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cc6:	e003      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f002 0302 	and.w	r3, r2, #2
 8003cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ce6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cea:	460b      	mov	r3, r1
 8003cec:	4313      	orrs	r3, r2
 8003cee:	d041      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d824      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d4d 	.word	0x08003d4d
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d2f 	.word	0x08003d2f
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d4d 	.word	0x08003d4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ff71 	bl	8004c08 <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	3328      	adds	r3, #40	@ 0x28
 8003d34:	2101      	movs	r1, #1
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f818 	bl	8004d6c <RCCEx_PLL3_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d56:	4b96      	ldr	r3, [pc, #600]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5a:	f023 0107 	bic.w	r1, r3, #7
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d64:	4a92      	ldr	r2, [pc, #584]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d6a:	e003      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f002 0304 	and.w	r3, r2, #4
 8003d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d044      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9c:	2b05      	cmp	r3, #5
 8003d9e:	d825      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003da0:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003df5 	.word	0x08003df5
 8003dac:	08003dc1 	.word	0x08003dc1
 8003db0:	08003dd7 	.word	0x08003dd7
 8003db4:	08003df5 	.word	0x08003df5
 8003db8:	08003df5 	.word	0x08003df5
 8003dbc:	08003df5 	.word	0x08003df5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 ff1d 	bl	8004c08 <RCCEx_PLL2_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3328      	adds	r3, #40	@ 0x28
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 ffc4 	bl	8004d6c <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dea:	e004      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e02:	f023 0107 	bic.w	r1, r3, #7
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e0e:	4a68      	ldr	r2, [pc, #416]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f002 0320 	and.w	r3, r2, #32
 8003e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	d055      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e4a:	d033      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e50:	d82c      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e56:	d02f      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5c:	d826      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e62:	d02b      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e68:	d820      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e6e:	d012      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e74:	d81a      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d022      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e7e:	d115      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e84:	3308      	adds	r3, #8
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 febd 	bl	8004c08 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e94:	e015      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	3328      	adds	r3, #40	@ 0x28
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 ff64 	bl	8004d6c <RCCEx_PLL3_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eb2:	e006      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003eb4:	bf00      	nop
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eca:	4b39      	ldr	r3, [pc, #228]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eda:	4a35      	ldr	r2, [pc, #212]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ee0:	e003      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4313      	orrs	r3, r2
 8003f08:	d058      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f12:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f16:	d033      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f18:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f1c:	d82c      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f22:	d02f      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f28:	d826      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f2e:	d02b      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f34:	d820      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3a:	d012      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f40:	d81a      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d022      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4a:	d115      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f50:	3308      	adds	r3, #8
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fe57 	bl	8004c08 <RCCEx_PLL2_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f60:	e015      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f66:	3328      	adds	r3, #40	@ 0x28
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fefe 	bl	8004d6c <RCCEx_PLL3_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f76:	e00a      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f7e:	e006      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f80:	bf00      	nop
 8003f82:	e004      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10e      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fa6:	4a02      	ldr	r2, [pc, #8]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fac:	e006      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003fae:	bf00      	nop
 8003fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fd2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	d055      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fe4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fe8:	d033      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003fea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fee:	d82c      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff4:	d02f      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffa:	d826      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ffc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004000:	d02b      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004002:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004006:	d820      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800400c:	d012      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800400e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004012:	d81a      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d022      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800401c:	d115      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	3308      	adds	r3, #8
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fdee 	bl	8004c08 <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004032:	e015      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	3328      	adds	r3, #40	@ 0x28
 800403a:	2102      	movs	r1, #2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fe95 	bl	8004d6c <RCCEx_PLL3_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004048:	e00a      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004050:	e006      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004052:	bf00      	nop
 8004054:	e004      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004056:	bf00      	nop
 8004058:	e002      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800405e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004068:	4ba1      	ldr	r3, [pc, #644]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004078:	4a9d      	ldr	r2, [pc, #628]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800407a:	430b      	orrs	r3, r1
 800407c:	6593      	str	r3, [r2, #88]	@ 0x58
 800407e:	e003      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f002 0308 	and.w	r3, r2, #8
 8004094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004098:	2300      	movs	r3, #0
 800409a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800409e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040a2:	460b      	mov	r3, r1
 80040a4:	4313      	orrs	r3, r2
 80040a6:	d01e      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	3328      	adds	r3, #40	@ 0x28
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fe54 	bl	8004d6c <RCCEx_PLL3_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040d0:	4b87      	ldr	r3, [pc, #540]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e0:	4a83      	ldr	r2, [pc, #524]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040e2:	430b      	orrs	r3, r1
 80040e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f002 0310 	and.w	r3, r2, #16
 80040f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004100:	460b      	mov	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	d01e      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800410e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004112:	d10c      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	3328      	adds	r3, #40	@ 0x28
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fe25 	bl	8004d6c <RCCEx_PLL3_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800412e:	4b70      	ldr	r3, [pc, #448]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004132:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800413e:	4a6c      	ldr	r2, [pc, #432]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004140:	430b      	orrs	r3, r1
 8004142:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800415a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d03e      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800416c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004170:	d022      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004172:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004176:	d81b      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004180:	d00b      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004182:	e015      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004188:	3308      	adds	r3, #8
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd3b 	bl	8004c08 <RCCEx_PLL2_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004198:	e00f      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	3328      	adds	r3, #40	@ 0x28
 80041a0:	2102      	movs	r1, #2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fde2 	bl	8004d6c <RCCEx_PLL3_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041ae:	e004      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c2:	4b4b      	ldr	r3, [pc, #300]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041d2:	4a47      	ldr	r2, [pc, #284]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d8:	e003      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041f0:	2300      	movs	r3, #0
 80041f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041f8:	460b      	mov	r3, r1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	d03b      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800420a:	d01f      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800420c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004210:	d818      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004218:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800421c:	d007      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800421e:	e011      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004220:	4b33      	ldr	r3, [pc, #204]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	4a32      	ldr	r2, [pc, #200]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800422a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800422c:	e00f      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004232:	3328      	adds	r3, #40	@ 0x28
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fd98 	bl	8004d6c <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004256:	4b26      	ldr	r3, [pc, #152]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004266:	4a22      	ldr	r2, [pc, #136]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6553      	str	r3, [r2, #84]	@ 0x54
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004282:	673b      	str	r3, [r7, #112]	@ 0x70
 8004284:	2300      	movs	r3, #0
 8004286:	677b      	str	r3, [r7, #116]	@ 0x74
 8004288:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800428c:	460b      	mov	r3, r1
 800428e:	4313      	orrs	r3, r2
 8004290:	d034      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a0:	d007      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042a2:	e011      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a4:	4b12      	ldr	r3, [pc, #72]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	4a11      	ldr	r2, [pc, #68]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042b0:	e00e      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b6:	3308      	adds	r3, #8
 80042b8:	2102      	movs	r1, #2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fca4 	bl	8004c08 <RCCEx_PLL2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e6:	4a02      	ldr	r2, [pc, #8]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800430a:	2300      	movs	r3, #0
 800430c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800430e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	d00c      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431c:	3328      	adds	r3, #40	@ 0x28
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fd23 	bl	8004d6c <RCCEx_PLL3_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800433e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004340:	2300      	movs	r3, #0
 8004342:	667b      	str	r3, [r7, #100]	@ 0x64
 8004344:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d038      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800435a:	d018      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800435c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004360:	d811      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004366:	d014      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800436c:	d80b      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004376:	d106      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004378:	4bc3      	ldr	r3, [pc, #780]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	4ac2      	ldr	r2, [pc, #776]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800437e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004384:	e008      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800438c:	e004      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a0:	4bb9      	ldr	r3, [pc, #740]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b0:	4ab5      	ldr	r2, [pc, #724]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80043b6:	e003      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80043cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043ce:	2300      	movs	r3, #0
 80043d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043dc:	4baa      	ldr	r3, [pc, #680]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ea:	4aa7      	ldr	r2, [pc, #668]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80043fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80043fe:	2300      	movs	r3, #0
 8004400:	657b      	str	r3, [r7, #84]	@ 0x54
 8004402:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004406:	460b      	mov	r3, r1
 8004408:	4313      	orrs	r3, r2
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800440c:	4b9e      	ldr	r3, [pc, #632]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800441c:	4a9a      	ldr	r2, [pc, #616]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800442e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004430:	2300      	movs	r3, #0
 8004432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004434:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800443e:	4b92      	ldr	r3, [pc, #584]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004442:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800444c:	4a8e      	ldr	r2, [pc, #568]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444e:	430b      	orrs	r3, r1
 8004450:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800445e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004460:	2300      	movs	r3, #0
 8004462:	647b      	str	r3, [r7, #68]	@ 0x44
 8004464:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004468:	460b      	mov	r3, r1
 800446a:	4313      	orrs	r3, r2
 800446c:	d00e      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800446e:	4b86      	ldr	r3, [pc, #536]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	4a85      	ldr	r2, [pc, #532]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004474:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004478:	6113      	str	r3, [r2, #16]
 800447a:	4b83      	ldr	r3, [pc, #524]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447c:	6919      	ldr	r1, [r3, #16]
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004486:	4a80      	ldr	r2, [pc, #512]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38
 800449a:	2300      	movs	r3, #0
 800449c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800449e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044a8:	4b77      	ldr	r3, [pc, #476]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	4a74      	ldr	r2, [pc, #464]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80044c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ca:	2300      	movs	r3, #0
 80044cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e8:	4a67      	ldr	r2, [pc, #412]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ea:	430b      	orrs	r3, r1
 80044ec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	2100      	movs	r1, #0
 80044f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004500:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d011      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	3308      	adds	r3, #8
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fb78 	bl	8004c08 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800451e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	2100      	movs	r1, #0
 8004538:	6239      	str	r1, [r7, #32]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004540:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d011      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	3308      	adds	r3, #8
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fb58 	bl	8004c08 <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800455e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	2100      	movs	r1, #0
 8004578:	61b9      	str	r1, [r7, #24]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d011      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	3308      	adds	r3, #8
 8004590:	2102      	movs	r1, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fb38 	bl	8004c08 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	2100      	movs	r1, #0
 80045b8:	6139      	str	r1, [r7, #16]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d011      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	3328      	adds	r3, #40	@ 0x28
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fbca 	bl	8004d6c <RCCEx_PLL3_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	2100      	movs	r1, #0
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d011      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	3328      	adds	r3, #40	@ 0x28
 8004610:	2101      	movs	r1, #1
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fbaa 	bl	8004d6c <RCCEx_PLL3_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800461e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	2100      	movs	r1, #0
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d011      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	3328      	adds	r3, #40	@ 0x28
 8004650:	2102      	movs	r1, #2
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fb8a 	bl	8004d6c <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800466e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e000      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
}
 800467c:	4618      	mov	r0, r3
 800467e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004682:	46bd      	mov	sp, r7
 8004684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004688:	58024400 	.word	0x58024400

0800468c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004690:	f7fe fd96 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4904      	ldr	r1, [pc, #16]	@ (80046b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	58024400 	.word	0x58024400
 80046b4:	08006708 	.word	0x08006708

080046b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	@ 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046c0:	4ba1      	ldr	r3, [pc, #644]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046ca:	4b9f      	ldr	r3, [pc, #636]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	0b1b      	lsrs	r3, r3, #12
 80046d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80046e2:	4b99      	ldr	r3, [pc, #612]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	08db      	lsrs	r3, r3, #3
 80046e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8111 	beq.w	8004928 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b02      	cmp	r3, #2
 800470a:	f000 8083 	beq.w	8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b02      	cmp	r3, #2
 8004712:	f200 80a1 	bhi.w	8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d056      	beq.n	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004722:	e099      	b.n	8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004724:	4b88      	ldr	r3, [pc, #544]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d02d      	beq.n	800478c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004730:	4b85      	ldr	r3, [pc, #532]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	08db      	lsrs	r3, r3, #3
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	4a84      	ldr	r2, [pc, #528]	@ (800494c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475a:	4b7b      	ldr	r3, [pc, #492]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476a:	ed97 6a03 	vldr	s12, [r7, #12]
 800476e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800477e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004786:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800478a:	e087      	b.n	800489c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004954 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479e:	4b6a      	ldr	r3, [pc, #424]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ce:	e065      	b.n	800489c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e2:	4b59      	ldr	r3, [pc, #356]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004812:	e043      	b.n	800489c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800495c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b48      	ldr	r3, [pc, #288]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a03 	vldr	s12, [r7, #12]
 800483a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004856:	e021      	b.n	800489c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b37      	ldr	r3, [pc, #220]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800489c:	4b2a      	ldr	r3, [pc, #168]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	0a5b      	lsrs	r3, r3, #9
 80048a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c2:	ee17 2a90 	vmov	r2, s15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f0:	ee17 2a90 	vmov	r2, s15
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048f8:	4b13      	ldr	r3, [pc, #76]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	0e1b      	lsrs	r3, r3, #24
 80048fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800490e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004912:	edd7 6a07 	vldr	s13, [r7, #28]
 8004916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491e:	ee17 2a90 	vmov	r2, s15
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004926:	e008      	b.n	800493a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
}
 800493a:	bf00      	nop
 800493c:	3724      	adds	r7, #36	@ 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400
 800494c:	03d09000 	.word	0x03d09000
 8004950:	46000000 	.word	0x46000000
 8004954:	4c742400 	.word	0x4c742400
 8004958:	4a742400 	.word	0x4a742400
 800495c:	4af42400 	.word	0x4af42400

08004960 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	@ 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004968:	4ba1      	ldr	r3, [pc, #644]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004972:	4b9f      	ldr	r3, [pc, #636]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	0d1b      	lsrs	r3, r3, #20
 8004978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800497c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800497e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800498a:	4b99      	ldr	r3, [pc, #612]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	08db      	lsrs	r3, r3, #3
 8004990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8111 	beq.w	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	f000 8083 	beq.w	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	f200 80a1 	bhi.w	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d056      	beq.n	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049ca:	e099      	b.n	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049cc:	4b88      	ldr	r3, [pc, #544]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02d      	beq.n	8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049d8:	4b85      	ldr	r3, [pc, #532]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	08db      	lsrs	r3, r3, #3
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	4a84      	ldr	r2, [pc, #528]	@ (8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
 80049e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a02:	4b7b      	ldr	r3, [pc, #492]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a32:	e087      	b.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a76:	e065      	b.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b59      	ldr	r3, [pc, #356]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aba:	e043      	b.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ace:	4b48      	ldr	r3, [pc, #288]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afe:	e021      	b.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b37      	ldr	r3, [pc, #220]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b44:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	0a5b      	lsrs	r3, r3, #9
 8004b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6a:	ee17 2a90 	vmov	r2, s15
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b72:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	0c1b      	lsrs	r3, r3, #16
 8004b78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b98:	ee17 2a90 	vmov	r2, s15
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ba0:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	0e1b      	lsrs	r3, r3, #24
 8004ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc6:	ee17 2a90 	vmov	r2, s15
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bce:	e008      	b.n	8004be2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
}
 8004be2:	bf00      	nop
 8004be4:	3724      	adds	r7, #36	@ 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	03d09000 	.word	0x03d09000
 8004bf8:	46000000 	.word	0x46000000
 8004bfc:	4c742400 	.word	0x4c742400
 8004c00:	4a742400 	.word	0x4a742400
 8004c04:	4af42400 	.word	0x4af42400

08004c08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c16:	4b53      	ldr	r3, [pc, #332]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d101      	bne.n	8004c26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e099      	b.n	8004d5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c26:	4b4f      	ldr	r3, [pc, #316]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4e      	ldr	r2, [pc, #312]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c32:	f7fc fa5d 	bl	80010f0 <HAL_GetTick>
 8004c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c38:	e008      	b.n	8004c4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c3a:	f7fc fa59 	bl	80010f0 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e086      	b.n	8004d5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c4c:	4b45      	ldr	r3, [pc, #276]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f0      	bne.n	8004c3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c58:	4b42      	ldr	r3, [pc, #264]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	031b      	lsls	r3, r3, #12
 8004c66:	493f      	ldr	r1, [pc, #252]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	025b      	lsls	r3, r3, #9
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	061b      	lsls	r3, r3, #24
 8004c98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c9c:	4931      	ldr	r1, [pc, #196]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ca2:	4b30      	ldr	r3, [pc, #192]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	492d      	ldr	r1, [pc, #180]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	f023 0220 	bic.w	r2, r3, #32
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	4928      	ldr	r1, [pc, #160]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cc6:	4b27      	ldr	r3, [pc, #156]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	4a26      	ldr	r2, [pc, #152]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	f023 0310 	bic.w	r3, r3, #16
 8004cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cd2:	4b24      	ldr	r3, [pc, #144]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cd6:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <RCCEx_PLL2_Config+0x160>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	69d2      	ldr	r2, [r2, #28]
 8004cde:	00d2      	lsls	r2, r2, #3
 8004ce0:	4920      	ldr	r1, [pc, #128]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	4a1e      	ldr	r2, [pc, #120]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004cec:	f043 0310 	orr.w	r3, r3, #16
 8004cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	4a19      	ldr	r2, [pc, #100]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004cfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d04:	e00f      	b.n	8004d26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d106      	bne.n	8004d1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d0c:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4a14      	ldr	r2, [pc, #80]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d18:	e005      	b.n	8004d26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d1a:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	4a11      	ldr	r2, [pc, #68]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d26:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d32:	f7fc f9dd 	bl	80010f0 <HAL_GetTick>
 8004d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d38:	e008      	b.n	8004d4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d3a:	f7fc f9d9 	bl	80010f0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e006      	b.n	8004d5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	58024400 	.word	0x58024400
 8004d68:	ffff0007 	.word	0xffff0007

08004d6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d7a:	4b53      	ldr	r3, [pc, #332]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d101      	bne.n	8004d8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e099      	b.n	8004ebe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004d90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d96:	f7fc f9ab 	bl	80010f0 <HAL_GetTick>
 8004d9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d9e:	f7fc f9a7 	bl	80010f0 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e086      	b.n	8004ebe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004db0:	4b45      	ldr	r3, [pc, #276]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dbc:	4b42      	ldr	r3, [pc, #264]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	051b      	lsls	r3, r3, #20
 8004dca:	493f      	ldr	r1, [pc, #252]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	025b      	lsls	r3, r3, #9
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	041b      	lsls	r3, r3, #16
 8004dee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	061b      	lsls	r3, r3, #24
 8004dfc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e00:	4931      	ldr	r1, [pc, #196]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e06:	4b30      	ldr	r3, [pc, #192]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	492d      	ldr	r1, [pc, #180]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	4928      	ldr	r1, [pc, #160]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e2a:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e36:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ecc <RCCEx_PLL3_Config+0x160>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	69d2      	ldr	r2, [r2, #28]
 8004e42:	00d2      	lsls	r2, r2, #3
 8004e44:	4920      	ldr	r1, [pc, #128]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e68:	e00f      	b.n	8004e8a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d106      	bne.n	8004e7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e70:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	4a14      	ldr	r2, [pc, #80]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e7c:	e005      	b.n	8004e8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	4a11      	ldr	r2, [pc, #68]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e96:	f7fc f92b 	bl	80010f0 <HAL_GetTick>
 8004e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e9c:	e008      	b.n	8004eb0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e9e:	f7fc f927 	bl	80010f0 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e006      	b.n	8004ebe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004eb0:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	ffff0007 	.word	0xffff0007

08004ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e042      	b.n	8004f68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fb fead 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2224      	movs	r2, #36	@ 0x24
 8004efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fd90 	bl	8005a40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f825 	bl	8004f70 <UART_SetConfig>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e01b      	b.n	8004f68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fe0f 	bl	8005b84 <UART_CheckIdleState>
 8004f66:	4603      	mov	r3, r0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b092      	sub	sp, #72	@ 0x48
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4bbe      	ldr	r3, [pc, #760]	@ (8005298 <UART_SetConfig+0x328>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4ab3      	ldr	r2, [pc, #716]	@ (800529c <UART_SetConfig+0x32c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	4baf      	ldr	r3, [pc, #700]	@ (80052a0 <UART_SetConfig+0x330>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fec:	430b      	orrs	r3, r1
 8004fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	f023 010f 	bic.w	r1, r3, #15
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4aa6      	ldr	r2, [pc, #664]	@ (80052a4 <UART_SetConfig+0x334>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d177      	bne.n	8005100 <UART_SetConfig+0x190>
 8005010:	4ba5      	ldr	r3, [pc, #660]	@ (80052a8 <UART_SetConfig+0x338>)
 8005012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005018:	2b28      	cmp	r3, #40	@ 0x28
 800501a:	d86d      	bhi.n	80050f8 <UART_SetConfig+0x188>
 800501c:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <UART_SetConfig+0xb4>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	080050c9 	.word	0x080050c9
 8005028:	080050f9 	.word	0x080050f9
 800502c:	080050f9 	.word	0x080050f9
 8005030:	080050f9 	.word	0x080050f9
 8005034:	080050f9 	.word	0x080050f9
 8005038:	080050f9 	.word	0x080050f9
 800503c:	080050f9 	.word	0x080050f9
 8005040:	080050f9 	.word	0x080050f9
 8005044:	080050d1 	.word	0x080050d1
 8005048:	080050f9 	.word	0x080050f9
 800504c:	080050f9 	.word	0x080050f9
 8005050:	080050f9 	.word	0x080050f9
 8005054:	080050f9 	.word	0x080050f9
 8005058:	080050f9 	.word	0x080050f9
 800505c:	080050f9 	.word	0x080050f9
 8005060:	080050f9 	.word	0x080050f9
 8005064:	080050d9 	.word	0x080050d9
 8005068:	080050f9 	.word	0x080050f9
 800506c:	080050f9 	.word	0x080050f9
 8005070:	080050f9 	.word	0x080050f9
 8005074:	080050f9 	.word	0x080050f9
 8005078:	080050f9 	.word	0x080050f9
 800507c:	080050f9 	.word	0x080050f9
 8005080:	080050f9 	.word	0x080050f9
 8005084:	080050e1 	.word	0x080050e1
 8005088:	080050f9 	.word	0x080050f9
 800508c:	080050f9 	.word	0x080050f9
 8005090:	080050f9 	.word	0x080050f9
 8005094:	080050f9 	.word	0x080050f9
 8005098:	080050f9 	.word	0x080050f9
 800509c:	080050f9 	.word	0x080050f9
 80050a0:	080050f9 	.word	0x080050f9
 80050a4:	080050e9 	.word	0x080050e9
 80050a8:	080050f9 	.word	0x080050f9
 80050ac:	080050f9 	.word	0x080050f9
 80050b0:	080050f9 	.word	0x080050f9
 80050b4:	080050f9 	.word	0x080050f9
 80050b8:	080050f9 	.word	0x080050f9
 80050bc:	080050f9 	.word	0x080050f9
 80050c0:	080050f9 	.word	0x080050f9
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e222      	b.n	8005516 <UART_SetConfig+0x5a6>
 80050d0:	2304      	movs	r3, #4
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e21e      	b.n	8005516 <UART_SetConfig+0x5a6>
 80050d8:	2308      	movs	r3, #8
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e21a      	b.n	8005516 <UART_SetConfig+0x5a6>
 80050e0:	2310      	movs	r3, #16
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e216      	b.n	8005516 <UART_SetConfig+0x5a6>
 80050e8:	2320      	movs	r3, #32
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e212      	b.n	8005516 <UART_SetConfig+0x5a6>
 80050f0:	2340      	movs	r3, #64	@ 0x40
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e20e      	b.n	8005516 <UART_SetConfig+0x5a6>
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e20a      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a69      	ldr	r2, [pc, #420]	@ (80052ac <UART_SetConfig+0x33c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d130      	bne.n	800516c <UART_SetConfig+0x1fc>
 800510a:	4b67      	ldr	r3, [pc, #412]	@ (80052a8 <UART_SetConfig+0x338>)
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b05      	cmp	r3, #5
 8005114:	d826      	bhi.n	8005164 <UART_SetConfig+0x1f4>
 8005116:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <UART_SetConfig+0x1ac>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005135 	.word	0x08005135
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005145 	.word	0x08005145
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513a:	e1ec      	b.n	8005516 <UART_SetConfig+0x5a6>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e1e8      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e1e4      	b.n	8005516 <UART_SetConfig+0x5a6>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005152:	e1e0      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005154:	2320      	movs	r3, #32
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e1dc      	b.n	8005516 <UART_SetConfig+0x5a6>
 800515c:	2340      	movs	r3, #64	@ 0x40
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005162:	e1d8      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e1d4      	b.n	8005516 <UART_SetConfig+0x5a6>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a4f      	ldr	r2, [pc, #316]	@ (80052b0 <UART_SetConfig+0x340>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d130      	bne.n	80051d8 <UART_SetConfig+0x268>
 8005176:	4b4c      	ldr	r3, [pc, #304]	@ (80052a8 <UART_SetConfig+0x338>)
 8005178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	2b05      	cmp	r3, #5
 8005180:	d826      	bhi.n	80051d0 <UART_SetConfig+0x260>
 8005182:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <UART_SetConfig+0x218>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051a1 	.word	0x080051a1
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051b1 	.word	0x080051b1
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e1b6      	b.n	8005516 <UART_SetConfig+0x5a6>
 80051a8:	2304      	movs	r3, #4
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e1b2      	b.n	8005516 <UART_SetConfig+0x5a6>
 80051b0:	2308      	movs	r3, #8
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e1ae      	b.n	8005516 <UART_SetConfig+0x5a6>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e1aa      	b.n	8005516 <UART_SetConfig+0x5a6>
 80051c0:	2320      	movs	r3, #32
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e1a6      	b.n	8005516 <UART_SetConfig+0x5a6>
 80051c8:	2340      	movs	r3, #64	@ 0x40
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ce:	e1a2      	b.n	8005516 <UART_SetConfig+0x5a6>
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e19e      	b.n	8005516 <UART_SetConfig+0x5a6>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a35      	ldr	r2, [pc, #212]	@ (80052b4 <UART_SetConfig+0x344>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d130      	bne.n	8005244 <UART_SetConfig+0x2d4>
 80051e2:	4b31      	ldr	r3, [pc, #196]	@ (80052a8 <UART_SetConfig+0x338>)
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d826      	bhi.n	800523c <UART_SetConfig+0x2cc>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <UART_SetConfig+0x284>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	0800520d 	.word	0x0800520d
 80051f8:	08005215 	.word	0x08005215
 80051fc:	0800521d 	.word	0x0800521d
 8005200:	08005225 	.word	0x08005225
 8005204:	0800522d 	.word	0x0800522d
 8005208:	08005235 	.word	0x08005235
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005212:	e180      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e17c      	b.n	8005516 <UART_SetConfig+0x5a6>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e178      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e174      	b.n	8005516 <UART_SetConfig+0x5a6>
 800522c:	2320      	movs	r3, #32
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005232:	e170      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005234:	2340      	movs	r3, #64	@ 0x40
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523a:	e16c      	b.n	8005516 <UART_SetConfig+0x5a6>
 800523c:	2380      	movs	r3, #128	@ 0x80
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e168      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1b      	ldr	r2, [pc, #108]	@ (80052b8 <UART_SetConfig+0x348>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d142      	bne.n	80052d4 <UART_SetConfig+0x364>
 800524e:	4b16      	ldr	r3, [pc, #88]	@ (80052a8 <UART_SetConfig+0x338>)
 8005250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	2b05      	cmp	r3, #5
 8005258:	d838      	bhi.n	80052cc <UART_SetConfig+0x35c>
 800525a:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0x2f0>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005279 	.word	0x08005279
 8005264:	08005281 	.word	0x08005281
 8005268:	08005289 	.word	0x08005289
 800526c:	08005291 	.word	0x08005291
 8005270:	080052bd 	.word	0x080052bd
 8005274:	080052c5 	.word	0x080052c5
 8005278:	2300      	movs	r3, #0
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527e:	e14a      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005280:	2304      	movs	r3, #4
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005286:	e146      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005288:	2308      	movs	r3, #8
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e142      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005290:	2310      	movs	r3, #16
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005296:	e13e      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005298:	cfff69f3 	.word	0xcfff69f3
 800529c:	58000c00 	.word	0x58000c00
 80052a0:	11fff4ff 	.word	0x11fff4ff
 80052a4:	40011000 	.word	0x40011000
 80052a8:	58024400 	.word	0x58024400
 80052ac:	40004400 	.word	0x40004400
 80052b0:	40004800 	.word	0x40004800
 80052b4:	40004c00 	.word	0x40004c00
 80052b8:	40005000 	.word	0x40005000
 80052bc:	2320      	movs	r3, #32
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e128      	b.n	8005516 <UART_SetConfig+0x5a6>
 80052c4:	2340      	movs	r3, #64	@ 0x40
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e124      	b.n	8005516 <UART_SetConfig+0x5a6>
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e120      	b.n	8005516 <UART_SetConfig+0x5a6>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4acb      	ldr	r2, [pc, #812]	@ (8005608 <UART_SetConfig+0x698>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d176      	bne.n	80053cc <UART_SetConfig+0x45c>
 80052de:	4bcb      	ldr	r3, [pc, #812]	@ (800560c <UART_SetConfig+0x69c>)
 80052e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e6:	2b28      	cmp	r3, #40	@ 0x28
 80052e8:	d86c      	bhi.n	80053c4 <UART_SetConfig+0x454>
 80052ea:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <UART_SetConfig+0x380>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005395 	.word	0x08005395
 80052f4:	080053c5 	.word	0x080053c5
 80052f8:	080053c5 	.word	0x080053c5
 80052fc:	080053c5 	.word	0x080053c5
 8005300:	080053c5 	.word	0x080053c5
 8005304:	080053c5 	.word	0x080053c5
 8005308:	080053c5 	.word	0x080053c5
 800530c:	080053c5 	.word	0x080053c5
 8005310:	0800539d 	.word	0x0800539d
 8005314:	080053c5 	.word	0x080053c5
 8005318:	080053c5 	.word	0x080053c5
 800531c:	080053c5 	.word	0x080053c5
 8005320:	080053c5 	.word	0x080053c5
 8005324:	080053c5 	.word	0x080053c5
 8005328:	080053c5 	.word	0x080053c5
 800532c:	080053c5 	.word	0x080053c5
 8005330:	080053a5 	.word	0x080053a5
 8005334:	080053c5 	.word	0x080053c5
 8005338:	080053c5 	.word	0x080053c5
 800533c:	080053c5 	.word	0x080053c5
 8005340:	080053c5 	.word	0x080053c5
 8005344:	080053c5 	.word	0x080053c5
 8005348:	080053c5 	.word	0x080053c5
 800534c:	080053c5 	.word	0x080053c5
 8005350:	080053ad 	.word	0x080053ad
 8005354:	080053c5 	.word	0x080053c5
 8005358:	080053c5 	.word	0x080053c5
 800535c:	080053c5 	.word	0x080053c5
 8005360:	080053c5 	.word	0x080053c5
 8005364:	080053c5 	.word	0x080053c5
 8005368:	080053c5 	.word	0x080053c5
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053b5 	.word	0x080053b5
 8005374:	080053c5 	.word	0x080053c5
 8005378:	080053c5 	.word	0x080053c5
 800537c:	080053c5 	.word	0x080053c5
 8005380:	080053c5 	.word	0x080053c5
 8005384:	080053c5 	.word	0x080053c5
 8005388:	080053c5 	.word	0x080053c5
 800538c:	080053c5 	.word	0x080053c5
 8005390:	080053bd 	.word	0x080053bd
 8005394:	2301      	movs	r3, #1
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e0bc      	b.n	8005516 <UART_SetConfig+0x5a6>
 800539c:	2304      	movs	r3, #4
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e0b8      	b.n	8005516 <UART_SetConfig+0x5a6>
 80053a4:	2308      	movs	r3, #8
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e0b4      	b.n	8005516 <UART_SetConfig+0x5a6>
 80053ac:	2310      	movs	r3, #16
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e0b0      	b.n	8005516 <UART_SetConfig+0x5a6>
 80053b4:	2320      	movs	r3, #32
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e0ac      	b.n	8005516 <UART_SetConfig+0x5a6>
 80053bc:	2340      	movs	r3, #64	@ 0x40
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e0a8      	b.n	8005516 <UART_SetConfig+0x5a6>
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e0a4      	b.n	8005516 <UART_SetConfig+0x5a6>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a8f      	ldr	r2, [pc, #572]	@ (8005610 <UART_SetConfig+0x6a0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d130      	bne.n	8005438 <UART_SetConfig+0x4c8>
 80053d6:	4b8d      	ldr	r3, [pc, #564]	@ (800560c <UART_SetConfig+0x69c>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d826      	bhi.n	8005430 <UART_SetConfig+0x4c0>
 80053e2:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <UART_SetConfig+0x478>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	08005401 	.word	0x08005401
 80053ec:	08005409 	.word	0x08005409
 80053f0:	08005411 	.word	0x08005411
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005429 	.word	0x08005429
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e086      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005408:	2304      	movs	r3, #4
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e082      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005410:	2308      	movs	r3, #8
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e07e      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005418:	2310      	movs	r3, #16
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e07a      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005420:	2320      	movs	r3, #32
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e076      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005428:	2340      	movs	r3, #64	@ 0x40
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542e:	e072      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005430:	2380      	movs	r3, #128	@ 0x80
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e06e      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a75      	ldr	r2, [pc, #468]	@ (8005614 <UART_SetConfig+0x6a4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d130      	bne.n	80054a4 <UART_SetConfig+0x534>
 8005442:	4b72      	ldr	r3, [pc, #456]	@ (800560c <UART_SetConfig+0x69c>)
 8005444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b05      	cmp	r3, #5
 800544c:	d826      	bhi.n	800549c <UART_SetConfig+0x52c>
 800544e:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <UART_SetConfig+0x4e4>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	0800546d 	.word	0x0800546d
 8005458:	08005475 	.word	0x08005475
 800545c:	0800547d 	.word	0x0800547d
 8005460:	08005485 	.word	0x08005485
 8005464:	0800548d 	.word	0x0800548d
 8005468:	08005495 	.word	0x08005495
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e050      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e04c      	b.n	8005516 <UART_SetConfig+0x5a6>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e048      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e044      	b.n	8005516 <UART_SetConfig+0x5a6>
 800548c:	2320      	movs	r3, #32
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e040      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005494:	2340      	movs	r3, #64	@ 0x40
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e03c      	b.n	8005516 <UART_SetConfig+0x5a6>
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e038      	b.n	8005516 <UART_SetConfig+0x5a6>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a5b      	ldr	r2, [pc, #364]	@ (8005618 <UART_SetConfig+0x6a8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d130      	bne.n	8005510 <UART_SetConfig+0x5a0>
 80054ae:	4b57      	ldr	r3, [pc, #348]	@ (800560c <UART_SetConfig+0x69c>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d826      	bhi.n	8005508 <UART_SetConfig+0x598>
 80054ba:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <UART_SetConfig+0x550>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054d9 	.word	0x080054d9
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	080054e9 	.word	0x080054e9
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	08005501 	.word	0x08005501
 80054d8:	2302      	movs	r3, #2
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054de:	e01a      	b.n	8005516 <UART_SetConfig+0x5a6>
 80054e0:	2304      	movs	r3, #4
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e6:	e016      	b.n	8005516 <UART_SetConfig+0x5a6>
 80054e8:	2308      	movs	r3, #8
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ee:	e012      	b.n	8005516 <UART_SetConfig+0x5a6>
 80054f0:	2310      	movs	r3, #16
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e00e      	b.n	8005516 <UART_SetConfig+0x5a6>
 80054f8:	2320      	movs	r3, #32
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e00a      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005500:	2340      	movs	r3, #64	@ 0x40
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005506:	e006      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005508:	2380      	movs	r3, #128	@ 0x80
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e002      	b.n	8005516 <UART_SetConfig+0x5a6>
 8005510:	2380      	movs	r3, #128	@ 0x80
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a3f      	ldr	r2, [pc, #252]	@ (8005618 <UART_SetConfig+0x6a8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	f040 80f8 	bne.w	8005712 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005522:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005526:	2b20      	cmp	r3, #32
 8005528:	dc46      	bgt.n	80055b8 <UART_SetConfig+0x648>
 800552a:	2b02      	cmp	r3, #2
 800552c:	f2c0 8082 	blt.w	8005634 <UART_SetConfig+0x6c4>
 8005530:	3b02      	subs	r3, #2
 8005532:	2b1e      	cmp	r3, #30
 8005534:	d87e      	bhi.n	8005634 <UART_SetConfig+0x6c4>
 8005536:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <UART_SetConfig+0x5cc>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	080055bf 	.word	0x080055bf
 8005540:	08005635 	.word	0x08005635
 8005544:	080055c7 	.word	0x080055c7
 8005548:	08005635 	.word	0x08005635
 800554c:	08005635 	.word	0x08005635
 8005550:	08005635 	.word	0x08005635
 8005554:	080055d7 	.word	0x080055d7
 8005558:	08005635 	.word	0x08005635
 800555c:	08005635 	.word	0x08005635
 8005560:	08005635 	.word	0x08005635
 8005564:	08005635 	.word	0x08005635
 8005568:	08005635 	.word	0x08005635
 800556c:	08005635 	.word	0x08005635
 8005570:	08005635 	.word	0x08005635
 8005574:	080055e7 	.word	0x080055e7
 8005578:	08005635 	.word	0x08005635
 800557c:	08005635 	.word	0x08005635
 8005580:	08005635 	.word	0x08005635
 8005584:	08005635 	.word	0x08005635
 8005588:	08005635 	.word	0x08005635
 800558c:	08005635 	.word	0x08005635
 8005590:	08005635 	.word	0x08005635
 8005594:	08005635 	.word	0x08005635
 8005598:	08005635 	.word	0x08005635
 800559c:	08005635 	.word	0x08005635
 80055a0:	08005635 	.word	0x08005635
 80055a4:	08005635 	.word	0x08005635
 80055a8:	08005635 	.word	0x08005635
 80055ac:	08005635 	.word	0x08005635
 80055b0:	08005635 	.word	0x08005635
 80055b4:	08005627 	.word	0x08005627
 80055b8:	2b40      	cmp	r3, #64	@ 0x40
 80055ba:	d037      	beq.n	800562c <UART_SetConfig+0x6bc>
 80055bc:	e03a      	b.n	8005634 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055be:	f7ff f865 	bl	800468c <HAL_RCCEx_GetD3PCLK1Freq>
 80055c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055c4:	e03c      	b.n	8005640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff f874 	bl	80046b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055d4:	e034      	b.n	8005640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055d6:	f107 0318 	add.w	r3, r7, #24
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff f9c0 	bl	8004960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055e4:	e02c      	b.n	8005640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e6:	4b09      	ldr	r3, [pc, #36]	@ (800560c <UART_SetConfig+0x69c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d016      	beq.n	8005620 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055f2:	4b06      	ldr	r3, [pc, #24]	@ (800560c <UART_SetConfig+0x69c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	08db      	lsrs	r3, r3, #3
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	4a07      	ldr	r2, [pc, #28]	@ (800561c <UART_SetConfig+0x6ac>)
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005604:	e01c      	b.n	8005640 <UART_SetConfig+0x6d0>
 8005606:	bf00      	nop
 8005608:	40011400 	.word	0x40011400
 800560c:	58024400 	.word	0x58024400
 8005610:	40007800 	.word	0x40007800
 8005614:	40007c00 	.word	0x40007c00
 8005618:	58000c00 	.word	0x58000c00
 800561c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005620:	4b9d      	ldr	r3, [pc, #628]	@ (8005898 <UART_SetConfig+0x928>)
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005624:	e00c      	b.n	8005640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005626:	4b9d      	ldr	r3, [pc, #628]	@ (800589c <UART_SetConfig+0x92c>)
 8005628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800562a:	e009      	b.n	8005640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005632:	e005      	b.n	8005640 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800563e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 81de 	beq.w	8005a04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564c:	4a94      	ldr	r2, [pc, #592]	@ (80058a0 <UART_SetConfig+0x930>)
 800564e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005652:	461a      	mov	r2, r3
 8005654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005656:	fbb3 f3f2 	udiv	r3, r3, r2
 800565a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4413      	add	r3, r2
 8005666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005668:	429a      	cmp	r2, r3
 800566a:	d305      	bcc.n	8005678 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005674:	429a      	cmp	r2, r3
 8005676:	d903      	bls.n	8005680 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800567e:	e1c1      	b.n	8005a04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005682:	2200      	movs	r2, #0
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	60fa      	str	r2, [r7, #12]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	4a84      	ldr	r2, [pc, #528]	@ (80058a0 <UART_SetConfig+0x930>)
 800568e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005692:	b29b      	uxth	r3, r3
 8005694:	2200      	movs	r2, #0
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056a2:	f7fa fe19 	bl	80002d8 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	020b      	lsls	r3, r1, #8
 80056b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056bc:	0202      	lsls	r2, r0, #8
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	6849      	ldr	r1, [r1, #4]
 80056c2:	0849      	lsrs	r1, r1, #1
 80056c4:	2000      	movs	r0, #0
 80056c6:	460c      	mov	r4, r1
 80056c8:	4605      	mov	r5, r0
 80056ca:	eb12 0804 	adds.w	r8, r2, r4
 80056ce:	eb43 0905 	adc.w	r9, r3, r5
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	469a      	mov	sl, r3
 80056da:	4693      	mov	fp, r2
 80056dc:	4652      	mov	r2, sl
 80056de:	465b      	mov	r3, fp
 80056e0:	4640      	mov	r0, r8
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fa fdf8 	bl	80002d8 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4613      	mov	r3, r2
 80056ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056f6:	d308      	bcc.n	800570a <UART_SetConfig+0x79a>
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fe:	d204      	bcs.n	800570a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005706:	60da      	str	r2, [r3, #12]
 8005708:	e17c      	b.n	8005a04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005710:	e178      	b.n	8005a04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571a:	f040 80c5 	bne.w	80058a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800571e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005722:	2b20      	cmp	r3, #32
 8005724:	dc48      	bgt.n	80057b8 <UART_SetConfig+0x848>
 8005726:	2b00      	cmp	r3, #0
 8005728:	db7b      	blt.n	8005822 <UART_SetConfig+0x8b2>
 800572a:	2b20      	cmp	r3, #32
 800572c:	d879      	bhi.n	8005822 <UART_SetConfig+0x8b2>
 800572e:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <UART_SetConfig+0x7c4>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	080057bf 	.word	0x080057bf
 8005738:	080057c7 	.word	0x080057c7
 800573c:	08005823 	.word	0x08005823
 8005740:	08005823 	.word	0x08005823
 8005744:	080057cf 	.word	0x080057cf
 8005748:	08005823 	.word	0x08005823
 800574c:	08005823 	.word	0x08005823
 8005750:	08005823 	.word	0x08005823
 8005754:	080057df 	.word	0x080057df
 8005758:	08005823 	.word	0x08005823
 800575c:	08005823 	.word	0x08005823
 8005760:	08005823 	.word	0x08005823
 8005764:	08005823 	.word	0x08005823
 8005768:	08005823 	.word	0x08005823
 800576c:	08005823 	.word	0x08005823
 8005770:	08005823 	.word	0x08005823
 8005774:	080057ef 	.word	0x080057ef
 8005778:	08005823 	.word	0x08005823
 800577c:	08005823 	.word	0x08005823
 8005780:	08005823 	.word	0x08005823
 8005784:	08005823 	.word	0x08005823
 8005788:	08005823 	.word	0x08005823
 800578c:	08005823 	.word	0x08005823
 8005790:	08005823 	.word	0x08005823
 8005794:	08005823 	.word	0x08005823
 8005798:	08005823 	.word	0x08005823
 800579c:	08005823 	.word	0x08005823
 80057a0:	08005823 	.word	0x08005823
 80057a4:	08005823 	.word	0x08005823
 80057a8:	08005823 	.word	0x08005823
 80057ac:	08005823 	.word	0x08005823
 80057b0:	08005823 	.word	0x08005823
 80057b4:	08005815 	.word	0x08005815
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	d02e      	beq.n	800581a <UART_SetConfig+0x8aa>
 80057bc:	e031      	b.n	8005822 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057be:	f7fd fd2f 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 80057c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057c4:	e033      	b.n	800582e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c6:	f7fd fd41 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 80057ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057cc:	e02f      	b.n	800582e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe ff70 	bl	80046b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057dc:	e027      	b.n	800582e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057de:	f107 0318 	add.w	r3, r7, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff f8bc 	bl	8004960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ec:	e01f      	b.n	800582e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ee:	4b2d      	ldr	r3, [pc, #180]	@ (80058a4 <UART_SetConfig+0x934>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057fa:	4b2a      	ldr	r3, [pc, #168]	@ (80058a4 <UART_SetConfig+0x934>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	4a24      	ldr	r2, [pc, #144]	@ (8005898 <UART_SetConfig+0x928>)
 8005806:	fa22 f303 	lsr.w	r3, r2, r3
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800580c:	e00f      	b.n	800582e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800580e:	4b22      	ldr	r3, [pc, #136]	@ (8005898 <UART_SetConfig+0x928>)
 8005810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005812:	e00c      	b.n	800582e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005814:	4b21      	ldr	r3, [pc, #132]	@ (800589c <UART_SetConfig+0x92c>)
 8005816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005818:	e009      	b.n	800582e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005820:	e005      	b.n	800582e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800582c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800582e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80e7 	beq.w	8005a04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	4a19      	ldr	r2, [pc, #100]	@ (80058a0 <UART_SetConfig+0x930>)
 800583c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005840:	461a      	mov	r2, r3
 8005842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005844:	fbb3 f3f2 	udiv	r3, r3, r2
 8005848:	005a      	lsls	r2, r3, #1
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	441a      	add	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	2b0f      	cmp	r3, #15
 8005860:	d916      	bls.n	8005890 <UART_SetConfig+0x920>
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005868:	d212      	bcs.n	8005890 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	b29b      	uxth	r3, r3
 800586e:	f023 030f 	bic.w	r3, r3, #15
 8005872:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	b29b      	uxth	r3, r3
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	b29a      	uxth	r2, r3
 8005880:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005882:	4313      	orrs	r3, r2
 8005884:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e0b9      	b.n	8005a04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005896:	e0b5      	b.n	8005a04 <UART_SetConfig+0xa94>
 8005898:	03d09000 	.word	0x03d09000
 800589c:	003d0900 	.word	0x003d0900
 80058a0:	08006718 	.word	0x08006718
 80058a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80058a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	dc49      	bgt.n	8005944 <UART_SetConfig+0x9d4>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	db7c      	blt.n	80059ae <UART_SetConfig+0xa3e>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d87a      	bhi.n	80059ae <UART_SetConfig+0xa3e>
 80058b8:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <UART_SetConfig+0x950>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	0800594b 	.word	0x0800594b
 80058c4:	08005953 	.word	0x08005953
 80058c8:	080059af 	.word	0x080059af
 80058cc:	080059af 	.word	0x080059af
 80058d0:	0800595b 	.word	0x0800595b
 80058d4:	080059af 	.word	0x080059af
 80058d8:	080059af 	.word	0x080059af
 80058dc:	080059af 	.word	0x080059af
 80058e0:	0800596b 	.word	0x0800596b
 80058e4:	080059af 	.word	0x080059af
 80058e8:	080059af 	.word	0x080059af
 80058ec:	080059af 	.word	0x080059af
 80058f0:	080059af 	.word	0x080059af
 80058f4:	080059af 	.word	0x080059af
 80058f8:	080059af 	.word	0x080059af
 80058fc:	080059af 	.word	0x080059af
 8005900:	0800597b 	.word	0x0800597b
 8005904:	080059af 	.word	0x080059af
 8005908:	080059af 	.word	0x080059af
 800590c:	080059af 	.word	0x080059af
 8005910:	080059af 	.word	0x080059af
 8005914:	080059af 	.word	0x080059af
 8005918:	080059af 	.word	0x080059af
 800591c:	080059af 	.word	0x080059af
 8005920:	080059af 	.word	0x080059af
 8005924:	080059af 	.word	0x080059af
 8005928:	080059af 	.word	0x080059af
 800592c:	080059af 	.word	0x080059af
 8005930:	080059af 	.word	0x080059af
 8005934:	080059af 	.word	0x080059af
 8005938:	080059af 	.word	0x080059af
 800593c:	080059af 	.word	0x080059af
 8005940:	080059a1 	.word	0x080059a1
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d02e      	beq.n	80059a6 <UART_SetConfig+0xa36>
 8005948:	e031      	b.n	80059ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594a:	f7fd fc69 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 800594e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005950:	e033      	b.n	80059ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005952:	f7fd fc7b 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 8005956:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005958:	e02f      	b.n	80059ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe feaa 	bl	80046b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005968:	e027      	b.n	80059ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800596a:	f107 0318 	add.w	r3, r7, #24
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fff6 	bl	8004960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005978:	e01f      	b.n	80059ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a30 <UART_SetConfig+0xac0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005986:	4b2a      	ldr	r3, [pc, #168]	@ (8005a30 <UART_SetConfig+0xac0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	4a28      	ldr	r2, [pc, #160]	@ (8005a34 <UART_SetConfig+0xac4>)
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005998:	e00f      	b.n	80059ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800599a:	4b26      	ldr	r3, [pc, #152]	@ (8005a34 <UART_SetConfig+0xac4>)
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800599e:	e00c      	b.n	80059ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059a0:	4b25      	ldr	r3, [pc, #148]	@ (8005a38 <UART_SetConfig+0xac8>)
 80059a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a4:	e009      	b.n	80059ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ac:	e005      	b.n	80059ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059b8:	bf00      	nop
    }

    if (pclk != 0U)
 80059ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d021      	beq.n	8005a04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a3c <UART_SetConfig+0xacc>)
 80059c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ca:	461a      	mov	r2, r3
 80059cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	441a      	add	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	2b0f      	cmp	r3, #15
 80059e8:	d909      	bls.n	80059fe <UART_SetConfig+0xa8e>
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f0:	d205      	bcs.n	80059fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60da      	str	r2, [r3, #12]
 80059fc:	e002      	b.n	8005a04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2200      	movs	r2, #0
 8005a18:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a20:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3748      	adds	r7, #72	@ 0x48
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a2e:	bf00      	nop
 8005a30:	58024400 	.word	0x58024400
 8005a34:	03d09000 	.word	0x03d09000
 8005a38:	003d0900 	.word	0x003d0900
 8005a3c:	08006718 	.word	0x08006718

08005a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01a      	beq.n	8005b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3e:	d10a      	bne.n	8005b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b098      	sub	sp, #96	@ 0x60
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b94:	f7fb faac 	bl	80010f0 <HAL_GetTick>
 8005b98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d12f      	bne.n	8005c08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f88e 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d022      	beq.n	8005c08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e063      	b.n	8005cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d149      	bne.n	8005caa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f857 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d03c      	beq.n	8005caa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e6      	bne.n	8005c30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c82:	61fa      	str	r2, [r7, #28]
 8005c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	69b9      	ldr	r1, [r7, #24]
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e012      	b.n	8005cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3758      	adds	r7, #88	@ 0x58
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce8:	e04f      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d04b      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fb f9fd 	bl	80010f0 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e04e      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d037      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b80      	cmp	r3, #128	@ 0x80
 8005d1e:	d034      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b40      	cmp	r3, #64	@ 0x40
 8005d24:	d031      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d110      	bne.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f839 	bl	8005db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2208      	movs	r2, #8
 8005d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e029      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d64:	d111      	bne.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f81f 	bl	8005db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e00f      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d0a0      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b095      	sub	sp, #84	@ 0x54
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dda:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ddc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005de0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e6      	bne.n	8005dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	4b1e      	ldr	r3, [pc, #120]	@ (8005e7c <UART_EndRxTransfer+0xc8>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d118      	bne.n	8005e5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f023 0310 	bic.w	r3, r3, #16
 8005e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6979      	ldr	r1, [r7, #20]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	613b      	str	r3, [r7, #16]
   return(result);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e6      	bne.n	8005e2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e70:	bf00      	nop
 8005e72:	3754      	adds	r7, #84	@ 0x54
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	effffffe 	.word	0xeffffffe

08005e80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e027      	b.n	8005ee6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2224      	movs	r2, #36	@ 0x24
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ec4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e02d      	b.n	8005f66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2224      	movs	r2, #36	@ 0x24
 8005f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f850 	bl	8005fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e02d      	b.n	8005fe2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2224      	movs	r2, #36	@ 0x24
 8005f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0201 	bic.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f812 	bl	8005fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d108      	bne.n	800600e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800600c:	e031      	b.n	8006072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800600e:	2310      	movs	r3, #16
 8006010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006012:	2310      	movs	r3, #16
 8006014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	0e5b      	lsrs	r3, r3, #25
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	0f5b      	lsrs	r3, r3, #29
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	7b3a      	ldrb	r2, [r7, #12]
 800603a:	4911      	ldr	r1, [pc, #68]	@ (8006080 <UARTEx_SetNbDataToProcess+0x94>)
 800603c:	5c8a      	ldrb	r2, [r1, r2]
 800603e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006042:	7b3a      	ldrb	r2, [r7, #12]
 8006044:	490f      	ldr	r1, [pc, #60]	@ (8006084 <UARTEx_SetNbDataToProcess+0x98>)
 8006046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006048:	fb93 f3f2 	sdiv	r3, r3, r2
 800604c:	b29a      	uxth	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	7b7a      	ldrb	r2, [r7, #13]
 8006058:	4909      	ldr	r1, [pc, #36]	@ (8006080 <UARTEx_SetNbDataToProcess+0x94>)
 800605a:	5c8a      	ldrb	r2, [r1, r2]
 800605c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006060:	7b7a      	ldrb	r2, [r7, #13]
 8006062:	4908      	ldr	r1, [pc, #32]	@ (8006084 <UARTEx_SetNbDataToProcess+0x98>)
 8006064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006066:	fb93 f3f2 	sdiv	r3, r3, r2
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	08006730 	.word	0x08006730
 8006084:	08006738 	.word	0x08006738

08006088 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006088:	b084      	sub	sp, #16
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	f107 001c 	add.w	r0, r7, #28
 8006096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800609a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d121      	bne.n	80060e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006164 <USB_CoreInit+0xdc>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 faaa 	bl	8006634 <USB_CoreReset>
 80060e0:	4603      	mov	r3, r0
 80060e2:	73fb      	strb	r3, [r7, #15]
 80060e4:	e01b      	b.n	800611e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fa9e 	bl	8006634 <USB_CoreReset>
 80060f8:	4603      	mov	r3, r0
 80060fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006110:	e005      	b.n	800611e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006116:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800611e:	7fbb      	ldrb	r3, [r7, #30]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d116      	bne.n	8006152 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006128:	b29a      	uxth	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006132:	4b0d      	ldr	r3, [pc, #52]	@ (8006168 <USB_CoreInit+0xe0>)
 8006134:	4313      	orrs	r3, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f043 0206 	orr.w	r2, r3, #6
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800615e:	b004      	add	sp, #16
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	ffbdffbf 	.word	0xffbdffbf
 8006168:	03ee0000 	.word	0x03ee0000

0800616c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f023 0201 	bic.w	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d115      	bne.n	80061dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061bc:	200a      	movs	r0, #10
 80061be:	f7fa ffa3 	bl	8001108 <HAL_Delay>
      ms += 10U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	330a      	adds	r3, #10
 80061c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fa25 	bl	8006618 <USB_GetMode>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d01e      	beq.n	8006212 <USB_SetCurrentMode+0x84>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80061d8:	d9f0      	bls.n	80061bc <USB_SetCurrentMode+0x2e>
 80061da:	e01a      	b.n	8006212 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d115      	bne.n	800620e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061ee:	200a      	movs	r0, #10
 80061f0:	f7fa ff8a 	bl	8001108 <HAL_Delay>
      ms += 10U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	330a      	adds	r3, #10
 80061f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa0c 	bl	8006618 <USB_GetMode>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <USB_SetCurrentMode+0x84>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2bc7      	cmp	r3, #199	@ 0xc7
 800620a:	d9f0      	bls.n	80061ee <USB_SetCurrentMode+0x60>
 800620c:	e001      	b.n	8006212 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e005      	b.n	800621e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2bc8      	cmp	r3, #200	@ 0xc8
 8006216:	d101      	bne.n	800621c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006228:	b084      	sub	sp, #16
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	e009      	b.n	800625c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3340      	adds	r3, #64	@ 0x40
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	2200      	movs	r2, #0
 8006254:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	3301      	adds	r3, #1
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b0e      	cmp	r3, #14
 8006260:	d9f2      	bls.n	8006248 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006262:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11c      	bne.n	80062a4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006278:	f043 0302 	orr.w	r3, r3, #2
 800627c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	e005      	b.n	80062b0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062b6:	461a      	mov	r2, r3
 80062b8:	2300      	movs	r3, #0
 80062ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062bc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d10d      	bne.n	80062e0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062cc:	2100      	movs	r1, #0
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f968 	bl	80065a4 <USB_SetDevSpeed>
 80062d4:	e008      	b.n	80062e8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062d6:	2101      	movs	r1, #1
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f963 	bl	80065a4 <USB_SetDevSpeed>
 80062de:	e003      	b.n	80062e8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062e0:	2103      	movs	r1, #3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f95e 	bl	80065a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062e8:	2110      	movs	r1, #16
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f8fa 	bl	80064e4 <USB_FlushTxFifo>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f924 	bl	8006548 <USB_FlushRxFifo>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006310:	461a      	mov	r2, r3
 8006312:	2300      	movs	r3, #0
 8006314:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	461a      	mov	r2, r3
 800631e:	2300      	movs	r3, #0
 8006320:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e043      	b.n	80063bc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800634a:	d118      	bne.n	800637e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e013      	b.n	8006390 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	e008      	b.n	8006390 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ae:	461a      	mov	r2, r3
 80063b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063c0:	461a      	mov	r2, r3
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d3b5      	bcc.n	8006334 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	e043      	b.n	8006456 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e4:	d118      	bne.n	8006418 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f8:	461a      	mov	r2, r3
 80063fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e013      	b.n	800642a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640e:	461a      	mov	r2, r3
 8006410:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e008      	b.n	800642a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006436:	461a      	mov	r2, r3
 8006438:	2300      	movs	r3, #0
 800643a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006448:	461a      	mov	r2, r3
 800644a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800644e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3301      	adds	r3, #1
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800645a:	461a      	mov	r2, r3
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4293      	cmp	r3, r2
 8006460:	d3b5      	bcc.n	80063ce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006474:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006482:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006484:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006488:	2b00      	cmp	r3, #0
 800648a:	d105      	bne.n	8006498 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f043 0210 	orr.w	r2, r3, #16
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	4b0f      	ldr	r3, [pc, #60]	@ (80064dc <USB_DevInit+0x2b4>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	f043 0208 	orr.w	r2, r3, #8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d105      	bne.n	80064cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <USB_DevInit+0x2b8>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064d8:	b004      	add	sp, #16
 80064da:	4770      	bx	lr
 80064dc:	803c3800 	.word	0x803c3800
 80064e0:	40000004 	.word	0x40000004

080064e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064fe:	d901      	bls.n	8006504 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e01b      	b.n	800653c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	daf2      	bge.n	80064f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	019b      	lsls	r3, r3, #6
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006528:	d901      	bls.n	800652e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e006      	b.n	800653c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b20      	cmp	r3, #32
 8006538:	d0f0      	beq.n	800651c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006560:	d901      	bls.n	8006566 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e018      	b.n	8006598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	daf2      	bge.n	8006554 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2210      	movs	r2, #16
 8006576:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006584:	d901      	bls.n	800658a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e006      	b.n	8006598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b10      	cmp	r3, #16
 8006594:	d0f0      	beq.n	8006578 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065f0:	f023 0303 	bic.w	r3, r3, #3
 80065f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0301 	and.w	r3, r3, #1
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3301      	adds	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800664c:	d901      	bls.n	8006652 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e01b      	b.n	800668a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	daf2      	bge.n	8006640 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f043 0201 	orr.w	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006676:	d901      	bls.n	800667c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e006      	b.n	800668a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	d0f0      	beq.n	800666a <USB_CoreReset+0x36>

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <memset>:
 8006696:	4402      	add	r2, r0
 8006698:	4603      	mov	r3, r0
 800669a:	4293      	cmp	r3, r2
 800669c:	d100      	bne.n	80066a0 <memset+0xa>
 800669e:	4770      	bx	lr
 80066a0:	f803 1b01 	strb.w	r1, [r3], #1
 80066a4:	e7f9      	b.n	800669a <memset+0x4>
	...

080066a8 <__libc_init_array>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4d0d      	ldr	r5, [pc, #52]	@ (80066e0 <__libc_init_array+0x38>)
 80066ac:	4c0d      	ldr	r4, [pc, #52]	@ (80066e4 <__libc_init_array+0x3c>)
 80066ae:	1b64      	subs	r4, r4, r5
 80066b0:	10a4      	asrs	r4, r4, #2
 80066b2:	2600      	movs	r6, #0
 80066b4:	42a6      	cmp	r6, r4
 80066b6:	d109      	bne.n	80066cc <__libc_init_array+0x24>
 80066b8:	4d0b      	ldr	r5, [pc, #44]	@ (80066e8 <__libc_init_array+0x40>)
 80066ba:	4c0c      	ldr	r4, [pc, #48]	@ (80066ec <__libc_init_array+0x44>)
 80066bc:	f000 f818 	bl	80066f0 <_init>
 80066c0:	1b64      	subs	r4, r4, r5
 80066c2:	10a4      	asrs	r4, r4, #2
 80066c4:	2600      	movs	r6, #0
 80066c6:	42a6      	cmp	r6, r4
 80066c8:	d105      	bne.n	80066d6 <__libc_init_array+0x2e>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d0:	4798      	blx	r3
 80066d2:	3601      	adds	r6, #1
 80066d4:	e7ee      	b.n	80066b4 <__libc_init_array+0xc>
 80066d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066da:	4798      	blx	r3
 80066dc:	3601      	adds	r6, #1
 80066de:	e7f2      	b.n	80066c6 <__libc_init_array+0x1e>
 80066e0:	08006748 	.word	0x08006748
 80066e4:	08006748 	.word	0x08006748
 80066e8:	08006748 	.word	0x08006748
 80066ec:	0800674c 	.word	0x0800674c

080066f0 <_init>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr

080066fc <_fini>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr
