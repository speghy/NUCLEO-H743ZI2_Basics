
USARTtxOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c70  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f50  08008f50  00018f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08008f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000010  08008f68  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000070  08008fc8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200000d0  08009028  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08009028  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d944  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026a5  00000000  00000000  0003da42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  000400e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  00040d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008fa9  00000000  00000000  00041960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005f06  00000000  00000000  0004a909  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005080f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000346c  00000000  00000000  0005088c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000d0 	.word	0x200000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008ef0 	.word	0x08008ef0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000d4 	.word	0x200000d4
 80002d4:	08008ef0 	.word	0x08008ef0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fc89 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f825 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f945 	bl	8000884 <MX_GPIO_Init>
  MX_ETH_Init();
 80005fa:	f000 f88b 	bl	8000714 <MX_ETH_Init>
  MX_DMA_Init();
 80005fe:	f000 f921 	bl	8000844 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f8d3 	bl	80007ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t str[8];
  for(int i =0;i<8;i++)
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e009      	b.n	8000620 <main+0x38>
    {
  	  str[i]=i;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	b2d9      	uxtb	r1, r3
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	4413      	add	r3, r2
 8000616:	460a      	mov	r2, r1
 8000618:	701a      	strb	r2, [r3, #0]
  for(int i =0;i<8;i++)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b07      	cmp	r3, #7
 8000624:	ddf2      	ble.n	800060c <main+0x24>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit_DMA(&huart3, str, sizeof(str)-1);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2207      	movs	r2, #7
 800062a:	4619      	mov	r1, r3
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <main+0x54>)
 800062e:	f006 fdb7 	bl	80071a0 <HAL_UART_Transmit_DMA>
	  HAL_Delay(100);
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f000 fcf8 	bl	8001028 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart3, str, sizeof(str)-1);
 8000638:	e7f5      	b.n	8000626 <main+0x3e>
 800063a:	bf00      	nop
 800063c:	200000f4 	.word	0x200000f4

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f008 fc46 	bl	8008ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f008 fc40 	bl	8008ee0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000660:	2002      	movs	r0, #2
 8000662:	f004 fa53 	bl	8004b0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4a28      	ldr	r2, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4a23      	ldr	r2, [pc, #140]	; (8000710 <SystemClock_Config+0xd0>)
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xd0>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069c:	bf00      	nop
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <SystemClock_Config+0xd0>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006aa:	d1f8      	bne.n	800069e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fa5d 	bl	8004b80 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006cc:	f000 f9c8 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	233f      	movs	r3, #63	; 0x3f
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2101      	movs	r1, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fe6f 	bl	80053d8 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000700:	f000 f9ae 	bl	8000a60 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3770      	adds	r7, #112	; 0x70
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	58000400 	.word	0x58000400
 8000710:	58024800 	.word	0x58024800

08000714 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ETH_Init+0x80>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <MX_ETH_Init+0x84>)
 800071c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_ETH_Init+0x88>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ETH_Init+0x88>)
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_ETH_Init+0x88>)
 800072c:	22e1      	movs	r2, #225	; 0xe1
 800072e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_ETH_Init+0x88>)
 8000732:	2200      	movs	r2, #0
 8000734:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ETH_Init+0x88>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_ETH_Init+0x88>)
 800073e:	2200      	movs	r2, #0
 8000740:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ETH_Init+0x80>)
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_ETH_Init+0x88>)
 8000746:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_ETH_Init+0x80>)
 800074a:	2201      	movs	r2, #1
 800074c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ETH_Init+0x80>)
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_ETH_Init+0x8c>)
 8000752:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ETH_Init+0x80>)
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <MX_ETH_Init+0x90>)
 8000758:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_ETH_Init+0x80>)
 800075c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000760:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_ETH_Init+0x80>)
 8000764:	f003 fbea 	bl	8003f3c <HAL_ETH_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800076e:	f000 f977 	bl	8000a60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000772:	2238      	movs	r2, #56	; 0x38
 8000774:	2100      	movs	r1, #0
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_ETH_Init+0x94>)
 8000778:	f008 fbb2 	bl	8008ee0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_ETH_Init+0x94>)
 800077e:	2221      	movs	r2, #33	; 0x21
 8000780:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_ETH_Init+0x94>)
 8000784:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000788:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_ETH_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001fc 	.word	0x200001fc
 8000798:	40028000 	.word	0x40028000
 800079c:	200000ec 	.word	0x200000ec
 80007a0:	20000070 	.word	0x20000070
 80007a4:	20000010 	.word	0x20000010
 80007a8:	200002ac 	.word	0x200002ac

080007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_USART3_UART_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007f6:	f006 fc83 	bl	8007100 <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 f92e 	bl	8000a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_USART3_UART_Init+0x90>)
 8000808:	f008 fa51 	bl	8008cae <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f925 	bl	8000a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_USART3_UART_Init+0x90>)
 800081a:	f008 fa86 	bl	8008d2a <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f91c 	bl	8000a60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_USART3_UART_Init+0x90>)
 800082a:	f008 fa07 	bl	8008c3c <HAL_UARTEx_DisableFifoMode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f914 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000f4 	.word	0x200000f4
 8000840:	40004800 	.word	0x40004800

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800084a:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <MX_DMA_Init+0x3c>)
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_DMA_Init+0x3c>)
 800084e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_DMA_Init+0x3c>)
 800085c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	200b      	movs	r0, #11
 800086e:	f000 fcf6 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000872:	200b      	movs	r0, #11
 8000874:	f000 fd0d 	bl	8001292 <HAL_NVIC_EnableIRQ>

}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	58024400 	.word	0x58024400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4a6a      	ldr	r2, [pc, #424]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 800089c:	4b69      	ldr	r3, [pc, #420]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008aa:	4b66      	ldr	r3, [pc, #408]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b8:	4a62      	ldr	r2, [pc, #392]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008ba:	4b62      	ldr	r3, [pc, #392]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c8:	4b5e      	ldr	r3, [pc, #376]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4a5b      	ldr	r2, [pc, #364]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008d8:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e6:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4a53      	ldr	r2, [pc, #332]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008f6:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000904:	4b4f      	ldr	r3, [pc, #316]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4a4c      	ldr	r2, [pc, #304]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000914:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000922:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000930:	4a44      	ldr	r2, [pc, #272]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000932:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000940:	4b40      	ldr	r3, [pc, #256]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094e:	4a3d      	ldr	r2, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000950:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <MX_GPIO_Init+0x1c0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000972:	4835      	ldr	r0, [pc, #212]	; (8000a48 <MX_GPIO_Init+0x1c4>)
 8000974:	f004 f8b0 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_GPIO_Init+0x1c8>)
 8000980:	f004 f8aa 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2102      	movs	r1, #2
 8000988:	4831      	ldr	r0, [pc, #196]	; (8000a50 <MX_GPIO_Init+0x1cc>)
 800098a:	f004 f8a5 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	482c      	ldr	r0, [pc, #176]	; (8000a54 <MX_GPIO_Init+0x1d0>)
 80009a4:	f003 fee8 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009a8:	f244 0301 	movw	r3, #16385	; 0x4001
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x1c4>)
 80009c2:	f003 fed9 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	481b      	ldr	r0, [pc, #108]	; (8000a4c <MX_GPIO_Init+0x1c8>)
 80009e0:	f003 feca 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4817      	ldr	r0, [pc, #92]	; (8000a58 <MX_GPIO_Init+0x1d4>)
 80009fa:	f003 febd 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009fe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a10:	230a      	movs	r3, #10
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4810      	ldr	r0, [pc, #64]	; (8000a5c <MX_GPIO_Init+0x1d8>)
 8000a1c:	f003 feac 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x1cc>)
 8000a38:	f003 fe9e 	bl	8004778 <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	58024400 	.word	0x58024400
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	58020c00 	.word	0x58020c00
 8000a50:	58021000 	.word	0x58021000
 8000a54:	58020800 	.word	0x58020800
 8000a58:	58021800 	.word	0x58021800
 8000a5c:	58020000 	.word	0x58020000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <Error_Handler+0x6>

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_MspInit+0x30>)
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x30>)
 8000a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x30>)
 8000a80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	58024400 	.word	0x58024400

08000a9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a59      	ldr	r2, [pc, #356]	; (8000c20 <HAL_ETH_MspInit+0x184>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	f040 80ab 	bne.w	8000c16 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ac0:	4a58      	ldr	r2, [pc, #352]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000ac2:	4b58      	ldr	r3, [pc, #352]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000ac4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000acc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ad0:	4b54      	ldr	r3, [pc, #336]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ade:	4a51      	ldr	r2, [pc, #324]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000ae0:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000ae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000afc:	4a49      	ldr	r2, [pc, #292]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000afe:	4b49      	ldr	r3, [pc, #292]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b0c:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4a42      	ldr	r2, [pc, #264]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b1c:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4a3a      	ldr	r2, [pc, #232]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b3a:	4b3a      	ldr	r3, [pc, #232]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b74:	4a2b      	ldr	r2, [pc, #172]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b76:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <HAL_ETH_MspInit+0x188>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b92:	2332      	movs	r3, #50	; 0x32
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	481e      	ldr	r0, [pc, #120]	; (8000c28 <HAL_ETH_MspInit+0x18c>)
 8000bae:	f003 fde3 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bb2:	2386      	movs	r3, #134	; 0x86
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc2:	230b      	movs	r3, #11
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4817      	ldr	r0, [pc, #92]	; (8000c2c <HAL_ETH_MspInit+0x190>)
 8000bce:	f003 fdd3 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_ETH_MspInit+0x194>)
 8000bf0:	f003 fdc2 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bf4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	230b      	movs	r3, #11
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <HAL_ETH_MspInit+0x198>)
 8000c12:	f003 fdb1 	bl	8004778 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3738      	adds	r7, #56	; 0x38
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40028000 	.word	0x40028000
 8000c24:	58024400 	.word	0x58024400
 8000c28:	58020800 	.word	0x58020800
 8000c2c:	58020000 	.word	0x58020000
 8000c30:	58020400 	.word	0x58020400
 8000c34:	58021800 	.word	0x58021800

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0b8      	sub	sp, #224	; 0xe0
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	22bc      	movs	r2, #188	; 0xbc
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f008 f941 	bl	8008ee0 <memset>
  if(huart->Instance==USART3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <HAL_UART_MspInit+0x12c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d178      	bne.n	8000d5a <HAL_UART_MspInit+0x122>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 ff32 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c82:	f7ff feed 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c86:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <HAL_UART_MspInit+0x130>)
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <HAL_UART_MspInit+0x130>)
 8000c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_UART_MspInit+0x130>)
 8000c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca4:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <HAL_UART_MspInit+0x130>)
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <HAL_UART_MspInit+0x130>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <HAL_UART_MspInit+0x130>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4820      	ldr	r0, [pc, #128]	; (8000d6c <HAL_UART_MspInit+0x134>)
 8000cea:	f003 fd45 	bl	8004778 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000cf0:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <HAL_UART_MspInit+0x13c>)
 8000cf2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000cf6:	222e      	movs	r2, #46	; 0x2e
 8000cf8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d26:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d30:	f000 faca 	bl	80012c8 <HAL_DMA_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8000d3a:	f7ff fe91 	bl	8000a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d42:	679a      	str	r2, [r3, #120]	; 0x78
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_UART_MspInit+0x138>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2027      	movs	r0, #39	; 0x27
 8000d50:	f000 fa85 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d54:	2027      	movs	r0, #39	; 0x27
 8000d56:	f000 fa9c 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	37e0      	adds	r7, #224	; 0xe0
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40004800 	.word	0x40004800
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020c00 	.word	0x58020c00
 8000d70:	20000184 	.word	0x20000184
 8000d74:	40020010 	.word	0x40020010

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f910 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <DMA1_Stream0_IRQHandler+0x10>)
 8000dd2:	f001 fda1 	bl	8002918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000184 	.word	0x20000184

08000de0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART3_IRQHandler+0x10>)
 8000de6:	f006 fa6d 	bl	80072c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000f4 	.word	0x200000f4

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000df8:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <SystemInit+0xe4>)
 8000dfa:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <SystemInit+0xe4>)
 8000dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <SystemInit+0xe8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d807      	bhi.n	8000e24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e14:	4a31      	ldr	r2, [pc, #196]	; (8000edc <SystemInit+0xe8>)
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <SystemInit+0xe8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 030f 	bic.w	r3, r3, #15
 8000e1e:	f043 0307 	orr.w	r3, r3, #7
 8000e22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e24:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <SystemInit+0xec>)
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <SystemInit+0xec>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <SystemInit+0xec>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e36:	492a      	ldr	r1, [pc, #168]	; (8000ee0 <SystemInit+0xec>)
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <SystemInit+0xec>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <SystemInit+0xf0>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <SystemInit+0xe8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	2b07      	cmp	r3, #7
 8000e4c:	d907      	bls.n	8000e5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <SystemInit+0xe8>)
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <SystemInit+0xe8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f023 030f 	bic.w	r3, r3, #15
 8000e58:	f043 0307 	orr.w	r3, r3, #7
 8000e5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <SystemInit+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <SystemInit+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <SystemInit+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <SystemInit+0xec>)
 8000e72:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <SystemInit+0xf4>)
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <SystemInit+0xec>)
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <SystemInit+0xf8>)
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <SystemInit+0xec>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <SystemInit+0xfc>)
 8000e80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <SystemInit+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <SystemInit+0xec>)
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <SystemInit+0xfc>)
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <SystemInit+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <SystemInit+0xec>)
 8000e96:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <SystemInit+0xfc>)
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <SystemInit+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <SystemInit+0xec>)
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <SystemInit+0xec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <SystemInit+0xec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <SystemInit+0x100>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <SystemInit+0x104>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ebe:	d202      	bcs.n	8000ec6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <SystemInit+0x108>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <SystemInit+0x10c>)
 8000ec8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ecc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	52002000 	.word	0x52002000
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ee8:	02020200 	.word	0x02020200
 8000eec:	01ff0000 	.word	0x01ff0000
 8000ef0:	01010280 	.word	0x01010280
 8000ef4:	5c001000 	.word	0x5c001000
 8000ef8:	ffff0000 	.word	0xffff0000
 8000efc:	51008108 	.word	0x51008108
 8000f00:	52004000 	.word	0x52004000

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f000 f99c 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f10:	f004 fc18 	bl	8005744 <HAL_RCC_GetSysClockFreq>
 8000f14:	4601      	mov	r1, r0
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_Init+0x68>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	f003 030f 	and.w	r3, r3, #15
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <HAL_Init+0x6c>)
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	f003 031f 	and.w	r3, r3, #31
 8000f28:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_Init+0x68>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_Init+0x6c>)
 8000f38:	5cd3      	ldrb	r3, [r2, r3]
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_Init+0x70>)
 8000f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_Init+0x74>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f814 	bl	8000f7c <HAL_InitTick>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e002      	b.n	8000f64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5e:	f7ff fd83 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	08008f08 	.word	0x08008f08
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000000 	.word	0x20000000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_InitTick+0x60>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e021      	b.n	8000fd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_InitTick+0x64>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_InitTick+0x60>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f981 	bl	80012ae <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f94b 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x68>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000000c 	.word	0x2000000c
 800100c:	200002e4 	.word	0x200002e4

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200002e4 	.word	0x200002e4

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_Delay+0x40>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad2      	subs	r2, r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3f7      	bcc.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000000c 	.word	0x2000000c

0800106c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetREVID+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	0c1b      	lsrs	r3, r3, #16
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	5c001000 	.word	0x5c001000

08001084 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800108c:	4906      	ldr	r1, [pc, #24]	; (80010a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	58000400 	.word	0x58000400

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__NVIC_SetPriorityGrouping+0x40>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x40>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	05fa0000 	.word	0x05fa0000

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	4909      	ldr	r1, [pc, #36]	; (8001148 <__NVIC_EnableIRQ+0x38>)
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001128:	095b      	lsrs	r3, r3, #5
 800112a:	88fa      	ldrh	r2, [r7, #6]
 800112c:	f002 021f 	and.w	r2, r2, #31
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	490d      	ldr	r1, [pc, #52]	; (8001198 <__NVIC_SetPriority+0x4c>)
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	4909      	ldr	r1, [pc, #36]	; (800119c <__NVIC_SetPriority+0x50>)
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	2201      	movs	r2, #1
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	401a      	ands	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e6:	2101      	movs	r1, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	1e59      	subs	r1, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff90 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff2b 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff42 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff92 	bl	80011a0 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff61 	bl	800114c <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff35 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa4 	bl	8001204 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fe9e 	bl	8001010 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e316      	b.n	800190e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a66      	ldr	r2, [pc, #408]	; (8001480 <HAL_DMA_Init+0x1b8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d04a      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a65      	ldr	r2, [pc, #404]	; (8001484 <HAL_DMA_Init+0x1bc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d045      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a63      	ldr	r2, [pc, #396]	; (8001488 <HAL_DMA_Init+0x1c0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d040      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a62      	ldr	r2, [pc, #392]	; (800148c <HAL_DMA_Init+0x1c4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d03b      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a60      	ldr	r2, [pc, #384]	; (8001490 <HAL_DMA_Init+0x1c8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d036      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a5f      	ldr	r2, [pc, #380]	; (8001494 <HAL_DMA_Init+0x1cc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d031      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a5d      	ldr	r2, [pc, #372]	; (8001498 <HAL_DMA_Init+0x1d0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02c      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a5c      	ldr	r2, [pc, #368]	; (800149c <HAL_DMA_Init+0x1d4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d027      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <HAL_DMA_Init+0x1d8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d022      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a59      	ldr	r2, [pc, #356]	; (80014a4 <HAL_DMA_Init+0x1dc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d01d      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_DMA_Init+0x1e0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d018      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a56      	ldr	r2, [pc, #344]	; (80014ac <HAL_DMA_Init+0x1e4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a54      	ldr	r2, [pc, #336]	; (80014b0 <HAL_DMA_Init+0x1e8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00e      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a53      	ldr	r2, [pc, #332]	; (80014b4 <HAL_DMA_Init+0x1ec>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d009      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <HAL_DMA_Init+0x1f0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d004      	beq.n	8001380 <HAL_DMA_Init+0xb8>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a50      	ldr	r2, [pc, #320]	; (80014bc <HAL_DMA_Init+0x1f4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0xbc>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_DMA_Init+0xbe>
 8001384:	2300      	movs	r3, #0
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 813b 	beq.w	8001602 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2202      	movs	r2, #2
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a37      	ldr	r2, [pc, #220]	; (8001480 <HAL_DMA_Init+0x1b8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d04a      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a36      	ldr	r2, [pc, #216]	; (8001484 <HAL_DMA_Init+0x1bc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d045      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a34      	ldr	r2, [pc, #208]	; (8001488 <HAL_DMA_Init+0x1c0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d040      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a33      	ldr	r2, [pc, #204]	; (800148c <HAL_DMA_Init+0x1c4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d03b      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a31      	ldr	r2, [pc, #196]	; (8001490 <HAL_DMA_Init+0x1c8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d036      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a30      	ldr	r2, [pc, #192]	; (8001494 <HAL_DMA_Init+0x1cc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d031      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <HAL_DMA_Init+0x1d0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d02c      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <HAL_DMA_Init+0x1d4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d027      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <HAL_DMA_Init+0x1d8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d022      	beq.n	800143c <HAL_DMA_Init+0x174>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <HAL_DMA_Init+0x1dc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d01d      	beq.n	800143c <HAL_DMA_Init+0x174>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <HAL_DMA_Init+0x1e0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d018      	beq.n	800143c <HAL_DMA_Init+0x174>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a27      	ldr	r2, [pc, #156]	; (80014ac <HAL_DMA_Init+0x1e4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d013      	beq.n	800143c <HAL_DMA_Init+0x174>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <HAL_DMA_Init+0x1e8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00e      	beq.n	800143c <HAL_DMA_Init+0x174>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <HAL_DMA_Init+0x1ec>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d009      	beq.n	800143c <HAL_DMA_Init+0x174>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <HAL_DMA_Init+0x1f0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d004      	beq.n	800143c <HAL_DMA_Init+0x174>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <HAL_DMA_Init+0x1f4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d108      	bne.n	800144e <HAL_DMA_Init+0x186>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e007      	b.n	800145e <HAL_DMA_Init+0x196>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800145e:	e02f      	b.n	80014c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001460:	f7ff fdd6 	bl	8001010 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b05      	cmp	r3, #5
 800146c:	d928      	bls.n	80014c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2220      	movs	r2, #32
 8001472:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e246      	b.n	800190e <HAL_DMA_Init+0x646>
 8001480:	40020010 	.word	0x40020010
 8001484:	40020028 	.word	0x40020028
 8001488:	40020040 	.word	0x40020040
 800148c:	40020058 	.word	0x40020058
 8001490:	40020070 	.word	0x40020070
 8001494:	40020088 	.word	0x40020088
 8001498:	400200a0 	.word	0x400200a0
 800149c:	400200b8 	.word	0x400200b8
 80014a0:	40020410 	.word	0x40020410
 80014a4:	40020428 	.word	0x40020428
 80014a8:	40020440 	.word	0x40020440
 80014ac:	40020458 	.word	0x40020458
 80014b0:	40020470 	.word	0x40020470
 80014b4:	40020488 	.word	0x40020488
 80014b8:	400204a0 	.word	0x400204a0
 80014bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1c8      	bne.n	8001460 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4b83      	ldr	r3, [pc, #524]	; (80016e8 <HAL_DMA_Init+0x420>)
 80014da:	4013      	ands	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80014e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	2b04      	cmp	r3, #4
 8001512:	d107      	bne.n	8001524 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4313      	orrs	r3, r2
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001524:	4b71      	ldr	r3, [pc, #452]	; (80016ec <HAL_DMA_Init+0x424>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b71      	ldr	r3, [pc, #452]	; (80016f0 <HAL_DMA_Init+0x428>)
 800152a:	4013      	ands	r3, r2
 800152c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001530:	d328      	bcc.n	8001584 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b28      	cmp	r3, #40	; 0x28
 8001538:	d903      	bls.n	8001542 <HAL_DMA_Init+0x27a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b2e      	cmp	r3, #46	; 0x2e
 8001540:	d917      	bls.n	8001572 <HAL_DMA_Init+0x2aa>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b3e      	cmp	r3, #62	; 0x3e
 8001548:	d903      	bls.n	8001552 <HAL_DMA_Init+0x28a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b42      	cmp	r3, #66	; 0x42
 8001550:	d90f      	bls.n	8001572 <HAL_DMA_Init+0x2aa>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b46      	cmp	r3, #70	; 0x46
 8001558:	d903      	bls.n	8001562 <HAL_DMA_Init+0x29a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b48      	cmp	r3, #72	; 0x48
 8001560:	d907      	bls.n	8001572 <HAL_DMA_Init+0x2aa>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b4e      	cmp	r3, #78	; 0x4e
 8001568:	d905      	bls.n	8001576 <HAL_DMA_Init+0x2ae>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b52      	cmp	r3, #82	; 0x52
 8001570:	d801      	bhi.n	8001576 <HAL_DMA_Init+0x2ae>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_DMA_Init+0x2b0>
 8001576:	2300      	movs	r3, #0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001582:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f023 0307 	bic.w	r3, r3, #7
 800159a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d117      	bne.n	80015de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00e      	beq.n	80015de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f002 fb31 	bl	8003c28 <DMA_CheckFifoParam>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e197      	b.n	800190e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f002 fa6c 	bl	8003ac4 <DMA_CalcBaseAndBitshift>
 80015ec:	4603      	mov	r3, r0
 80015ee:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	223f      	movs	r2, #63	; 0x3f
 80015fa:	409a      	lsls	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e0cd      	b.n	800179e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <HAL_DMA_Init+0x42c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <HAL_DMA_Init+0x38a>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a39      	ldr	r2, [pc, #228]	; (80016f8 <HAL_DMA_Init+0x430>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01d      	beq.n	8001652 <HAL_DMA_Init+0x38a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a38      	ldr	r2, [pc, #224]	; (80016fc <HAL_DMA_Init+0x434>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d018      	beq.n	8001652 <HAL_DMA_Init+0x38a>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a36      	ldr	r2, [pc, #216]	; (8001700 <HAL_DMA_Init+0x438>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_DMA_Init+0x38a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a35      	ldr	r2, [pc, #212]	; (8001704 <HAL_DMA_Init+0x43c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d00e      	beq.n	8001652 <HAL_DMA_Init+0x38a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <HAL_DMA_Init+0x440>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d009      	beq.n	8001652 <HAL_DMA_Init+0x38a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a32      	ldr	r2, [pc, #200]	; (800170c <HAL_DMA_Init+0x444>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d004      	beq.n	8001652 <HAL_DMA_Init+0x38a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a30      	ldr	r2, [pc, #192]	; (8001710 <HAL_DMA_Init+0x448>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_DMA_Init+0x38e>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_DMA_Init+0x390>
 8001656:	2300      	movs	r3, #0
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8097 	beq.w	800178c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <HAL_DMA_Init+0x42c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d021      	beq.n	80016ac <HAL_DMA_Init+0x3e4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <HAL_DMA_Init+0x430>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01c      	beq.n	80016ac <HAL_DMA_Init+0x3e4>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a21      	ldr	r2, [pc, #132]	; (80016fc <HAL_DMA_Init+0x434>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d017      	beq.n	80016ac <HAL_DMA_Init+0x3e4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_DMA_Init+0x438>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d012      	beq.n	80016ac <HAL_DMA_Init+0x3e4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <HAL_DMA_Init+0x43c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_DMA_Init+0x3e4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_DMA_Init+0x440>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d008      	beq.n	80016ac <HAL_DMA_Init+0x3e4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_DMA_Init+0x444>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d003      	beq.n	80016ac <HAL_DMA_Init+0x3e4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_DMA_Init+0x448>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_DMA_Init+0x44c>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d020      	beq.n	8001718 <HAL_DMA_Init+0x450>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b80      	cmp	r3, #128	; 0x80
 80016dc:	d102      	bne.n	80016e4 <HAL_DMA_Init+0x41c>
 80016de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e2:	e01a      	b.n	800171a <HAL_DMA_Init+0x452>
 80016e4:	2300      	movs	r3, #0
 80016e6:	e018      	b.n	800171a <HAL_DMA_Init+0x452>
 80016e8:	fe10803f 	.word	0xfe10803f
 80016ec:	5c001000 	.word	0x5c001000
 80016f0:	ffff0000 	.word	0xffff0000
 80016f4:	58025408 	.word	0x58025408
 80016f8:	5802541c 	.word	0x5802541c
 80016fc:	58025430 	.word	0x58025430
 8001700:	58025444 	.word	0x58025444
 8001704:	58025458 	.word	0x58025458
 8001708:	5802546c 	.word	0x5802546c
 800170c:	58025480 	.word	0x58025480
 8001710:	58025494 	.word	0x58025494
 8001714:	fffe000f 	.word	0xfffe000f
 8001718:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68d2      	ldr	r2, [r2, #12]
 800171e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001730:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001738:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001740:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001748:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4313      	orrs	r3, r2
 800174e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <HAL_DMA_Init+0x650>)
 8001760:	4413      	add	r3, r2
 8001762:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_DMA_Init+0x654>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	009a      	lsls	r2, r3, #2
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f002 f9a7 	bl	8003ac4 <DMA_CalcBaseAndBitshift>
 8001776:	4603      	mov	r3, r0
 8001778:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2201      	movs	r2, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	e008      	b.n	800179e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0b7      	b.n	800190e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a5f      	ldr	r2, [pc, #380]	; (8001920 <HAL_DMA_Init+0x658>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d072      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a5d      	ldr	r2, [pc, #372]	; (8001924 <HAL_DMA_Init+0x65c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d06d      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a5c      	ldr	r2, [pc, #368]	; (8001928 <HAL_DMA_Init+0x660>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d068      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a5a      	ldr	r2, [pc, #360]	; (800192c <HAL_DMA_Init+0x664>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d063      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a59      	ldr	r2, [pc, #356]	; (8001930 <HAL_DMA_Init+0x668>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d05e      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a57      	ldr	r2, [pc, #348]	; (8001934 <HAL_DMA_Init+0x66c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d059      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a56      	ldr	r2, [pc, #344]	; (8001938 <HAL_DMA_Init+0x670>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d054      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a54      	ldr	r2, [pc, #336]	; (800193c <HAL_DMA_Init+0x674>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d04f      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a53      	ldr	r2, [pc, #332]	; (8001940 <HAL_DMA_Init+0x678>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d04a      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a51      	ldr	r2, [pc, #324]	; (8001944 <HAL_DMA_Init+0x67c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d045      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a50      	ldr	r2, [pc, #320]	; (8001948 <HAL_DMA_Init+0x680>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d040      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a4e      	ldr	r2, [pc, #312]	; (800194c <HAL_DMA_Init+0x684>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d03b      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a4d      	ldr	r2, [pc, #308]	; (8001950 <HAL_DMA_Init+0x688>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d036      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <HAL_DMA_Init+0x68c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d031      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_DMA_Init+0x690>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d02c      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_DMA_Init+0x694>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d027      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a47      	ldr	r2, [pc, #284]	; (8001960 <HAL_DMA_Init+0x698>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d022      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a45      	ldr	r2, [pc, #276]	; (8001964 <HAL_DMA_Init+0x69c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01d      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a44      	ldr	r2, [pc, #272]	; (8001968 <HAL_DMA_Init+0x6a0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d018      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a42      	ldr	r2, [pc, #264]	; (800196c <HAL_DMA_Init+0x6a4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a41      	ldr	r2, [pc, #260]	; (8001970 <HAL_DMA_Init+0x6a8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00e      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a3f      	ldr	r2, [pc, #252]	; (8001974 <HAL_DMA_Init+0x6ac>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d009      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a3e      	ldr	r2, [pc, #248]	; (8001978 <HAL_DMA_Init+0x6b0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d004      	beq.n	800188e <HAL_DMA_Init+0x5c6>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a3c      	ldr	r2, [pc, #240]	; (800197c <HAL_DMA_Init+0x6b4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_DMA_Init+0x5ca>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_DMA_Init+0x5cc>
 8001892:	2300      	movs	r3, #0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d032      	beq.n	80018fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f002 fa41 	bl	8003d20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b80      	cmp	r3, #128	; 0x80
 80018a4:	d102      	bne.n	80018ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6852      	ldr	r2, [r2, #4]
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d010      	beq.n	80018ec <HAL_DMA_Init+0x624>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d80c      	bhi.n	80018ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f002 fabe 	bl	8003e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	e008      	b.n	80018fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	a7fdabf8 	.word	0xa7fdabf8
 800191c:	cccccccd 	.word	0xcccccccd
 8001920:	40020010 	.word	0x40020010
 8001924:	40020028 	.word	0x40020028
 8001928:	40020040 	.word	0x40020040
 800192c:	40020058 	.word	0x40020058
 8001930:	40020070 	.word	0x40020070
 8001934:	40020088 	.word	0x40020088
 8001938:	400200a0 	.word	0x400200a0
 800193c:	400200b8 	.word	0x400200b8
 8001940:	40020410 	.word	0x40020410
 8001944:	40020428 	.word	0x40020428
 8001948:	40020440 	.word	0x40020440
 800194c:	40020458 	.word	0x40020458
 8001950:	40020470 	.word	0x40020470
 8001954:	40020488 	.word	0x40020488
 8001958:	400204a0 	.word	0x400204a0
 800195c:	400204b8 	.word	0x400204b8
 8001960:	58025408 	.word	0x58025408
 8001964:	5802541c 	.word	0x5802541c
 8001968:	58025430 	.word	0x58025430
 800196c:	58025444 	.word	0x58025444
 8001970:	58025458 	.word	0x58025458
 8001974:	5802546c 	.word	0x5802546c
 8001978:	58025480 	.word	0x58025480
 800197c:	58025494 	.word	0x58025494

08001980 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e226      	b.n	8001dea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_DMA_Start_IT+0x2a>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e21f      	b.n	8001dea <HAL_DMA_Start_IT+0x46a>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 820a 	bne.w	8001dd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a68      	ldr	r2, [pc, #416]	; (8001b74 <HAL_DMA_Start_IT+0x1f4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d04a      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a66      	ldr	r2, [pc, #408]	; (8001b78 <HAL_DMA_Start_IT+0x1f8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d045      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a65      	ldr	r2, [pc, #404]	; (8001b7c <HAL_DMA_Start_IT+0x1fc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d040      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a63      	ldr	r2, [pc, #396]	; (8001b80 <HAL_DMA_Start_IT+0x200>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d03b      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a62      	ldr	r2, [pc, #392]	; (8001b84 <HAL_DMA_Start_IT+0x204>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d036      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a60      	ldr	r2, [pc, #384]	; (8001b88 <HAL_DMA_Start_IT+0x208>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d031      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a5f      	ldr	r2, [pc, #380]	; (8001b8c <HAL_DMA_Start_IT+0x20c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d02c      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a5d      	ldr	r2, [pc, #372]	; (8001b90 <HAL_DMA_Start_IT+0x210>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d027      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a5c      	ldr	r2, [pc, #368]	; (8001b94 <HAL_DMA_Start_IT+0x214>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d022      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <HAL_DMA_Start_IT+0x218>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d01d      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a59      	ldr	r2, [pc, #356]	; (8001b9c <HAL_DMA_Start_IT+0x21c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d018      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a57      	ldr	r2, [pc, #348]	; (8001ba0 <HAL_DMA_Start_IT+0x220>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a56      	ldr	r2, [pc, #344]	; (8001ba4 <HAL_DMA_Start_IT+0x224>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00e      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a54      	ldr	r2, [pc, #336]	; (8001ba8 <HAL_DMA_Start_IT+0x228>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d009      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a53      	ldr	r2, [pc, #332]	; (8001bac <HAL_DMA_Start_IT+0x22c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d004      	beq.n	8001a6e <HAL_DMA_Start_IT+0xee>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a51      	ldr	r2, [pc, #324]	; (8001bb0 <HAL_DMA_Start_IT+0x230>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d108      	bne.n	8001a80 <HAL_DMA_Start_IT+0x100>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_DMA_Start_IT+0x110>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f001 fe68 	bl	800376c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a34      	ldr	r2, [pc, #208]	; (8001b74 <HAL_DMA_Start_IT+0x1f4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d04a      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a33      	ldr	r2, [pc, #204]	; (8001b78 <HAL_DMA_Start_IT+0x1f8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d045      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <HAL_DMA_Start_IT+0x1fc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d040      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a30      	ldr	r2, [pc, #192]	; (8001b80 <HAL_DMA_Start_IT+0x200>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d03b      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2e      	ldr	r2, [pc, #184]	; (8001b84 <HAL_DMA_Start_IT+0x204>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d036      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2d      	ldr	r2, [pc, #180]	; (8001b88 <HAL_DMA_Start_IT+0x208>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d031      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <HAL_DMA_Start_IT+0x20c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02c      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <HAL_DMA_Start_IT+0x210>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d027      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <HAL_DMA_Start_IT+0x214>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d022      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_DMA_Start_IT+0x218>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d01d      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <HAL_DMA_Start_IT+0x21c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d018      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a24      	ldr	r2, [pc, #144]	; (8001ba0 <HAL_DMA_Start_IT+0x220>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d013      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_DMA_Start_IT+0x224>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00e      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <HAL_DMA_Start_IT+0x228>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d009      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_DMA_Start_IT+0x22c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_DMA_Start_IT+0x1bc>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_DMA_Start_IT+0x230>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_DMA_Start_IT+0x1c0>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_DMA_Start_IT+0x1c2>
 8001b40:	2300      	movs	r3, #0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d036      	beq.n	8001bb4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	f022 021e 	bic.w	r2, r2, #30
 8001b54:	f042 0216 	orr.w	r2, r2, #22
 8001b58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d03e      	beq.n	8001be0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	f042 0208 	orr.w	r2, r2, #8
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e035      	b.n	8001be0 <HAL_DMA_Start_IT+0x260>
 8001b74:	40020010 	.word	0x40020010
 8001b78:	40020028 	.word	0x40020028
 8001b7c:	40020040 	.word	0x40020040
 8001b80:	40020058 	.word	0x40020058
 8001b84:	40020070 	.word	0x40020070
 8001b88:	40020088 	.word	0x40020088
 8001b8c:	400200a0 	.word	0x400200a0
 8001b90:	400200b8 	.word	0x400200b8
 8001b94:	40020410 	.word	0x40020410
 8001b98:	40020428 	.word	0x40020428
 8001b9c:	40020440 	.word	0x40020440
 8001ba0:	40020458 	.word	0x40020458
 8001ba4:	40020470 	.word	0x40020470
 8001ba8:	40020488 	.word	0x40020488
 8001bac:	400204a0 	.word	0x400204a0
 8001bb0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	f022 020e 	bic.w	r2, r2, #14
 8001bc2:	f042 020a 	orr.w	r2, r2, #10
 8001bc6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f042 0204 	orr.w	r2, r2, #4
 8001bde:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a83      	ldr	r2, [pc, #524]	; (8001df4 <HAL_DMA_Start_IT+0x474>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d072      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a82      	ldr	r2, [pc, #520]	; (8001df8 <HAL_DMA_Start_IT+0x478>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d06d      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a80      	ldr	r2, [pc, #512]	; (8001dfc <HAL_DMA_Start_IT+0x47c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d068      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7f      	ldr	r2, [pc, #508]	; (8001e00 <HAL_DMA_Start_IT+0x480>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d063      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a7d      	ldr	r2, [pc, #500]	; (8001e04 <HAL_DMA_Start_IT+0x484>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d05e      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7c      	ldr	r2, [pc, #496]	; (8001e08 <HAL_DMA_Start_IT+0x488>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d059      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a7a      	ldr	r2, [pc, #488]	; (8001e0c <HAL_DMA_Start_IT+0x48c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d054      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a79      	ldr	r2, [pc, #484]	; (8001e10 <HAL_DMA_Start_IT+0x490>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d04f      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a77      	ldr	r2, [pc, #476]	; (8001e14 <HAL_DMA_Start_IT+0x494>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d04a      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a76      	ldr	r2, [pc, #472]	; (8001e18 <HAL_DMA_Start_IT+0x498>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d045      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a74      	ldr	r2, [pc, #464]	; (8001e1c <HAL_DMA_Start_IT+0x49c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d040      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a73      	ldr	r2, [pc, #460]	; (8001e20 <HAL_DMA_Start_IT+0x4a0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d03b      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a71      	ldr	r2, [pc, #452]	; (8001e24 <HAL_DMA_Start_IT+0x4a4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d036      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a70      	ldr	r2, [pc, #448]	; (8001e28 <HAL_DMA_Start_IT+0x4a8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d031      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_DMA_Start_IT+0x4ac>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02c      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6d      	ldr	r2, [pc, #436]	; (8001e30 <HAL_DMA_Start_IT+0x4b0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d027      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6b      	ldr	r2, [pc, #428]	; (8001e34 <HAL_DMA_Start_IT+0x4b4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d022      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_DMA_Start_IT+0x4b8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d01d      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a68      	ldr	r2, [pc, #416]	; (8001e3c <HAL_DMA_Start_IT+0x4bc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d018      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_DMA_Start_IT+0x4c0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a65      	ldr	r2, [pc, #404]	; (8001e44 <HAL_DMA_Start_IT+0x4c4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00e      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a64      	ldr	r2, [pc, #400]	; (8001e48 <HAL_DMA_Start_IT+0x4c8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a62      	ldr	r2, [pc, #392]	; (8001e4c <HAL_DMA_Start_IT+0x4cc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x350>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a61      	ldr	r2, [pc, #388]	; (8001e50 <HAL_DMA_Start_IT+0x4d0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_DMA_Start_IT+0x354>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_DMA_Start_IT+0x356>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01a      	beq.n	8001d10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <HAL_DMA_Start_IT+0x474>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d04a      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a36      	ldr	r2, [pc, #216]	; (8001df8 <HAL_DMA_Start_IT+0x478>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d045      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <HAL_DMA_Start_IT+0x47c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d040      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <HAL_DMA_Start_IT+0x480>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d03b      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <HAL_DMA_Start_IT+0x484>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d036      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a30      	ldr	r2, [pc, #192]	; (8001e08 <HAL_DMA_Start_IT+0x488>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d031      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2e      	ldr	r2, [pc, #184]	; (8001e0c <HAL_DMA_Start_IT+0x48c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d02c      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <HAL_DMA_Start_IT+0x490>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d027      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_DMA_Start_IT+0x494>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d022      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <HAL_DMA_Start_IT+0x498>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d01d      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a28      	ldr	r2, [pc, #160]	; (8001e1c <HAL_DMA_Start_IT+0x49c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d018      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_DMA_Start_IT+0x4a0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d013      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <HAL_DMA_Start_IT+0x4a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00e      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <HAL_DMA_Start_IT+0x4a8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <HAL_DMA_Start_IT+0x4ac>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_DMA_Start_IT+0x430>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_DMA_Start_IT+0x4b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d108      	bne.n	8001dc2 <HAL_DMA_Start_IT+0x442>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e012      	b.n	8001de8 <HAL_DMA_Start_IT+0x468>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e009      	b.n	8001de8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40020010 	.word	0x40020010
 8001df8:	40020028 	.word	0x40020028
 8001dfc:	40020040 	.word	0x40020040
 8001e00:	40020058 	.word	0x40020058
 8001e04:	40020070 	.word	0x40020070
 8001e08:	40020088 	.word	0x40020088
 8001e0c:	400200a0 	.word	0x400200a0
 8001e10:	400200b8 	.word	0x400200b8
 8001e14:	40020410 	.word	0x40020410
 8001e18:	40020428 	.word	0x40020428
 8001e1c:	40020440 	.word	0x40020440
 8001e20:	40020458 	.word	0x40020458
 8001e24:	40020470 	.word	0x40020470
 8001e28:	40020488 	.word	0x40020488
 8001e2c:	400204a0 	.word	0x400204a0
 8001e30:	400204b8 	.word	0x400204b8
 8001e34:	58025408 	.word	0x58025408
 8001e38:	5802541c 	.word	0x5802541c
 8001e3c:	58025430 	.word	0x58025430
 8001e40:	58025444 	.word	0x58025444
 8001e44:	58025458 	.word	0x58025458
 8001e48:	5802546c 	.word	0x5802546c
 8001e4c:	58025480 	.word	0x58025480
 8001e50:	58025494 	.word	0x58025494

08001e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff f8d8 	bl	8001010 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e2dc      	b.n	8002426 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d008      	beq.n	8001e8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e2cd      	b.n	8002426 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a76      	ldr	r2, [pc, #472]	; (8002068 <HAL_DMA_Abort+0x214>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04a      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a74      	ldr	r2, [pc, #464]	; (800206c <HAL_DMA_Abort+0x218>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d045      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a73      	ldr	r2, [pc, #460]	; (8002070 <HAL_DMA_Abort+0x21c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d040      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a71      	ldr	r2, [pc, #452]	; (8002074 <HAL_DMA_Abort+0x220>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d03b      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a70      	ldr	r2, [pc, #448]	; (8002078 <HAL_DMA_Abort+0x224>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d036      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_DMA_Abort+0x228>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d031      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6d      	ldr	r2, [pc, #436]	; (8002080 <HAL_DMA_Abort+0x22c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d02c      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6b      	ldr	r2, [pc, #428]	; (8002084 <HAL_DMA_Abort+0x230>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d027      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6a      	ldr	r2, [pc, #424]	; (8002088 <HAL_DMA_Abort+0x234>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a68      	ldr	r2, [pc, #416]	; (800208c <HAL_DMA_Abort+0x238>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01d      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a67      	ldr	r2, [pc, #412]	; (8002090 <HAL_DMA_Abort+0x23c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d018      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a65      	ldr	r2, [pc, #404]	; (8002094 <HAL_DMA_Abort+0x240>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a64      	ldr	r2, [pc, #400]	; (8002098 <HAL_DMA_Abort+0x244>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00e      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a62      	ldr	r2, [pc, #392]	; (800209c <HAL_DMA_Abort+0x248>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d009      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a61      	ldr	r2, [pc, #388]	; (80020a0 <HAL_DMA_Abort+0x24c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d004      	beq.n	8001f2a <HAL_DMA_Abort+0xd6>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <HAL_DMA_Abort+0x250>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_DMA_Abort+0xda>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_Abort+0xdc>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	f022 021e 	bic.w	r2, r2, #30
 8001f42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	6952      	ldr	r2, [r2, #20]
 8001f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e00a      	b.n	8001f72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	f022 020e 	bic.w	r2, r2, #14
 8001f6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a3c      	ldr	r2, [pc, #240]	; (8002068 <HAL_DMA_Abort+0x214>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d072      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3a      	ldr	r2, [pc, #232]	; (800206c <HAL_DMA_Abort+0x218>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d06d      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a39      	ldr	r2, [pc, #228]	; (8002070 <HAL_DMA_Abort+0x21c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d068      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a37      	ldr	r2, [pc, #220]	; (8002074 <HAL_DMA_Abort+0x220>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d063      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a36      	ldr	r2, [pc, #216]	; (8002078 <HAL_DMA_Abort+0x224>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d05e      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a34      	ldr	r2, [pc, #208]	; (800207c <HAL_DMA_Abort+0x228>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d059      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a33      	ldr	r2, [pc, #204]	; (8002080 <HAL_DMA_Abort+0x22c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d054      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a31      	ldr	r2, [pc, #196]	; (8002084 <HAL_DMA_Abort+0x230>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d04f      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a30      	ldr	r2, [pc, #192]	; (8002088 <HAL_DMA_Abort+0x234>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d04a      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2e      	ldr	r2, [pc, #184]	; (800208c <HAL_DMA_Abort+0x238>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d045      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2d      	ldr	r2, [pc, #180]	; (8002090 <HAL_DMA_Abort+0x23c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d040      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <HAL_DMA_Abort+0x240>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d03b      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2a      	ldr	r2, [pc, #168]	; (8002098 <HAL_DMA_Abort+0x244>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d036      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a28      	ldr	r2, [pc, #160]	; (800209c <HAL_DMA_Abort+0x248>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d031      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <HAL_DMA_Abort+0x24c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d02c      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <HAL_DMA_Abort+0x250>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d027      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a24      	ldr	r2, [pc, #144]	; (80020a8 <HAL_DMA_Abort+0x254>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d022      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_DMA_Abort+0x258>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01d      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <HAL_DMA_Abort+0x25c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d018      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_DMA_Abort+0x260>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_DMA_Abort+0x264>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00e      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_DMA_Abort+0x268>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_DMA_Abort+0x26c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d004      	beq.n	8002062 <HAL_DMA_Abort+0x20e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_DMA_Abort+0x270>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d132      	bne.n	80020c8 <HAL_DMA_Abort+0x274>
 8002062:	2301      	movs	r3, #1
 8002064:	e031      	b.n	80020ca <HAL_DMA_Abort+0x276>
 8002066:	bf00      	nop
 8002068:	40020010 	.word	0x40020010
 800206c:	40020028 	.word	0x40020028
 8002070:	40020040 	.word	0x40020040
 8002074:	40020058 	.word	0x40020058
 8002078:	40020070 	.word	0x40020070
 800207c:	40020088 	.word	0x40020088
 8002080:	400200a0 	.word	0x400200a0
 8002084:	400200b8 	.word	0x400200b8
 8002088:	40020410 	.word	0x40020410
 800208c:	40020428 	.word	0x40020428
 8002090:	40020440 	.word	0x40020440
 8002094:	40020458 	.word	0x40020458
 8002098:	40020470 	.word	0x40020470
 800209c:	40020488 	.word	0x40020488
 80020a0:	400204a0 	.word	0x400204a0
 80020a4:	400204b8 	.word	0x400204b8
 80020a8:	58025408 	.word	0x58025408
 80020ac:	5802541c 	.word	0x5802541c
 80020b0:	58025430 	.word	0x58025430
 80020b4:	58025444 	.word	0x58025444
 80020b8:	58025458 	.word	0x58025458
 80020bc:	5802546c 	.word	0x5802546c
 80020c0:	58025480 	.word	0x58025480
 80020c4:	58025494 	.word	0x58025494
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6d      	ldr	r2, [pc, #436]	; (8002298 <HAL_DMA_Abort+0x444>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04a      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6b      	ldr	r2, [pc, #428]	; (800229c <HAL_DMA_Abort+0x448>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d045      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6a      	ldr	r2, [pc, #424]	; (80022a0 <HAL_DMA_Abort+0x44c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d040      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a68      	ldr	r2, [pc, #416]	; (80022a4 <HAL_DMA_Abort+0x450>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d03b      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a67      	ldr	r2, [pc, #412]	; (80022a8 <HAL_DMA_Abort+0x454>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d036      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a65      	ldr	r2, [pc, #404]	; (80022ac <HAL_DMA_Abort+0x458>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d031      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a64      	ldr	r2, [pc, #400]	; (80022b0 <HAL_DMA_Abort+0x45c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d02c      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a62      	ldr	r2, [pc, #392]	; (80022b4 <HAL_DMA_Abort+0x460>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d027      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <HAL_DMA_Abort+0x464>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5f      	ldr	r2, [pc, #380]	; (80022bc <HAL_DMA_Abort+0x468>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01d      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a5e      	ldr	r2, [pc, #376]	; (80022c0 <HAL_DMA_Abort+0x46c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d018      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5c      	ldr	r2, [pc, #368]	; (80022c4 <HAL_DMA_Abort+0x470>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5b      	ldr	r2, [pc, #364]	; (80022c8 <HAL_DMA_Abort+0x474>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a59      	ldr	r2, [pc, #356]	; (80022cc <HAL_DMA_Abort+0x478>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_DMA_Abort+0x47c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_DMA_Abort+0x32a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a56      	ldr	r2, [pc, #344]	; (80022d4 <HAL_DMA_Abort+0x480>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d108      	bne.n	8002190 <HAL_DMA_Abort+0x33c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e007      	b.n	80021a0 <HAL_DMA_Abort+0x34c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021a0:	e013      	b.n	80021ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7fe ff35 	bl	8001010 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d90c      	bls.n	80021ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e12d      	b.n	8002426 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1e5      	bne.n	80021a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2f      	ldr	r2, [pc, #188]	; (8002298 <HAL_DMA_Abort+0x444>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04a      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2d      	ldr	r2, [pc, #180]	; (800229c <HAL_DMA_Abort+0x448>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d045      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a2c      	ldr	r2, [pc, #176]	; (80022a0 <HAL_DMA_Abort+0x44c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d040      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2a      	ldr	r2, [pc, #168]	; (80022a4 <HAL_DMA_Abort+0x450>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d03b      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a29      	ldr	r2, [pc, #164]	; (80022a8 <HAL_DMA_Abort+0x454>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d036      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_DMA_Abort+0x458>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d031      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <HAL_DMA_Abort+0x45c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d02c      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <HAL_DMA_Abort+0x460>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d027      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a23      	ldr	r2, [pc, #140]	; (80022b8 <HAL_DMA_Abort+0x464>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a21      	ldr	r2, [pc, #132]	; (80022bc <HAL_DMA_Abort+0x468>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <HAL_DMA_Abort+0x46c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d018      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_DMA_Abort+0x470>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_DMA_Abort+0x474>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_DMA_Abort+0x478>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_DMA_Abort+0x47c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Abort+0x422>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <HAL_DMA_Abort+0x480>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_DMA_Abort+0x426>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_DMA_Abort+0x428>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d02b      	beq.n	80022d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	60fb      	str	r3, [r7, #12]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	223f      	movs	r2, #63	; 0x3f
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	e02a      	b.n	80022ee <HAL_DMA_Abort+0x49a>
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	40020040 	.word	0x40020040
 80022a4:	40020058 	.word	0x40020058
 80022a8:	40020070 	.word	0x40020070
 80022ac:	40020088 	.word	0x40020088
 80022b0:	400200a0 	.word	0x400200a0
 80022b4:	400200b8 	.word	0x400200b8
 80022b8:	40020410 	.word	0x40020410
 80022bc:	40020428 	.word	0x40020428
 80022c0:	40020440 	.word	0x40020440
 80022c4:	40020458 	.word	0x40020458
 80022c8:	40020470 	.word	0x40020470
 80022cc:	40020488 	.word	0x40020488
 80022d0:	400204a0 	.word	0x400204a0
 80022d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	60bb      	str	r3, [r7, #8]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2201      	movs	r2, #1
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_DMA_Abort+0x5dc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d072      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a4d      	ldr	r2, [pc, #308]	; (8002434 <HAL_DMA_Abort+0x5e0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d06d      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a4c      	ldr	r2, [pc, #304]	; (8002438 <HAL_DMA_Abort+0x5e4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d068      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a4a      	ldr	r2, [pc, #296]	; (800243c <HAL_DMA_Abort+0x5e8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d063      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a49      	ldr	r2, [pc, #292]	; (8002440 <HAL_DMA_Abort+0x5ec>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d05e      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a47      	ldr	r2, [pc, #284]	; (8002444 <HAL_DMA_Abort+0x5f0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d059      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a46      	ldr	r2, [pc, #280]	; (8002448 <HAL_DMA_Abort+0x5f4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d054      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a44      	ldr	r2, [pc, #272]	; (800244c <HAL_DMA_Abort+0x5f8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d04f      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a43      	ldr	r2, [pc, #268]	; (8002450 <HAL_DMA_Abort+0x5fc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d04a      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a41      	ldr	r2, [pc, #260]	; (8002454 <HAL_DMA_Abort+0x600>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d045      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a40      	ldr	r2, [pc, #256]	; (8002458 <HAL_DMA_Abort+0x604>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d040      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a3e      	ldr	r2, [pc, #248]	; (800245c <HAL_DMA_Abort+0x608>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d03b      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <HAL_DMA_Abort+0x60c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d036      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3b      	ldr	r2, [pc, #236]	; (8002464 <HAL_DMA_Abort+0x610>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d031      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <HAL_DMA_Abort+0x614>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d02c      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a38      	ldr	r2, [pc, #224]	; (800246c <HAL_DMA_Abort+0x618>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d027      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a37      	ldr	r2, [pc, #220]	; (8002470 <HAL_DMA_Abort+0x61c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a35      	ldr	r2, [pc, #212]	; (8002474 <HAL_DMA_Abort+0x620>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a34      	ldr	r2, [pc, #208]	; (8002478 <HAL_DMA_Abort+0x624>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d018      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a32      	ldr	r2, [pc, #200]	; (800247c <HAL_DMA_Abort+0x628>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a31      	ldr	r2, [pc, #196]	; (8002480 <HAL_DMA_Abort+0x62c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <HAL_DMA_Abort+0x630>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2e      	ldr	r2, [pc, #184]	; (8002488 <HAL_DMA_Abort+0x634>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_DMA_Abort+0x58a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2c      	ldr	r2, [pc, #176]	; (800248c <HAL_DMA_Abort+0x638>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_DMA_Abort+0x58e>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_DMA_Abort+0x590>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d015      	beq.n	8002414 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00c      	beq.n	8002414 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002412:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40020010 	.word	0x40020010
 8002434:	40020028 	.word	0x40020028
 8002438:	40020040 	.word	0x40020040
 800243c:	40020058 	.word	0x40020058
 8002440:	40020070 	.word	0x40020070
 8002444:	40020088 	.word	0x40020088
 8002448:	400200a0 	.word	0x400200a0
 800244c:	400200b8 	.word	0x400200b8
 8002450:	40020410 	.word	0x40020410
 8002454:	40020428 	.word	0x40020428
 8002458:	40020440 	.word	0x40020440
 800245c:	40020458 	.word	0x40020458
 8002460:	40020470 	.word	0x40020470
 8002464:	40020488 	.word	0x40020488
 8002468:	400204a0 	.word	0x400204a0
 800246c:	400204b8 	.word	0x400204b8
 8002470:	58025408 	.word	0x58025408
 8002474:	5802541c 	.word	0x5802541c
 8002478:	58025430 	.word	0x58025430
 800247c:	58025444 	.word	0x58025444
 8002480:	58025458 	.word	0x58025458
 8002484:	5802546c 	.word	0x5802546c
 8002488:	58025480 	.word	0x58025480
 800248c:	58025494 	.word	0x58025494

08002490 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e205      	b.n	80028ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d004      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e1fa      	b.n	80028ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a8c      	ldr	r2, [pc, #560]	; (80026f0 <HAL_DMA_Abort_IT+0x260>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d04a      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a8b      	ldr	r2, [pc, #556]	; (80026f4 <HAL_DMA_Abort_IT+0x264>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d045      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a89      	ldr	r2, [pc, #548]	; (80026f8 <HAL_DMA_Abort_IT+0x268>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d040      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a88      	ldr	r2, [pc, #544]	; (80026fc <HAL_DMA_Abort_IT+0x26c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d03b      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a86      	ldr	r2, [pc, #536]	; (8002700 <HAL_DMA_Abort_IT+0x270>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d036      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a85      	ldr	r2, [pc, #532]	; (8002704 <HAL_DMA_Abort_IT+0x274>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d031      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a83      	ldr	r2, [pc, #524]	; (8002708 <HAL_DMA_Abort_IT+0x278>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02c      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a82      	ldr	r2, [pc, #520]	; (800270c <HAL_DMA_Abort_IT+0x27c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d027      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a80      	ldr	r2, [pc, #512]	; (8002710 <HAL_DMA_Abort_IT+0x280>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d022      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7f      	ldr	r2, [pc, #508]	; (8002714 <HAL_DMA_Abort_IT+0x284>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d01d      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a7d      	ldr	r2, [pc, #500]	; (8002718 <HAL_DMA_Abort_IT+0x288>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d018      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7c      	ldr	r2, [pc, #496]	; (800271c <HAL_DMA_Abort_IT+0x28c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7a      	ldr	r2, [pc, #488]	; (8002720 <HAL_DMA_Abort_IT+0x290>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00e      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a79      	ldr	r2, [pc, #484]	; (8002724 <HAL_DMA_Abort_IT+0x294>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a77      	ldr	r2, [pc, #476]	; (8002728 <HAL_DMA_Abort_IT+0x298>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a76      	ldr	r2, [pc, #472]	; (800272c <HAL_DMA_Abort_IT+0x29c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_DMA_Abort_IT+0xcc>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_DMA_Abort_IT+0xce>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d065      	beq.n	800262e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2204      	movs	r2, #4
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a60      	ldr	r2, [pc, #384]	; (80026f0 <HAL_DMA_Abort_IT+0x260>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d04a      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5e      	ldr	r2, [pc, #376]	; (80026f4 <HAL_DMA_Abort_IT+0x264>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d045      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a5d      	ldr	r2, [pc, #372]	; (80026f8 <HAL_DMA_Abort_IT+0x268>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d040      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5b      	ldr	r2, [pc, #364]	; (80026fc <HAL_DMA_Abort_IT+0x26c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d03b      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a5a      	ldr	r2, [pc, #360]	; (8002700 <HAL_DMA_Abort_IT+0x270>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d036      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_DMA_Abort_IT+0x274>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d031      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a57      	ldr	r2, [pc, #348]	; (8002708 <HAL_DMA_Abort_IT+0x278>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d02c      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a55      	ldr	r2, [pc, #340]	; (800270c <HAL_DMA_Abort_IT+0x27c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d027      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a54      	ldr	r2, [pc, #336]	; (8002710 <HAL_DMA_Abort_IT+0x280>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_DMA_Abort_IT+0x284>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01d      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a51      	ldr	r2, [pc, #324]	; (8002718 <HAL_DMA_Abort_IT+0x288>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d018      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	; (800271c <HAL_DMA_Abort_IT+0x28c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4e      	ldr	r2, [pc, #312]	; (8002720 <HAL_DMA_Abort_IT+0x290>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_DMA_Abort_IT+0x294>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <HAL_DMA_Abort_IT+0x298>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_DMA_Abort_IT+0x17a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_DMA_Abort_IT+0x29c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d108      	bne.n	800261c <HAL_DMA_Abort_IT+0x18c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e147      	b.n	80028ac <HAL_DMA_Abort_IT+0x41c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e13e      	b.n	80028ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	f022 020e 	bic.w	r2, r2, #14
 800263c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2b      	ldr	r2, [pc, #172]	; (80026f0 <HAL_DMA_Abort_IT+0x260>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d04a      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <HAL_DMA_Abort_IT+0x264>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d045      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <HAL_DMA_Abort_IT+0x268>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d040      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_DMA_Abort_IT+0x26c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d03b      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a25      	ldr	r2, [pc, #148]	; (8002700 <HAL_DMA_Abort_IT+0x270>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d036      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a23      	ldr	r2, [pc, #140]	; (8002704 <HAL_DMA_Abort_IT+0x274>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d031      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a22      	ldr	r2, [pc, #136]	; (8002708 <HAL_DMA_Abort_IT+0x278>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d02c      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <HAL_DMA_Abort_IT+0x27c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d027      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_DMA_Abort_IT+0x280>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d022      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_DMA_Abort_IT+0x284>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01d      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_DMA_Abort_IT+0x288>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d018      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_DMA_Abort_IT+0x28c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a19      	ldr	r2, [pc, #100]	; (8002720 <HAL_DMA_Abort_IT+0x290>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00e      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a17      	ldr	r2, [pc, #92]	; (8002724 <HAL_DMA_Abort_IT+0x294>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_DMA_Abort_IT+0x298>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_DMA_Abort_IT+0x24e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <HAL_DMA_Abort_IT+0x29c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d128      	bne.n	8002730 <HAL_DMA_Abort_IT+0x2a0>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e027      	b.n	8002740 <HAL_DMA_Abort_IT+0x2b0>
 80026f0:	40020010 	.word	0x40020010
 80026f4:	40020028 	.word	0x40020028
 80026f8:	40020040 	.word	0x40020040
 80026fc:	40020058 	.word	0x40020058
 8002700:	40020070 	.word	0x40020070
 8002704:	40020088 	.word	0x40020088
 8002708:	400200a0 	.word	0x400200a0
 800270c:	400200b8 	.word	0x400200b8
 8002710:	40020410 	.word	0x40020410
 8002714:	40020428 	.word	0x40020428
 8002718:	40020440 	.word	0x40020440
 800271c:	40020458 	.word	0x40020458
 8002720:	40020470 	.word	0x40020470
 8002724:	40020488 	.word	0x40020488
 8002728:	400204a0 	.word	0x400204a0
 800272c:	400204b8 	.word	0x400204b8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5c      	ldr	r2, [pc, #368]	; (80028b8 <HAL_DMA_Abort_IT+0x428>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d072      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a5b      	ldr	r2, [pc, #364]	; (80028bc <HAL_DMA_Abort_IT+0x42c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d06d      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a59      	ldr	r2, [pc, #356]	; (80028c0 <HAL_DMA_Abort_IT+0x430>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d068      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_DMA_Abort_IT+0x434>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d063      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a56      	ldr	r2, [pc, #344]	; (80028c8 <HAL_DMA_Abort_IT+0x438>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d05e      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a55      	ldr	r2, [pc, #340]	; (80028cc <HAL_DMA_Abort_IT+0x43c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d059      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a53      	ldr	r2, [pc, #332]	; (80028d0 <HAL_DMA_Abort_IT+0x440>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d054      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_DMA_Abort_IT+0x444>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04f      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_DMA_Abort_IT+0x448>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d04a      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_DMA_Abort_IT+0x44c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d045      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a4d      	ldr	r2, [pc, #308]	; (80028e0 <HAL_DMA_Abort_IT+0x450>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d040      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a4c      	ldr	r2, [pc, #304]	; (80028e4 <HAL_DMA_Abort_IT+0x454>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d03b      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a4a      	ldr	r2, [pc, #296]	; (80028e8 <HAL_DMA_Abort_IT+0x458>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d036      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_DMA_Abort_IT+0x45c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d031      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a47      	ldr	r2, [pc, #284]	; (80028f0 <HAL_DMA_Abort_IT+0x460>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02c      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a46      	ldr	r2, [pc, #280]	; (80028f4 <HAL_DMA_Abort_IT+0x464>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d027      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a44      	ldr	r2, [pc, #272]	; (80028f8 <HAL_DMA_Abort_IT+0x468>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d022      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_DMA_Abort_IT+0x46c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d01d      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a41      	ldr	r2, [pc, #260]	; (8002900 <HAL_DMA_Abort_IT+0x470>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d018      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a40      	ldr	r2, [pc, #256]	; (8002904 <HAL_DMA_Abort_IT+0x474>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a3e      	ldr	r2, [pc, #248]	; (8002908 <HAL_DMA_Abort_IT+0x478>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00e      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a3d      	ldr	r2, [pc, #244]	; (800290c <HAL_DMA_Abort_IT+0x47c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <HAL_DMA_Abort_IT+0x480>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_DMA_Abort_IT+0x3a0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_DMA_Abort_IT+0x484>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_DMA_Abort_IT+0x3a4>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_DMA_Abort_IT+0x3a6>
 8002834:	2300      	movs	r3, #0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d028      	beq.n	800288c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002848:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2201      	movs	r2, #1
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002868:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00c      	beq.n	800288c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002880:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800288a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40020010 	.word	0x40020010
 80028bc:	40020028 	.word	0x40020028
 80028c0:	40020040 	.word	0x40020040
 80028c4:	40020058 	.word	0x40020058
 80028c8:	40020070 	.word	0x40020070
 80028cc:	40020088 	.word	0x40020088
 80028d0:	400200a0 	.word	0x400200a0
 80028d4:	400200b8 	.word	0x400200b8
 80028d8:	40020410 	.word	0x40020410
 80028dc:	40020428 	.word	0x40020428
 80028e0:	40020440 	.word	0x40020440
 80028e4:	40020458 	.word	0x40020458
 80028e8:	40020470 	.word	0x40020470
 80028ec:	40020488 	.word	0x40020488
 80028f0:	400204a0 	.word	0x400204a0
 80028f4:	400204b8 	.word	0x400204b8
 80028f8:	58025408 	.word	0x58025408
 80028fc:	5802541c 	.word	0x5802541c
 8002900:	58025430 	.word	0x58025430
 8002904:	58025444 	.word	0x58025444
 8002908:	58025458 	.word	0x58025458
 800290c:	5802546c 	.word	0x5802546c
 8002910:	58025480 	.word	0x58025480
 8002914:	58025494 	.word	0x58025494

08002918 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002924:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_DMA_IRQHandler+0x1ac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a67      	ldr	r2, [pc, #412]	; (8002ac8 <HAL_DMA_IRQHandler+0x1b0>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0a9b      	lsrs	r3, r3, #10
 8002930:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5f      	ldr	r2, [pc, #380]	; (8002acc <HAL_DMA_IRQHandler+0x1b4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d04a      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5d      	ldr	r2, [pc, #372]	; (8002ad0 <HAL_DMA_IRQHandler+0x1b8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d045      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a5c      	ldr	r2, [pc, #368]	; (8002ad4 <HAL_DMA_IRQHandler+0x1bc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d040      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a5a      	ldr	r2, [pc, #360]	; (8002ad8 <HAL_DMA_IRQHandler+0x1c0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d03b      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a59      	ldr	r2, [pc, #356]	; (8002adc <HAL_DMA_IRQHandler+0x1c4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d036      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a57      	ldr	r2, [pc, #348]	; (8002ae0 <HAL_DMA_IRQHandler+0x1c8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d031      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a56      	ldr	r2, [pc, #344]	; (8002ae4 <HAL_DMA_IRQHandler+0x1cc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d02c      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <HAL_DMA_IRQHandler+0x1d0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d027      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a53      	ldr	r2, [pc, #332]	; (8002aec <HAL_DMA_IRQHandler+0x1d4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a51      	ldr	r2, [pc, #324]	; (8002af0 <HAL_DMA_IRQHandler+0x1d8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <HAL_DMA_IRQHandler+0x1dc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4e      	ldr	r2, [pc, #312]	; (8002af8 <HAL_DMA_IRQHandler+0x1e0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a4d      	ldr	r2, [pc, #308]	; (8002afc <HAL_DMA_IRQHandler+0x1e4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a4b      	ldr	r2, [pc, #300]	; (8002b00 <HAL_DMA_IRQHandler+0x1e8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a4a      	ldr	r2, [pc, #296]	; (8002b04 <HAL_DMA_IRQHandler+0x1ec>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_IRQHandler+0xd2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a48      	ldr	r2, [pc, #288]	; (8002b08 <HAL_DMA_IRQHandler+0x1f0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_DMA_IRQHandler+0xd6>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_DMA_IRQHandler+0xd8>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 842b 	beq.w	800324c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2208      	movs	r2, #8
 8002a00:	409a      	lsls	r2, r3
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80a2 	beq.w	8002b50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2e      	ldr	r2, [pc, #184]	; (8002acc <HAL_DMA_IRQHandler+0x1b4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d04a      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2d      	ldr	r2, [pc, #180]	; (8002ad0 <HAL_DMA_IRQHandler+0x1b8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d045      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2b      	ldr	r2, [pc, #172]	; (8002ad4 <HAL_DMA_IRQHandler+0x1bc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d040      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2a      	ldr	r2, [pc, #168]	; (8002ad8 <HAL_DMA_IRQHandler+0x1c0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d03b      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a28      	ldr	r2, [pc, #160]	; (8002adc <HAL_DMA_IRQHandler+0x1c4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d036      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <HAL_DMA_IRQHandler+0x1c8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d031      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <HAL_DMA_IRQHandler+0x1cc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <HAL_DMA_IRQHandler+0x1d0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d027      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a22      	ldr	r2, [pc, #136]	; (8002aec <HAL_DMA_IRQHandler+0x1d4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d022      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <HAL_DMA_IRQHandler+0x1d8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d01d      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <HAL_DMA_IRQHandler+0x1dc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d018      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_DMA_IRQHandler+0x1e0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_DMA_IRQHandler+0x1e4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <HAL_DMA_IRQHandler+0x1e8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <HAL_DMA_IRQHandler+0x1ec>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_IRQHandler+0x194>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_DMA_IRQHandler+0x1f0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d12f      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x1f4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf14      	ite	ne
 8002aba:	2301      	movne	r3, #1
 8002abc:	2300      	moveq	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e02e      	b.n	8002b20 <HAL_DMA_IRQHandler+0x208>
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	1b4e81b5 	.word	0x1b4e81b5
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	f022 0204 	bic.w	r2, r2, #4
 8002b32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d06e      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a69      	ldr	r2, [pc, #420]	; (8002d10 <HAL_DMA_IRQHandler+0x3f8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d04a      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a67      	ldr	r2, [pc, #412]	; (8002d14 <HAL_DMA_IRQHandler+0x3fc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d045      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a66      	ldr	r2, [pc, #408]	; (8002d18 <HAL_DMA_IRQHandler+0x400>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d040      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a64      	ldr	r2, [pc, #400]	; (8002d1c <HAL_DMA_IRQHandler+0x404>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d03b      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_DMA_IRQHandler+0x408>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d036      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a61      	ldr	r2, [pc, #388]	; (8002d24 <HAL_DMA_IRQHandler+0x40c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d031      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a60      	ldr	r2, [pc, #384]	; (8002d28 <HAL_DMA_IRQHandler+0x410>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d02c      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5e      	ldr	r2, [pc, #376]	; (8002d2c <HAL_DMA_IRQHandler+0x414>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d027      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_DMA_IRQHandler+0x418>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5b      	ldr	r2, [pc, #364]	; (8002d34 <HAL_DMA_IRQHandler+0x41c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5a      	ldr	r2, [pc, #360]	; (8002d38 <HAL_DMA_IRQHandler+0x420>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d018      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <HAL_DMA_IRQHandler+0x424>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a57      	ldr	r2, [pc, #348]	; (8002d40 <HAL_DMA_IRQHandler+0x428>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a55      	ldr	r2, [pc, #340]	; (8002d44 <HAL_DMA_IRQHandler+0x42c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d009      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a54      	ldr	r2, [pc, #336]	; (8002d48 <HAL_DMA_IRQHandler+0x430>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2ee>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_DMA_IRQHandler+0x434>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10a      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x304>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e003      	b.n	8002c24 <HAL_DMA_IRQHandler+0x30c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00d      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2201      	movs	r2, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f043 0202 	orr.w	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 808f 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <HAL_DMA_IRQHandler+0x3f8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d04a      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <HAL_DMA_IRQHandler+0x3fc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d045      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <HAL_DMA_IRQHandler+0x400>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d040      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <HAL_DMA_IRQHandler+0x404>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d03b      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <HAL_DMA_IRQHandler+0x408>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d036      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <HAL_DMA_IRQHandler+0x40c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d031      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <HAL_DMA_IRQHandler+0x410>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d02c      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <HAL_DMA_IRQHandler+0x414>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d027      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a20      	ldr	r2, [pc, #128]	; (8002d30 <HAL_DMA_IRQHandler+0x418>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d022      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <HAL_DMA_IRQHandler+0x41c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01d      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_DMA_IRQHandler+0x420>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d018      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_DMA_IRQHandler+0x424>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_DMA_IRQHandler+0x428>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00e      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_DMA_IRQHandler+0x42c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d009      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_DMA_IRQHandler+0x430>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d004      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x3e2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_DMA_IRQHandler+0x434>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12a      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x438>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e023      	b.n	8002d58 <HAL_DMA_IRQHandler+0x440>
 8002d10:	40020010 	.word	0x40020010
 8002d14:	40020028 	.word	0x40020028
 8002d18:	40020040 	.word	0x40020040
 8002d1c:	40020058 	.word	0x40020058
 8002d20:	40020070 	.word	0x40020070
 8002d24:	40020088 	.word	0x40020088
 8002d28:	400200a0 	.word	0x400200a0
 8002d2c:	400200b8 	.word	0x400200b8
 8002d30:	40020410 	.word	0x40020410
 8002d34:	40020428 	.word	0x40020428
 8002d38:	40020440 	.word	0x40020440
 8002d3c:	40020458 	.word	0x40020458
 8002d40:	40020470 	.word	0x40020470
 8002d44:	40020488 	.word	0x40020488
 8002d48:	400204a0 	.word	0x400204a0
 8002d4c:	400204b8 	.word	0x400204b8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2204      	movs	r2, #4
 8002d66:	409a      	lsls	r2, r3
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2210      	movs	r2, #16
 8002d82:	409a      	lsls	r2, r3
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80a6 	beq.w	8002eda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a85      	ldr	r2, [pc, #532]	; (8002fa8 <HAL_DMA_IRQHandler+0x690>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d04a      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a83      	ldr	r2, [pc, #524]	; (8002fac <HAL_DMA_IRQHandler+0x694>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d045      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a82      	ldr	r2, [pc, #520]	; (8002fb0 <HAL_DMA_IRQHandler+0x698>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d040      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a80      	ldr	r2, [pc, #512]	; (8002fb4 <HAL_DMA_IRQHandler+0x69c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d03b      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7f      	ldr	r2, [pc, #508]	; (8002fb8 <HAL_DMA_IRQHandler+0x6a0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d036      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a7d      	ldr	r2, [pc, #500]	; (8002fbc <HAL_DMA_IRQHandler+0x6a4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7c      	ldr	r2, [pc, #496]	; (8002fc0 <HAL_DMA_IRQHandler+0x6a8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d02c      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a7a      	ldr	r2, [pc, #488]	; (8002fc4 <HAL_DMA_IRQHandler+0x6ac>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d027      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a79      	ldr	r2, [pc, #484]	; (8002fc8 <HAL_DMA_IRQHandler+0x6b0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <HAL_DMA_IRQHandler+0x6b4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01d      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a76      	ldr	r2, [pc, #472]	; (8002fd0 <HAL_DMA_IRQHandler+0x6b8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a74      	ldr	r2, [pc, #464]	; (8002fd4 <HAL_DMA_IRQHandler+0x6bc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a73      	ldr	r2, [pc, #460]	; (8002fd8 <HAL_DMA_IRQHandler+0x6c0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a71      	ldr	r2, [pc, #452]	; (8002fdc <HAL_DMA_IRQHandler+0x6c4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a70      	ldr	r2, [pc, #448]	; (8002fe0 <HAL_DMA_IRQHandler+0x6c8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x516>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a6e      	ldr	r2, [pc, #440]	; (8002fe4 <HAL_DMA_IRQHandler+0x6cc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10a      	bne.n	8002e44 <HAL_DMA_IRQHandler+0x52c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e009      	b.n	8002e58 <HAL_DMA_IRQHandler+0x540>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d03e      	beq.n	8002eda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2210      	movs	r2, #16
 8002e66:	409a      	lsls	r2, r3
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d108      	bne.n	8002e9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d024      	beq.n	8002eda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
 8002e98:	e01f      	b.n	8002eda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01b      	beq.n	8002eda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
 8002eaa:	e016      	b.n	8002eda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	f022 0208 	bic.w	r2, r2, #8
 8002ec8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8110 	beq.w	8003110 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_DMA_IRQHandler+0x690>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d04a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <HAL_DMA_IRQHandler+0x694>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d045      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <HAL_DMA_IRQHandler+0x698>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d040      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_DMA_IRQHandler+0x69c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d03b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_DMA_IRQHandler+0x6a0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d036      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a25      	ldr	r2, [pc, #148]	; (8002fbc <HAL_DMA_IRQHandler+0x6a4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d031      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_DMA_IRQHandler+0x6a8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02c      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <HAL_DMA_IRQHandler+0x6ac>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d027      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a20      	ldr	r2, [pc, #128]	; (8002fc8 <HAL_DMA_IRQHandler+0x6b0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d022      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <HAL_DMA_IRQHandler+0x6b4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d01d      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_DMA_IRQHandler+0x6b8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d018      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <HAL_DMA_IRQHandler+0x6bc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <HAL_DMA_IRQHandler+0x6c0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00e      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <HAL_DMA_IRQHandler+0x6c4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_DMA_IRQHandler+0x6c8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x678>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_DMA_IRQHandler+0x6cc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d12b      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x6d0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e02a      	b.n	8002ffc <HAL_DMA_IRQHandler+0x6e4>
 8002fa6:	bf00      	nop
 8002fa8:	40020010 	.word	0x40020010
 8002fac:	40020028 	.word	0x40020028
 8002fb0:	40020040 	.word	0x40020040
 8002fb4:	40020058 	.word	0x40020058
 8002fb8:	40020070 	.word	0x40020070
 8002fbc:	40020088 	.word	0x40020088
 8002fc0:	400200a0 	.word	0x400200a0
 8002fc4:	400200b8 	.word	0x400200b8
 8002fc8:	40020410 	.word	0x40020410
 8002fcc:	40020428 	.word	0x40020428
 8002fd0:	40020440 	.word	0x40020440
 8002fd4:	40020458 	.word	0x40020458
 8002fd8:	40020470 	.word	0x40020470
 8002fdc:	40020488 	.word	0x40020488
 8002fe0:	400204a0 	.word	0x400204a0
 8002fe4:	400204b8 	.word	0x400204b8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8087 	beq.w	8003110 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2220      	movs	r2, #32
 800300c:	409a      	lsls	r2, r3
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b04      	cmp	r3, #4
 800301c:	d139      	bne.n	8003092 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	f022 0216 	bic.w	r2, r2, #22
 800302c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	6952      	ldr	r2, [r2, #20]
 8003038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800303c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <HAL_DMA_IRQHandler+0x736>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f022 0208 	bic.w	r2, r2, #8
 800305c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	223f      	movs	r2, #63	; 0x3f
 8003068:	409a      	lsls	r2, r3
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 834a 	beq.w	800371c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
          }
          return;
 8003090:	e344      	b.n	800371c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d018      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d02c      	beq.n	8003110 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
 80030be:	e027      	b.n	8003110 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d023      	beq.n	8003110 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
 80030d0:	e01e      	b.n	8003110 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10f      	bne.n	8003100 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	f022 0210 	bic.w	r2, r2, #16
 80030ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8306 	beq.w	8003726 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8088 	beq.w	8003238 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2204      	movs	r2, #4
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a7a      	ldr	r2, [pc, #488]	; (8003320 <HAL_DMA_IRQHandler+0xa08>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d04a      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a79      	ldr	r2, [pc, #484]	; (8003324 <HAL_DMA_IRQHandler+0xa0c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d045      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a77      	ldr	r2, [pc, #476]	; (8003328 <HAL_DMA_IRQHandler+0xa10>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d040      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a76      	ldr	r2, [pc, #472]	; (800332c <HAL_DMA_IRQHandler+0xa14>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d03b      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a74      	ldr	r2, [pc, #464]	; (8003330 <HAL_DMA_IRQHandler+0xa18>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d036      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a73      	ldr	r2, [pc, #460]	; (8003334 <HAL_DMA_IRQHandler+0xa1c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d031      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a71      	ldr	r2, [pc, #452]	; (8003338 <HAL_DMA_IRQHandler+0xa20>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02c      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a70      	ldr	r2, [pc, #448]	; (800333c <HAL_DMA_IRQHandler+0xa24>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d027      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a6e      	ldr	r2, [pc, #440]	; (8003340 <HAL_DMA_IRQHandler+0xa28>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d022      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a6d      	ldr	r2, [pc, #436]	; (8003344 <HAL_DMA_IRQHandler+0xa2c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d01d      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6b      	ldr	r2, [pc, #428]	; (8003348 <HAL_DMA_IRQHandler+0xa30>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d018      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6a      	ldr	r2, [pc, #424]	; (800334c <HAL_DMA_IRQHandler+0xa34>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d013      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a68      	ldr	r2, [pc, #416]	; (8003350 <HAL_DMA_IRQHandler+0xa38>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00e      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a67      	ldr	r2, [pc, #412]	; (8003354 <HAL_DMA_IRQHandler+0xa3c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a65      	ldr	r2, [pc, #404]	; (8003358 <HAL_DMA_IRQHandler+0xa40>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x8b8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a64      	ldr	r2, [pc, #400]	; (800335c <HAL_DMA_IRQHandler+0xa44>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d108      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x8ca>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e007      	b.n	80031f2 <HAL_DMA_IRQHandler+0x8da>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d807      	bhi.n	800320e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f2      	bne.n	80031f2 <HAL_DMA_IRQHandler+0x8da>
 800320c:	e000      	b.n	8003210 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800320e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2203      	movs	r2, #3
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003226:	e003      	b.n	8003230 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8272 	beq.w	8003726 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	4798      	blx	r3
 800324a:	e26c      	b.n	8003726 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a43      	ldr	r2, [pc, #268]	; (8003360 <HAL_DMA_IRQHandler+0xa48>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d022      	beq.n	800329c <HAL_DMA_IRQHandler+0x984>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a42      	ldr	r2, [pc, #264]	; (8003364 <HAL_DMA_IRQHandler+0xa4c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d01d      	beq.n	800329c <HAL_DMA_IRQHandler+0x984>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a40      	ldr	r2, [pc, #256]	; (8003368 <HAL_DMA_IRQHandler+0xa50>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d018      	beq.n	800329c <HAL_DMA_IRQHandler+0x984>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3f      	ldr	r2, [pc, #252]	; (800336c <HAL_DMA_IRQHandler+0xa54>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <HAL_DMA_IRQHandler+0x984>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <HAL_DMA_IRQHandler+0xa58>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00e      	beq.n	800329c <HAL_DMA_IRQHandler+0x984>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3c      	ldr	r2, [pc, #240]	; (8003374 <HAL_DMA_IRQHandler+0xa5c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_DMA_IRQHandler+0x984>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3a      	ldr	r2, [pc, #232]	; (8003378 <HAL_DMA_IRQHandler+0xa60>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_DMA_IRQHandler+0x984>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a39      	ldr	r2, [pc, #228]	; (800337c <HAL_DMA_IRQHandler+0xa64>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x988>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_DMA_IRQHandler+0x98a>
 80032a0:	2300      	movs	r3, #0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 823f 	beq.w	8003726 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2204      	movs	r2, #4
 80032ba:	409a      	lsls	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80cd 	beq.w	8003460 <HAL_DMA_IRQHandler+0xb48>
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80c7 	beq.w	8003460 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2204      	movs	r2, #4
 80032dc:	409a      	lsls	r2, r3
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d049      	beq.n	8003380 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8210 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003308:	e20a      	b.n	8003720 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8206 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800331c:	e200      	b.n	8003720 <HAL_DMA_IRQHandler+0xe08>
 800331e:	bf00      	nop
 8003320:	40020010 	.word	0x40020010
 8003324:	40020028 	.word	0x40020028
 8003328:	40020040 	.word	0x40020040
 800332c:	40020058 	.word	0x40020058
 8003330:	40020070 	.word	0x40020070
 8003334:	40020088 	.word	0x40020088
 8003338:	400200a0 	.word	0x400200a0
 800333c:	400200b8 	.word	0x400200b8
 8003340:	40020410 	.word	0x40020410
 8003344:	40020428 	.word	0x40020428
 8003348:	40020440 	.word	0x40020440
 800334c:	40020458 	.word	0x40020458
 8003350:	40020470 	.word	0x40020470
 8003354:	40020488 	.word	0x40020488
 8003358:	400204a0 	.word	0x400204a0
 800335c:	400204b8 	.word	0x400204b8
 8003360:	58025408 	.word	0x58025408
 8003364:	5802541c 	.word	0x5802541c
 8003368:	58025430 	.word	0x58025430
 800336c:	58025444 	.word	0x58025444
 8003370:	58025458 	.word	0x58025458
 8003374:	5802546c 	.word	0x5802546c
 8003378:	58025480 	.word	0x58025480
 800337c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d160      	bne.n	800344c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a8c      	ldr	r2, [pc, #560]	; (80035c0 <HAL_DMA_IRQHandler+0xca8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d04a      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a8a      	ldr	r2, [pc, #552]	; (80035c4 <HAL_DMA_IRQHandler+0xcac>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d045      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a89      	ldr	r2, [pc, #548]	; (80035c8 <HAL_DMA_IRQHandler+0xcb0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d040      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a87      	ldr	r2, [pc, #540]	; (80035cc <HAL_DMA_IRQHandler+0xcb4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d03b      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a86      	ldr	r2, [pc, #536]	; (80035d0 <HAL_DMA_IRQHandler+0xcb8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d036      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a84      	ldr	r2, [pc, #528]	; (80035d4 <HAL_DMA_IRQHandler+0xcbc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a83      	ldr	r2, [pc, #524]	; (80035d8 <HAL_DMA_IRQHandler+0xcc0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d02c      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a81      	ldr	r2, [pc, #516]	; (80035dc <HAL_DMA_IRQHandler+0xcc4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d027      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <HAL_DMA_IRQHandler+0xcc8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d022      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a7e      	ldr	r2, [pc, #504]	; (80035e4 <HAL_DMA_IRQHandler+0xccc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01d      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7d      	ldr	r2, [pc, #500]	; (80035e8 <HAL_DMA_IRQHandler+0xcd0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d018      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a7b      	ldr	r2, [pc, #492]	; (80035ec <HAL_DMA_IRQHandler+0xcd4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7a      	ldr	r2, [pc, #488]	; (80035f0 <HAL_DMA_IRQHandler+0xcd8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a78      	ldr	r2, [pc, #480]	; (80035f4 <HAL_DMA_IRQHandler+0xcdc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a77      	ldr	r2, [pc, #476]	; (80035f8 <HAL_DMA_IRQHandler+0xce0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_DMA_IRQHandler+0xb12>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a75      	ldr	r2, [pc, #468]	; (80035fc <HAL_DMA_IRQHandler+0xce4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <HAL_DMA_IRQHandler+0xb24>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	f022 0208 	bic.w	r2, r2, #8
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e007      	b.n	800344c <HAL_DMA_IRQHandler+0xb34>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8165 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345e:	e15f      	b.n	8003720 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2202      	movs	r2, #2
 800346a:	409a      	lsls	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80c5 	beq.w	8003600 <HAL_DMA_IRQHandler+0xce8>
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80bf 	beq.w	8003600 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2202      	movs	r2, #2
 800348c:	409a      	lsls	r2, r3
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d018      	beq.n	80034ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 813a 	beq.w	8003724 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b8:	e134      	b.n	8003724 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8130 	beq.w	8003724 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034cc:	e12a      	b.n	8003724 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d168      	bne.n	80035aa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a38      	ldr	r2, [pc, #224]	; (80035c0 <HAL_DMA_IRQHandler+0xca8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d04a      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a37      	ldr	r2, [pc, #220]	; (80035c4 <HAL_DMA_IRQHandler+0xcac>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d045      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <HAL_DMA_IRQHandler+0xcb0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d040      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a34      	ldr	r2, [pc, #208]	; (80035cc <HAL_DMA_IRQHandler+0xcb4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d03b      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a32      	ldr	r2, [pc, #200]	; (80035d0 <HAL_DMA_IRQHandler+0xcb8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d036      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_DMA_IRQHandler+0xcbc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d031      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2f      	ldr	r2, [pc, #188]	; (80035d8 <HAL_DMA_IRQHandler+0xcc0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d02c      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2e      	ldr	r2, [pc, #184]	; (80035dc <HAL_DMA_IRQHandler+0xcc4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d027      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <HAL_DMA_IRQHandler+0xcc8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d022      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2b      	ldr	r2, [pc, #172]	; (80035e4 <HAL_DMA_IRQHandler+0xccc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d01d      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <HAL_DMA_IRQHandler+0xcd0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d018      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a28      	ldr	r2, [pc, #160]	; (80035ec <HAL_DMA_IRQHandler+0xcd4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d013      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a26      	ldr	r2, [pc, #152]	; (80035f0 <HAL_DMA_IRQHandler+0xcd8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00e      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a25      	ldr	r2, [pc, #148]	; (80035f4 <HAL_DMA_IRQHandler+0xcdc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d009      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a23      	ldr	r2, [pc, #140]	; (80035f8 <HAL_DMA_IRQHandler+0xce0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc60>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a22      	ldr	r2, [pc, #136]	; (80035fc <HAL_DMA_IRQHandler+0xce4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d108      	bne.n	800358a <HAL_DMA_IRQHandler+0xc72>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	f022 0214 	bic.w	r2, r2, #20
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e007      	b.n	800359a <HAL_DMA_IRQHandler+0xc82>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	f022 020a 	bic.w	r2, r2, #10
 8003598:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80b8 	beq.w	8003724 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035bc:	e0b2      	b.n	8003724 <HAL_DMA_IRQHandler+0xe0c>
 80035be:	bf00      	nop
 80035c0:	40020010 	.word	0x40020010
 80035c4:	40020028 	.word	0x40020028
 80035c8:	40020040 	.word	0x40020040
 80035cc:	40020058 	.word	0x40020058
 80035d0:	40020070 	.word	0x40020070
 80035d4:	40020088 	.word	0x40020088
 80035d8:	400200a0 	.word	0x400200a0
 80035dc:	400200b8 	.word	0x400200b8
 80035e0:	40020410 	.word	0x40020410
 80035e4:	40020428 	.word	0x40020428
 80035e8:	40020440 	.word	0x40020440
 80035ec:	40020458 	.word	0x40020458
 80035f0:	40020470 	.word	0x40020470
 80035f4:	40020488 	.word	0x40020488
 80035f8:	400204a0 	.word	0x400204a0
 80035fc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2208      	movs	r2, #8
 800360a:	409a      	lsls	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8088 	beq.w	8003726 <HAL_DMA_IRQHandler+0xe0e>
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8082 	beq.w	8003726 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a41      	ldr	r2, [pc, #260]	; (800372c <HAL_DMA_IRQHandler+0xe14>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d04a      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3f      	ldr	r2, [pc, #252]	; (8003730 <HAL_DMA_IRQHandler+0xe18>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d045      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3e      	ldr	r2, [pc, #248]	; (8003734 <HAL_DMA_IRQHandler+0xe1c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d040      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3c      	ldr	r2, [pc, #240]	; (8003738 <HAL_DMA_IRQHandler+0xe20>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d03b      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3b      	ldr	r2, [pc, #236]	; (800373c <HAL_DMA_IRQHandler+0xe24>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d036      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a39      	ldr	r2, [pc, #228]	; (8003740 <HAL_DMA_IRQHandler+0xe28>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d031      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a38      	ldr	r2, [pc, #224]	; (8003744 <HAL_DMA_IRQHandler+0xe2c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d02c      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a36      	ldr	r2, [pc, #216]	; (8003748 <HAL_DMA_IRQHandler+0xe30>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d027      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a35      	ldr	r2, [pc, #212]	; (800374c <HAL_DMA_IRQHandler+0xe34>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a33      	ldr	r2, [pc, #204]	; (8003750 <HAL_DMA_IRQHandler+0xe38>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01d      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a32      	ldr	r2, [pc, #200]	; (8003754 <HAL_DMA_IRQHandler+0xe3c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d018      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a30      	ldr	r2, [pc, #192]	; (8003758 <HAL_DMA_IRQHandler+0xe40>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2f      	ldr	r2, [pc, #188]	; (800375c <HAL_DMA_IRQHandler+0xe44>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_DMA_IRQHandler+0xe48>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <HAL_DMA_IRQHandler+0xe4c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xdaa>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <HAL_DMA_IRQHandler+0xe50>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d108      	bne.n	80036d4 <HAL_DMA_IRQHandler+0xdbc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	f022 021c 	bic.w	r2, r2, #28
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e007      	b.n	80036e4 <HAL_DMA_IRQHandler+0xdcc>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	f022 020e 	bic.w	r2, r2, #14
 80036e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2201      	movs	r2, #1
 80036ee:	409a      	lsls	r2, r3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
 800371a:	e004      	b.n	8003726 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800371c:	bf00      	nop
 800371e:	e002      	b.n	8003726 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003724:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8

0800376c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a84      	ldr	r2, [pc, #528]	; (800399c <DMA_SetConfig+0x230>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d072      	beq.n	8003876 <DMA_SetConfig+0x10a>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a82      	ldr	r2, [pc, #520]	; (80039a0 <DMA_SetConfig+0x234>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d06d      	beq.n	8003876 <DMA_SetConfig+0x10a>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a81      	ldr	r2, [pc, #516]	; (80039a4 <DMA_SetConfig+0x238>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d068      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a7f      	ldr	r2, [pc, #508]	; (80039a8 <DMA_SetConfig+0x23c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d063      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7e      	ldr	r2, [pc, #504]	; (80039ac <DMA_SetConfig+0x240>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d05e      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <DMA_SetConfig+0x244>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d059      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7b      	ldr	r2, [pc, #492]	; (80039b4 <DMA_SetConfig+0x248>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d054      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <DMA_SetConfig+0x24c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d04f      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a78      	ldr	r2, [pc, #480]	; (80039bc <DMA_SetConfig+0x250>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d04a      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a76      	ldr	r2, [pc, #472]	; (80039c0 <DMA_SetConfig+0x254>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d045      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a75      	ldr	r2, [pc, #468]	; (80039c4 <DMA_SetConfig+0x258>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d040      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a73      	ldr	r2, [pc, #460]	; (80039c8 <DMA_SetConfig+0x25c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d03b      	beq.n	8003876 <DMA_SetConfig+0x10a>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a72      	ldr	r2, [pc, #456]	; (80039cc <DMA_SetConfig+0x260>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d036      	beq.n	8003876 <DMA_SetConfig+0x10a>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a70      	ldr	r2, [pc, #448]	; (80039d0 <DMA_SetConfig+0x264>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <DMA_SetConfig+0x10a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6f      	ldr	r2, [pc, #444]	; (80039d4 <DMA_SetConfig+0x268>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d02c      	beq.n	8003876 <DMA_SetConfig+0x10a>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a6d      	ldr	r2, [pc, #436]	; (80039d8 <DMA_SetConfig+0x26c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d027      	beq.n	8003876 <DMA_SetConfig+0x10a>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6c      	ldr	r2, [pc, #432]	; (80039dc <DMA_SetConfig+0x270>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <DMA_SetConfig+0x10a>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a6a      	ldr	r2, [pc, #424]	; (80039e0 <DMA_SetConfig+0x274>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01d      	beq.n	8003876 <DMA_SetConfig+0x10a>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a69      	ldr	r2, [pc, #420]	; (80039e4 <DMA_SetConfig+0x278>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <DMA_SetConfig+0x10a>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <DMA_SetConfig+0x27c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <DMA_SetConfig+0x10a>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a66      	ldr	r2, [pc, #408]	; (80039ec <DMA_SetConfig+0x280>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <DMA_SetConfig+0x10a>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a64      	ldr	r2, [pc, #400]	; (80039f0 <DMA_SetConfig+0x284>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <DMA_SetConfig+0x10a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a63      	ldr	r2, [pc, #396]	; (80039f4 <DMA_SetConfig+0x288>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <DMA_SetConfig+0x10a>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a61      	ldr	r2, [pc, #388]	; (80039f8 <DMA_SetConfig+0x28c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <DMA_SetConfig+0x10e>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <DMA_SetConfig+0x110>
 800387a:	2300      	movs	r3, #0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00d      	beq.n	800389c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003888:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800389a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3e      	ldr	r2, [pc, #248]	; (800399c <DMA_SetConfig+0x230>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d04a      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3d      	ldr	r2, [pc, #244]	; (80039a0 <DMA_SetConfig+0x234>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d045      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <DMA_SetConfig+0x238>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d040      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3a      	ldr	r2, [pc, #232]	; (80039a8 <DMA_SetConfig+0x23c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d03b      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a38      	ldr	r2, [pc, #224]	; (80039ac <DMA_SetConfig+0x240>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d036      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a37      	ldr	r2, [pc, #220]	; (80039b0 <DMA_SetConfig+0x244>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d031      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a35      	ldr	r2, [pc, #212]	; (80039b4 <DMA_SetConfig+0x248>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02c      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a34      	ldr	r2, [pc, #208]	; (80039b8 <DMA_SetConfig+0x24c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d027      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a32      	ldr	r2, [pc, #200]	; (80039bc <DMA_SetConfig+0x250>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d022      	beq.n	800393c <DMA_SetConfig+0x1d0>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a31      	ldr	r2, [pc, #196]	; (80039c0 <DMA_SetConfig+0x254>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d01d      	beq.n	800393c <DMA_SetConfig+0x1d0>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <DMA_SetConfig+0x258>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d018      	beq.n	800393c <DMA_SetConfig+0x1d0>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2e      	ldr	r2, [pc, #184]	; (80039c8 <DMA_SetConfig+0x25c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <DMA_SetConfig+0x1d0>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <DMA_SetConfig+0x260>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00e      	beq.n	800393c <DMA_SetConfig+0x1d0>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2b      	ldr	r2, [pc, #172]	; (80039d0 <DMA_SetConfig+0x264>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d009      	beq.n	800393c <DMA_SetConfig+0x1d0>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <DMA_SetConfig+0x268>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <DMA_SetConfig+0x1d0>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <DMA_SetConfig+0x26c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <DMA_SetConfig+0x1d4>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <DMA_SetConfig+0x1d6>
 8003940:	2300      	movs	r3, #0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d05a      	beq.n	80039fc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	223f      	movs	r2, #63	; 0x3f
 8003950:	409a      	lsls	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003964:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d108      	bne.n	8003988 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003986:	e087      	b.n	8003a98 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
}
 8003998:	e07e      	b.n	8003a98 <DMA_SetConfig+0x32c>
 800399a:	bf00      	nop
 800399c:	40020010 	.word	0x40020010
 80039a0:	40020028 	.word	0x40020028
 80039a4:	40020040 	.word	0x40020040
 80039a8:	40020058 	.word	0x40020058
 80039ac:	40020070 	.word	0x40020070
 80039b0:	40020088 	.word	0x40020088
 80039b4:	400200a0 	.word	0x400200a0
 80039b8:	400200b8 	.word	0x400200b8
 80039bc:	40020410 	.word	0x40020410
 80039c0:	40020428 	.word	0x40020428
 80039c4:	40020440 	.word	0x40020440
 80039c8:	40020458 	.word	0x40020458
 80039cc:	40020470 	.word	0x40020470
 80039d0:	40020488 	.word	0x40020488
 80039d4:	400204a0 	.word	0x400204a0
 80039d8:	400204b8 	.word	0x400204b8
 80039dc:	58025408 	.word	0x58025408
 80039e0:	5802541c 	.word	0x5802541c
 80039e4:	58025430 	.word	0x58025430
 80039e8:	58025444 	.word	0x58025444
 80039ec:	58025458 	.word	0x58025458
 80039f0:	5802546c 	.word	0x5802546c
 80039f4:	58025480 	.word	0x58025480
 80039f8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <DMA_SetConfig+0x338>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d022      	beq.n	8003a4c <DMA_SetConfig+0x2e0>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <DMA_SetConfig+0x33c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d01d      	beq.n	8003a4c <DMA_SetConfig+0x2e0>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a25      	ldr	r2, [pc, #148]	; (8003aac <DMA_SetConfig+0x340>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d018      	beq.n	8003a4c <DMA_SetConfig+0x2e0>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a24      	ldr	r2, [pc, #144]	; (8003ab0 <DMA_SetConfig+0x344>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <DMA_SetConfig+0x2e0>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <DMA_SetConfig+0x348>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <DMA_SetConfig+0x2e0>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <DMA_SetConfig+0x34c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d009      	beq.n	8003a4c <DMA_SetConfig+0x2e0>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <DMA_SetConfig+0x350>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <DMA_SetConfig+0x2e0>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <DMA_SetConfig+0x354>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <DMA_SetConfig+0x2e4>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <DMA_SetConfig+0x2e6>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d020      	beq.n	8003a98 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	2201      	movs	r2, #1
 8003a60:	409a      	lsls	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d108      	bne.n	8003a88 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	60da      	str	r2, [r3, #12]
}
 8003a86:	e007      	b.n	8003a98 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	58025408 	.word	0x58025408
 8003aa8:	5802541c 	.word	0x5802541c
 8003aac:	58025430 	.word	0x58025430
 8003ab0:	58025444 	.word	0x58025444
 8003ab4:	58025458 	.word	0x58025458
 8003ab8:	5802546c 	.word	0x5802546c
 8003abc:	58025480 	.word	0x58025480
 8003ac0:	58025494 	.word	0x58025494

08003ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <DMA_CalcBaseAndBitshift+0x118>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d04a      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a41      	ldr	r2, [pc, #260]	; (8003be0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d045      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3f      	ldr	r2, [pc, #252]	; (8003be4 <DMA_CalcBaseAndBitshift+0x120>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d040      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a3e      	ldr	r2, [pc, #248]	; (8003be8 <DMA_CalcBaseAndBitshift+0x124>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d03b      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <DMA_CalcBaseAndBitshift+0x128>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d036      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d031      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a39      	ldr	r2, [pc, #228]	; (8003bf4 <DMA_CalcBaseAndBitshift+0x130>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d02c      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a38      	ldr	r2, [pc, #224]	; (8003bf8 <DMA_CalcBaseAndBitshift+0x134>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d027      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a36      	ldr	r2, [pc, #216]	; (8003bfc <DMA_CalcBaseAndBitshift+0x138>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d022      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a35      	ldr	r2, [pc, #212]	; (8003c00 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d01d      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a33      	ldr	r2, [pc, #204]	; (8003c04 <DMA_CalcBaseAndBitshift+0x140>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d018      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a32      	ldr	r2, [pc, #200]	; (8003c08 <DMA_CalcBaseAndBitshift+0x144>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d013      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a30      	ldr	r2, [pc, #192]	; (8003c0c <DMA_CalcBaseAndBitshift+0x148>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00e      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d009      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <DMA_CalcBaseAndBitshift+0x150>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	; (8003c18 <DMA_CalcBaseAndBitshift+0x154>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <DMA_CalcBaseAndBitshift+0xac>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <DMA_CalcBaseAndBitshift+0xae>
 8003b70:	2300      	movs	r3, #0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d024      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3b10      	subs	r3, #16
 8003b7e:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <DMA_CalcBaseAndBitshift+0x158>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b90:	5cd3      	ldrb	r3, [r2, r3]
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d908      	bls.n	8003bb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <DMA_CalcBaseAndBitshift+0x160>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	1d1a      	adds	r2, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	659a      	str	r2, [r3, #88]	; 0x58
 8003bae:	e00d      	b.n	8003bcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <DMA_CalcBaseAndBitshift+0x160>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbe:	e005      	b.n	8003bcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
 8003c1c:	aaaaaaab 	.word	0xaaaaaaab
 8003c20:	08008f18 	.word	0x08008f18
 8003c24:	fffffc00 	.word	0xfffffc00

08003c28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d120      	bne.n	8003c7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d858      	bhi.n	8003cf6 <DMA_CheckFifoParam+0xce>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <DMA_CheckFifoParam+0x24>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c6f 	.word	0x08003c6f
 8003c54:	08003c5d 	.word	0x08003c5d
 8003c58:	08003cf7 	.word	0x08003cf7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d048      	beq.n	8003cfa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c6c:	e045      	b.n	8003cfa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c76:	d142      	bne.n	8003cfe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c7c:	e03f      	b.n	8003cfe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c86:	d123      	bne.n	8003cd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d838      	bhi.n	8003d02 <DMA_CheckFifoParam+0xda>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <DMA_CheckFifoParam+0x70>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003caf 	.word	0x08003caf
 8003ca0:	08003ca9 	.word	0x08003ca9
 8003ca4:	08003cc1 	.word	0x08003cc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
        break;
 8003cac:	e030      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d025      	beq.n	8003d06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cbe:	e022      	b.n	8003d06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cc8:	d11f      	bne.n	8003d0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cce:	e01c      	b.n	8003d0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d902      	bls.n	8003cde <DMA_CheckFifoParam+0xb6>
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d003      	beq.n	8003ce4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003cdc:	e018      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ce2:	e015      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00e      	beq.n	8003d0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8003cf4:	e00b      	b.n	8003d0e <DMA_CheckFifoParam+0xe6>
        break;
 8003cf6:	bf00      	nop
 8003cf8:	e00a      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e008      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003cfe:	bf00      	nop
 8003d00:	e006      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003d02:	bf00      	nop
 8003d04:	e004      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
    break;
 8003d0e:	bf00      	nop
    }
  }

  return status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop

08003d20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a38      	ldr	r2, [pc, #224]	; (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a36      	ldr	r2, [pc, #216]	; (8003e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a35      	ldr	r2, [pc, #212]	; (8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a33      	ldr	r2, [pc, #204]	; (8003e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a32      	ldr	r2, [pc, #200]	; (8003e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2f      	ldr	r2, [pc, #188]	; (8003e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3b08      	subs	r3, #8
 8003d90:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003dac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003dbc:	e024      	b.n	8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3b10      	subs	r3, #16
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d806      	bhi.n	8003de6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d902      	bls.n	8003de6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3308      	adds	r3, #8
 8003de4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003df8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	2201      	movs	r2, #1
 8003e02:	409a      	lsls	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	58025408 	.word	0x58025408
 8003e18:	5802541c 	.word	0x5802541c
 8003e1c:	58025430 	.word	0x58025430
 8003e20:	58025444 	.word	0x58025444
 8003e24:	58025458 	.word	0x58025458
 8003e28:	5802546c 	.word	0x5802546c
 8003e2c:	58025480 	.word	0x58025480
 8003e30:	58025494 	.word	0x58025494
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	16009600 	.word	0x16009600
 8003e3c:	58025880 	.word	0x58025880
 8003e40:	aaaaaaab 	.word	0xaaaaaaab
 8003e44:	400204b8 	.word	0x400204b8
 8003e48:	4002040f 	.word	0x4002040f
 8003e4c:	10008200 	.word	0x10008200
 8003e50:	40020880 	.word	0x40020880

08003e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d04a      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d847      	bhi.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d022      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d01d      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d018      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a21      	ldr	r2, [pc, #132]	; (8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00e      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003edc:	671a      	str	r2, [r3, #112]	; 0x70
 8003ede:	e009      	b.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ef2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	58025408 	.word	0x58025408
 8003f10:	5802541c 	.word	0x5802541c
 8003f14:	58025430 	.word	0x58025430
 8003f18:	58025444 	.word	0x58025444
 8003f1c:	58025458 	.word	0x58025458
 8003f20:	5802546c 	.word	0x5802546c
 8003f24:	58025480 	.word	0x58025480
 8003f28:	58025494 	.word	0x58025494
 8003f2c:	1600963f 	.word	0x1600963f
 8003f30:	58025940 	.word	0x58025940
 8003f34:	1000823f 	.word	0x1000823f
 8003f38:	40020940 	.word	0x40020940

08003f3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0cb      	b.n	80040e6 <HAL_ETH_Init+0x1aa>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2223      	movs	r2, #35	; 0x23
 8003f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc fd9b 	bl	8000a9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	4a62      	ldr	r2, [pc, #392]	; (80040f0 <HAL_ETH_Init+0x1b4>)
 8003f68:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <HAL_ETH_Init+0x1b4>)
 8003f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f76:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <HAL_ETH_Init+0x1b4>)
 8003f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	7a1b      	ldrb	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f7fd f879 	bl	8001084 <HAL_SYSCFG_ETHInterfaceSelect>
 8003f92:	e003      	b.n	8003f9c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003f94:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f98:	f7fd f874 	bl	8001084 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003f9c:	4b55      	ldr	r3, [pc, #340]	; (80040f4 <HAL_ETH_Init+0x1b8>)
 8003f9e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb8:	f7fd f82a 	bl	8001010 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fbe:	e011      	b.n	8003fe4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fc0:	f7fd f826 	bl	8001010 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fce:	d909      	bls.n	8003fe4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	22e0      	movs	r2, #224	; 0xe0
 8003fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e080      	b.n	80040e6 <HAL_ETH_Init+0x1aa>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e4      	bne.n	8003fc0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f882 	bl	8004100 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681c      	ldr	r4, [r3, #0]
 8004000:	f001 fd12 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_ETH_Init+0x1bc>)
 8004008:	fba3 2302 	umull	r2, r3, r3, r2
 800400c:	0c9b      	lsrs	r3, r3, #18
 800400e:	3b01      	subs	r3, #1
 8004010:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fa6d 	bl	80044f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	f502 5288 	add.w	r2, r2, #4352	; 0x1100
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 800402c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004030:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004034:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_ETH_Init+0x11a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	22e0      	movs	r2, #224	; 0xe0
 800404e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e047      	b.n	80040e6 <HAL_ETH_Init+0x1aa>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004062:	4413      	add	r3, r2
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_ETH_Init+0x1c0>)
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6952      	ldr	r2, [r2, #20]
 800406e:	0052      	lsls	r2, r2, #1
 8004070:	431a      	orrs	r2, r3
 8004072:	f241 1308 	movw	r3, #4360	; 0x1108
 8004076:	440b      	add	r3, r1
 8004078:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fad7 	bl	800462e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fb1c 	bl	80046be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6852      	ldr	r2, [r2, #4]
 800408e:	3205      	adds	r2, #5
 8004090:	7812      	ldrb	r2, [r2, #0]
 8004092:	0212      	lsls	r2, r2, #8
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	6849      	ldr	r1, [r1, #4]
 8004098:	3104      	adds	r1, #4
 800409a:	7809      	ldrb	r1, [r1, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6852      	ldr	r2, [r2, #4]
 80040aa:	3203      	adds	r2, #3
 80040ac:	7812      	ldrb	r2, [r2, #0]
 80040ae:	0611      	lsls	r1, r2, #24
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6852      	ldr	r2, [r2, #4]
 80040b4:	3202      	adds	r2, #2
 80040b6:	7812      	ldrb	r2, [r2, #0]
 80040b8:	0412      	lsls	r2, r2, #16
 80040ba:	4311      	orrs	r1, r2
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6852      	ldr	r2, [r2, #4]
 80040c0:	3201      	adds	r2, #1
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	0212      	lsls	r2, r2, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040c6:	430a      	orrs	r2, r1
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	6849      	ldr	r1, [r1, #4]
 80040cc:	7809      	ldrb	r1, [r1, #0]
 80040ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2210      	movs	r2, #16
 80040e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400
 80040f4:	58000400 	.word	0x58000400
 80040f8:	431bde83 	.word	0x431bde83
 80040fc:	ffff8001 	.word	0xffff8001

08004100 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004110:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004118:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800411a:	f001 fc85 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 800411e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a1e      	ldr	r2, [pc, #120]	; (800419c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d908      	bls.n	800413a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d804      	bhi.n	800413a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e027      	b.n	800418a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d908      	bls.n	8004154 <HAL_ETH_SetMDIOClockRange+0x54>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d804      	bhi.n	8004154 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e01a      	b.n	800418a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d903      	bls.n	8004164 <HAL_ETH_SetMDIOClockRange+0x64>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d911      	bls.n	8004188 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d908      	bls.n	800417e <HAL_ETH_SetMDIOClockRange+0x7e>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <HAL_ETH_SetMDIOClockRange+0xac>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d804      	bhi.n	800417e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e005      	b.n	800418a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e000      	b.n	800418a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004188:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	01312cff 	.word	0x01312cff
 80041a0:	02160ebf 	.word	0x02160ebf
 80041a4:	039386ff 	.word	0x039386ff
 80041a8:	05f5e0ff 	.word	0x05f5e0ff
 80041ac:	08f0d17f 	.word	0x08f0d17f

080041b0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80041c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	791b      	ldrb	r3, [r3, #4]
 80041c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80041ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	7b1b      	ldrb	r3, [r3, #12]
 80041d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	7b5b      	ldrb	r3, [r3, #13]
 80041d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	7b9b      	ldrb	r3, [r3, #14]
 80041e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	7bdb      	ldrb	r3, [r3, #15]
 80041e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041ea:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	7c1b      	ldrb	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <ETH_SetMACConfig+0x4a>
 80041f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80041f8:	e000      	b.n	80041fc <ETH_SetMACConfig+0x4c>
 80041fa:	2300      	movs	r3, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041fc:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	7c5b      	ldrb	r3, [r3, #17]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d102      	bne.n	800420c <ETH_SetMACConfig+0x5c>
 8004206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800420a:	e000      	b.n	800420e <ETH_SetMACConfig+0x5e>
 800420c:	2300      	movs	r3, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800420e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	7c9b      	ldrb	r3, [r3, #18]
 8004214:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004216:	431a      	orrs	r2, r3
               macconf->Speed |
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800421c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	7f1b      	ldrb	r3, [r3, #28]
 8004228:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800422a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	7f5b      	ldrb	r3, [r3, #29]
 8004230:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004232:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	7f9b      	ldrb	r3, [r3, #30]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <ETH_SetMACConfig+0x92>
 800423c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004240:	e000      	b.n	8004244 <ETH_SetMACConfig+0x94>
 8004242:	2300      	movs	r3, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004244:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	7fdb      	ldrb	r3, [r3, #31]
 800424a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800424c:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <ETH_SetMACConfig+0xae>
 8004258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800425c:	e000      	b.n	8004260 <ETH_SetMACConfig+0xb0>
 800425e:	2300      	movs	r3, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004260:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004266:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004270:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	4b55      	ldr	r3, [pc, #340]	; (80043dc <ETH_SetMACConfig+0x22c>)
 8004286:	400b      	ands	r3, r1
 8004288:	68f9      	ldr	r1, [r7, #12]
 800428a:	430b      	orrs	r3, r1
 800428c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800429a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800429c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042b0:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <ETH_SetMACConfig+0x112>
 80042bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042c0:	e000      	b.n	80042c4 <ETH_SetMACConfig+0x114>
 80042c2:	2300      	movs	r3, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	4b41      	ldr	r3, [pc, #260]	; (80043e0 <ETH_SetMACConfig+0x230>)
 80042da:	400b      	ands	r3, r1
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	430b      	orrs	r3, r1
 80042e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68d9      	ldr	r1, [r3, #12]
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <ETH_SetMACConfig+0x234>)
 80042fe:	400b      	ands	r3, r1
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	430b      	orrs	r3, r1
 8004304:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800430c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004312:	431a      	orrs	r2, r3
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <ETH_SetMACConfig+0x172>
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	e000      	b.n	8004324 <ETH_SetMACConfig+0x174>
 8004322:	2300      	movs	r3, #0
               macconf->PauseLowThreshold |
 8004324:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800433a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800433e:	400b      	ands	r3, r1
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	430b      	orrs	r3, r1
 8004344:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800434c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004354:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004366:	f022 0103 	bic.w	r1, r2, #3
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	430a      	orrs	r2, r1
 800436e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f8d2 2d00 	ldr.w	r2, [r2, #3328]	; 0xd00
 800437e:	f022 0172 	bic.w	r1, r2, #114	; 0x72
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004386:	430a      	orrs	r2, r1
 8004388:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <ETH_SetMACConfig+0x1ee>
 800439a:	2340      	movs	r3, #64	; 0x40
 800439c:	e000      	b.n	80043a0 <ETH_SetMACConfig+0x1f0>
 800439e:	2300      	movs	r3, #0
  macregval = (macconf->ReceiveQueueMode |
 80043a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80043a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80043b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	f8d2 2d30 	ldr.w	r2, [r2, #3376]	; 0xd30
 80043c4:	f022 017b 	bic.w	r1, r2, #123	; 0x7b
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	00048083 	.word	0x00048083
 80043e0:	c0f88000 	.word	0xc0f88000
 80043e4:	fffffef0 	.word	0xfffffef0

080043e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b37      	ldr	r3, [pc, #220]	; (80044e0 <ETH_SetDMAConfig+0xf8>)
 8004402:	4013      	ands	r3, r2
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	431a      	orrs	r2, r3
 800440a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800440e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	791b      	ldrb	r3, [r3, #4]
 8004414:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800441a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	7b1b      	ldrb	r3, [r3, #12]
 8004420:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004432:	4413      	add	r3, r2
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <ETH_SetDMAConfig+0xfc>)
 8004438:	4013      	ands	r3, r2
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	431a      	orrs	r2, r3
 800443e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004442:	440b      	add	r3, r1
 8004444:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	7b5b      	ldrb	r3, [r3, #13]
 800444a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <ETH_SetDMAConfig+0x100>)
 8004464:	4013      	ands	r3, r2
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	431a      	orrs	r2, r3
 800446a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800446e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	7d1b      	ldrb	r3, [r3, #20]
 8004478:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800447a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	7f5b      	ldrb	r3, [r3, #29]
 8004480:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004492:	4413      	add	r3, r2
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <ETH_SetDMAConfig+0x104>)
 8004498:	4013      	ands	r3, r2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	431a      	orrs	r2, r3
 800449e:	f241 1304 	movw	r3, #4356	; 0x1104
 80044a2:	440b      	add	r3, r1
 80044a4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	7f1b      	ldrb	r3, [r3, #28]
 80044aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6819      	ldr	r1, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80044c0:	4413      	add	r3, r2
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <ETH_SetDMAConfig+0x108>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	f241 1308 	movw	r3, #4360	; 0x1108
 80044d0:	440b      	add	r3, r1
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	ffff87fd 	.word	0xffff87fd
 80044e4:	ffff2ffe 	.word	0xffff2ffe
 80044e8:	fffec000 	.word	0xfffec000
 80044ec:	ffc0efef 	.word	0xffc0efef
 80044f0:	7fc0ffff 	.word	0x7fc0ffff

080044f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b0a4      	sub	sp, #144	; 0x90
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004502:	2300      	movs	r3, #0
 8004504:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800450c:	2300      	movs	r3, #0
 800450e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004534:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800453c:	2300      	movs	r3, #0
 800453e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004546:	2300      	movs	r3, #0
 8004548:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800454c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004550:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004552:	2300      	movs	r3, #0
 8004554:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004558:	2300      	movs	r3, #0
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800456e:	2300      	movs	r3, #0
 8004570:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004572:	2300      	movs	r3, #0
 8004574:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004576:	2300      	movs	r3, #0
 8004578:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004580:	2300      	movs	r3, #0
 8004582:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800458c:	2320      	movs	r3, #32
 800458e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004598:	2300      	movs	r3, #0
 800459a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800459e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045a8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045b0:	2302      	movs	r3, #2
 80045b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80045ce:	2300      	movs	r3, #0
 80045d0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80045d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fde6 	bl	80041b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80045e8:	2301      	movs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80045fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004602:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800460c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800460e:	2300      	movs	r3, #0
 8004610:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004614:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800461a:	f107 0308 	add.w	r3, r7, #8
 800461e:	4619      	mov	r1, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff fee1 	bl	80043e8 <ETH_SetDMAConfig>
}
 8004626:	bf00      	nop
 8004628:	3790      	adds	r7, #144	; 0x90
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e01d      	b.n	8004678 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68d9      	ldr	r1, [r3, #12]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	440b      	add	r3, r1
 800464c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	3206      	adds	r2, #6
 800466e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3301      	adds	r3, #1
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d9de      	bls.n	800463c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	f241 132c 	movw	r3, #4396	; 0x112c
 800468c:	4413      	add	r3, r2
 800468e:	2203      	movs	r2, #3
 8004690:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4619      	mov	r1, r3
 800469c:	f241 1314 	movw	r3, #4372	; 0x1114
 80046a0:	4413      	add	r3, r2
 80046a2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68d2      	ldr	r2, [r2, #12]
 80046ac:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e023      	b.n	8004714 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6919      	ldr	r1, [r3, #16]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	440b      	add	r3, r1
 80046dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2200      	movs	r2, #0
 8004700:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	3212      	adds	r2, #18
 800470a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d9d8      	bls.n	80046cc <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f241 1330 	movw	r3, #4400	; 0x1130
 8004740:	4413      	add	r3, r2
 8004742:	2203      	movs	r2, #3
 8004744:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	4619      	mov	r1, r3
 8004750:	f241 131c 	movw	r3, #4380	; 0x111c
 8004754:	4413      	add	r3, r2
 8004756:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	3348      	adds	r3, #72	; 0x48
 8004762:	4619      	mov	r1, r3
 8004764:	f241 1328 	movw	r3, #4392	; 0x1128
 8004768:	4413      	add	r3, r2
 800476a:	6019      	str	r1, [r3, #0]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004786:	4b89      	ldr	r3, [pc, #548]	; (80049ac <HAL_GPIO_Init+0x234>)
 8004788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800478a:	e194      	b.n	8004ab6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8186 	beq.w	8004ab0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d005      	beq.n	80047bc <HAL_GPIO_Init+0x44>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d130      	bne.n	800481e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	2203      	movs	r2, #3
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4013      	ands	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047f2:	2201      	movs	r2, #1
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0201 	and.w	r2, r3, #1
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b03      	cmp	r3, #3
 8004828:	d017      	beq.n	800485a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d123      	bne.n	80048ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	08da      	lsrs	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3208      	adds	r2, #8
 800486e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	220f      	movs	r2, #15
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	2203      	movs	r2, #3
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0203 	and.w	r2, r3, #3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80e0 	beq.w	8004ab0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f0:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <HAL_GPIO_Init+0x238>)
 80048f2:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_GPIO_Init+0x238>)
 80048f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004900:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_GPIO_Init+0x238>)
 8004902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800490e:	4a29      	ldr	r2, [pc, #164]	; (80049b4 <HAL_GPIO_Init+0x23c>)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	3302      	adds	r3, #2
 8004916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <HAL_GPIO_Init+0x240>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d052      	beq.n	80049e0 <HAL_GPIO_Init+0x268>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_GPIO_Init+0x244>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d031      	beq.n	80049a6 <HAL_GPIO_Init+0x22e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_GPIO_Init+0x248>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d02b      	beq.n	80049a2 <HAL_GPIO_Init+0x22a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_GPIO_Init+0x24c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d025      	beq.n	800499e <HAL_GPIO_Init+0x226>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_GPIO_Init+0x250>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01f      	beq.n	800499a <HAL_GPIO_Init+0x222>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_GPIO_Init+0x254>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d019      	beq.n	8004996 <HAL_GPIO_Init+0x21e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_GPIO_Init+0x258>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <HAL_GPIO_Init+0x21a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_GPIO_Init+0x25c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00d      	beq.n	800498e <HAL_GPIO_Init+0x216>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <HAL_GPIO_Init+0x260>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <HAL_GPIO_Init+0x212>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_GPIO_Init+0x264>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_GPIO_Init+0x20e>
 8004982:	2309      	movs	r3, #9
 8004984:	e02d      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 8004986:	230a      	movs	r3, #10
 8004988:	e02b      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 800498a:	2308      	movs	r3, #8
 800498c:	e029      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 800498e:	2307      	movs	r3, #7
 8004990:	e027      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 8004992:	2306      	movs	r3, #6
 8004994:	e025      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 8004996:	2305      	movs	r3, #5
 8004998:	e023      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 800499a:	2304      	movs	r3, #4
 800499c:	e021      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 800499e:	2303      	movs	r3, #3
 80049a0:	e01f      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e01d      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e01b      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 80049aa:	bf00      	nop
 80049ac:	58000080 	.word	0x58000080
 80049b0:	58024400 	.word	0x58024400
 80049b4:	58000400 	.word	0x58000400
 80049b8:	58020000 	.word	0x58020000
 80049bc:	58020400 	.word	0x58020400
 80049c0:	58020800 	.word	0x58020800
 80049c4:	58020c00 	.word	0x58020c00
 80049c8:	58021000 	.word	0x58021000
 80049cc:	58021400 	.word	0x58021400
 80049d0:	58021800 	.word	0x58021800
 80049d4:	58021c00 	.word	0x58021c00
 80049d8:	58022000 	.word	0x58022000
 80049dc:	58022400 	.word	0x58022400
 80049e0:	2300      	movs	r3, #0
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	f002 0203 	and.w	r2, r2, #3
 80049e8:	0092      	lsls	r2, r2, #2
 80049ea:	4093      	lsls	r3, r2
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f2:	4938      	ldr	r1, [pc, #224]	; (8004ad4 <HAL_GPIO_Init+0x35c>)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	3302      	adds	r3, #2
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f47f ae63 	bne.w	800478c <HAL_GPIO_Init+0x14>
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3724      	adds	r7, #36	; 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	58000400 	.word	0x58000400

08004ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ae8:	787b      	ldrb	r3, [r7, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004af4:	e003      	b.n	8004afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	041a      	lsls	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	619a      	str	r2, [r3, #24]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b14:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <HAL_PWREx_ConfigSupply+0x70>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d00a      	beq.n	8004b36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b20:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <HAL_PWREx_ConfigSupply+0x70>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0207 	and.w	r2, r3, #7
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d001      	beq.n	8004b32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e01f      	b.n	8004b72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e01d      	b.n	8004b72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b36:	4911      	ldr	r1, [pc, #68]	; (8004b7c <HAL_PWREx_ConfigSupply+0x70>)
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <HAL_PWREx_ConfigSupply+0x70>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f023 0207 	bic.w	r2, r3, #7
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b46:	f7fc fa63 	bl	8001010 <HAL_GetTick>
 8004b4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b4c:	e009      	b.n	8004b62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b4e:	f7fc fa5f 	bl	8001010 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b5c:	d901      	bls.n	8004b62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e007      	b.n	8004b72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_PWREx_ConfigSupply+0x70>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6e:	d1ee      	bne.n	8004b4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	58024800 	.word	0x58024800

08004b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	; 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f000 bc1c 	b.w	80053cc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8087 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba2:	4b9e      	ldr	r3, [pc, #632]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bac:	4b9b      	ldr	r3, [pc, #620]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d007      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x48>
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	2b18      	cmp	r3, #24
 8004bbc:	d110      	bne.n	8004be0 <HAL_RCC_OscConfig+0x60>
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	4b94      	ldr	r3, [pc, #592]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d06c      	beq.n	8004cae <HAL_RCC_OscConfig+0x12e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d168      	bne.n	8004cae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e3f5      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x78>
 8004bea:	4a8c      	ldr	r2, [pc, #560]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004bec:	4b8b      	ldr	r3, [pc, #556]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e02e      	b.n	8004c56 <HAL_RCC_OscConfig+0xd6>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10c      	bne.n	8004c1a <HAL_RCC_OscConfig+0x9a>
 8004c00:	4a86      	ldr	r2, [pc, #536]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c02:	4b86      	ldr	r3, [pc, #536]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4a83      	ldr	r2, [pc, #524]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c0e:	4b83      	ldr	r3, [pc, #524]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e01d      	b.n	8004c56 <HAL_RCC_OscConfig+0xd6>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c22:	d10c      	bne.n	8004c3e <HAL_RCC_OscConfig+0xbe>
 8004c24:	4a7d      	ldr	r2, [pc, #500]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c26:	4b7d      	ldr	r3, [pc, #500]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4a7a      	ldr	r2, [pc, #488]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c32:	4b7a      	ldr	r3, [pc, #488]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	e00b      	b.n	8004c56 <HAL_RCC_OscConfig+0xd6>
 8004c3e:	4a77      	ldr	r2, [pc, #476]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c40:	4b76      	ldr	r3, [pc, #472]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	4a74      	ldr	r2, [pc, #464]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c4c:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d013      	beq.n	8004c86 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fc f9d7 	bl	8001010 <HAL_GetTick>
 8004c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c66:	f7fc f9d3 	bl	8001010 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b64      	cmp	r3, #100	; 0x64
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e3a9      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c78:	4b68      	ldr	r3, [pc, #416]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0xe6>
 8004c84:	e014      	b.n	8004cb0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fc f9c3 	bl	8001010 <HAL_GetTick>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c8e:	f7fc f9bf 	bl	8001010 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b64      	cmp	r3, #100	; 0x64
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e395      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ca0:	4b5e      	ldr	r3, [pc, #376]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCC_OscConfig+0x10e>
 8004cac:	e000      	b.n	8004cb0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80ca 	beq.w	8004e52 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cbe:	4b57      	ldr	r3, [pc, #348]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cc6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cc8:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x164>
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b18      	cmp	r3, #24
 8004cd8:	d156      	bne.n	8004d88 <HAL_RCC_OscConfig+0x208>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d151      	bne.n	8004d88 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce4:	4b4d      	ldr	r3, [pc, #308]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_OscConfig+0x17c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e367      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cfc:	4947      	ldr	r1, [pc, #284]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004cfe:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 0219 	bic.w	r2, r3, #25
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d0e:	f7fc f97f 	bl	8001010 <HAL_GetTick>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d16:	f7fc f97b 	bl	8001010 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e351      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d28:	4b3c      	ldr	r3, [pc, #240]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d34:	f7fc f99a 	bl	800106c <HAL_GetREVID>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d817      	bhi.n	8004d72 <HAL_RCC_OscConfig+0x1f2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d108      	bne.n	8004d5c <HAL_RCC_OscConfig+0x1dc>
 8004d4a:	4a34      	ldr	r2, [pc, #208]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d4c:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d5a:	e07a      	b.n	8004e52 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	492f      	ldr	r1, [pc, #188]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d5e:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	031b      	lsls	r3, r3, #12
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d70:	e06f      	b.n	8004e52 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d72:	492a      	ldr	r1, [pc, #168]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d74:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	061b      	lsls	r3, r3, #24
 8004d82:	4313      	orrs	r3, r2
 8004d84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d86:	e064      	b.n	8004e52 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d047      	beq.n	8004e20 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d90:	4922      	ldr	r1, [pc, #136]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 0219 	bic.w	r2, r3, #25
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fc f935 	bl	8001010 <HAL_GetTick>
 8004da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004daa:	f7fc f931 	bl	8001010 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e307      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dbc:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	f7fc f950 	bl	800106c <HAL_GetREVID>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f241 0303 	movw	r3, #4099	; 0x1003
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d817      	bhi.n	8004e06 <HAL_RCC_OscConfig+0x286>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d108      	bne.n	8004df0 <HAL_RCC_OscConfig+0x270>
 8004dde:	4a0f      	ldr	r2, [pc, #60]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dec:	6053      	str	r3, [r2, #4]
 8004dee:	e030      	b.n	8004e52 <HAL_RCC_OscConfig+0x2d2>
 8004df0:	490a      	ldr	r1, [pc, #40]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004df2:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	031b      	lsls	r3, r3, #12
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
 8004e04:	e025      	b.n	8004e52 <HAL_RCC_OscConfig+0x2d2>
 8004e06:	4905      	ldr	r1, [pc, #20]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004e08:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <HAL_RCC_OscConfig+0x29c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	4313      	orrs	r3, r2
 8004e18:	604b      	str	r3, [r1, #4]
 8004e1a:	e01a      	b.n	8004e52 <HAL_RCC_OscConfig+0x2d2>
 8004e1c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e20:	4a9e      	ldr	r2, [pc, #632]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004e22:	4b9e      	ldr	r3, [pc, #632]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fc f8f0 	bl	8001010 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fc f8ec 	bl	8001010 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e2c2      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e46:	4b95      	ldr	r3, [pc, #596]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80a9 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e60:	4b8e      	ldr	r3, [pc, #568]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e68:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e6a:	4b8c      	ldr	r3, [pc, #560]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d007      	beq.n	8004e86 <HAL_RCC_OscConfig+0x306>
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b18      	cmp	r3, #24
 8004e7a:	d13a      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x372>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d135      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e86:	4b85      	ldr	r3, [pc, #532]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_RCC_OscConfig+0x31e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e296      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e9e:	f7fc f8e5 	bl	800106c <HAL_GetREVID>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	f241 0303 	movw	r3, #4099	; 0x1003
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d817      	bhi.n	8004edc <HAL_RCC_OscConfig+0x35c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d108      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x346>
 8004eb4:	4a79      	ldr	r2, [pc, #484]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004eb6:	4b79      	ldr	r3, [pc, #484]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ec2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ec4:	e075      	b.n	8004fb2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ec6:	4975      	ldr	r1, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004ec8:	4b74      	ldr	r3, [pc, #464]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	069b      	lsls	r3, r3, #26
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eda:	e06a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004edc:	496f      	ldr	r1, [pc, #444]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004ede:	4b6f      	ldr	r3, [pc, #444]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	061b      	lsls	r3, r3, #24
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ef0:	e05f      	b.n	8004fb2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d042      	beq.n	8004f80 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004efa:	4a68      	ldr	r2, [pc, #416]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004efc:	4b67      	ldr	r3, [pc, #412]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fc f883 	bl	8001010 <HAL_GetTick>
 8004f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f0e:	f7fc f87f 	bl	8001010 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e255      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f20:	4b5e      	ldr	r3, [pc, #376]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f2c:	f7fc f89e 	bl	800106c <HAL_GetREVID>
 8004f30:	4602      	mov	r2, r0
 8004f32:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d817      	bhi.n	8004f6a <HAL_RCC_OscConfig+0x3ea>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_OscConfig+0x3d4>
 8004f42:	4a56      	ldr	r2, [pc, #344]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f44:	4b55      	ldr	r3, [pc, #340]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f50:	6053      	str	r3, [r2, #4]
 8004f52:	e02e      	b.n	8004fb2 <HAL_RCC_OscConfig+0x432>
 8004f54:	4951      	ldr	r1, [pc, #324]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f56:	4b51      	ldr	r3, [pc, #324]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	069b      	lsls	r3, r3, #26
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
 8004f68:	e023      	b.n	8004fb2 <HAL_RCC_OscConfig+0x432>
 8004f6a:	494c      	ldr	r1, [pc, #304]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f6c:	4b4b      	ldr	r3, [pc, #300]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	061b      	lsls	r3, r3, #24
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]
 8004f7e:	e018      	b.n	8004fb2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f80:	4a46      	ldr	r2, [pc, #280]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f82:	4b46      	ldr	r3, [pc, #280]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fc f840 	bl	8001010 <HAL_GetTick>
 8004f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f94:	f7fc f83c 	bl	8001010 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e212      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fa6:	4b3d      	ldr	r3, [pc, #244]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d036      	beq.n	800502c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d019      	beq.n	8004ffa <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc6:	4a35      	ldr	r2, [pc, #212]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004fc8:	4b34      	ldr	r3, [pc, #208]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd2:	f7fc f81d 	bl	8001010 <HAL_GetTick>
 8004fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fc f819 	bl	8001010 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e1ef      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x45a>
 8004ff8:	e018      	b.n	800502c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ffa:	4a28      	ldr	r2, [pc, #160]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004ffc:	4b27      	ldr	r3, [pc, #156]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8004ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fc f803 	bl	8001010 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800500e:	f7fb ffff 	bl	8001010 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1d5      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005020:	4b1e      	ldr	r3, [pc, #120]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f0      	bne.n	800500e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d039      	beq.n	80050ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d019      	beq.n	8005074 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8005042:	4b16      	ldr	r3, [pc, #88]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800504a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800504c:	f7fb ffe0 	bl	8001010 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005054:	f7fb ffdc 	bl	8001010 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1b2      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x4d4>
 8005072:	e01b      	b.n	80050ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005074:	4a09      	ldr	r2, [pc, #36]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_RCC_OscConfig+0x51c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800507e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005080:	f7fb ffc6 	bl	8001010 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005088:	f7fb ffc2 	bl	8001010 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d904      	bls.n	80050a0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e198      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050a0:	4ba3      	ldr	r3, [pc, #652]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ed      	bne.n	8005088 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8081 	beq.w	80051bc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050ba:	4a9e      	ldr	r2, [pc, #632]	; (8005334 <HAL_RCC_OscConfig+0x7b4>)
 80050bc:	4b9d      	ldr	r3, [pc, #628]	; (8005334 <HAL_RCC_OscConfig+0x7b4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050c6:	f7fb ffa3 	bl	8001010 <HAL_GetTick>
 80050ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050ce:	f7fb ff9f 	bl	8001010 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b64      	cmp	r3, #100	; 0x64
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e175      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050e0:	4b94      	ldr	r3, [pc, #592]	; (8005334 <HAL_RCC_OscConfig+0x7b4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d106      	bne.n	8005102 <HAL_RCC_OscConfig+0x582>
 80050f4:	4a8e      	ldr	r2, [pc, #568]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80050f6:	4b8e      	ldr	r3, [pc, #568]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005100:	e02d      	b.n	800515e <HAL_RCC_OscConfig+0x5de>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x5a4>
 800510a:	4a89      	ldr	r2, [pc, #548]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800510c:	4b88      	ldr	r3, [pc, #544]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
 8005116:	4a86      	ldr	r2, [pc, #536]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005118:	4b85      	ldr	r3, [pc, #532]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	6713      	str	r3, [r2, #112]	; 0x70
 8005122:	e01c      	b.n	800515e <HAL_RCC_OscConfig+0x5de>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b05      	cmp	r3, #5
 800512a:	d10c      	bne.n	8005146 <HAL_RCC_OscConfig+0x5c6>
 800512c:	4a80      	ldr	r2, [pc, #512]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800512e:	4b80      	ldr	r3, [pc, #512]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	f043 0304 	orr.w	r3, r3, #4
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	4a7d      	ldr	r2, [pc, #500]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800513a:	4b7d      	ldr	r3, [pc, #500]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
 8005144:	e00b      	b.n	800515e <HAL_RCC_OscConfig+0x5de>
 8005146:	4a7a      	ldr	r2, [pc, #488]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005148:	4b79      	ldr	r3, [pc, #484]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
 8005152:	4a77      	ldr	r2, [pc, #476]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005154:	4b76      	ldr	r3, [pc, #472]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d015      	beq.n	8005192 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005166:	f7fb ff53 	bl	8001010 <HAL_GetTick>
 800516a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800516c:	e00a      	b.n	8005184 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800516e:	f7fb ff4f 	bl	8001010 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	; 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e123      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005184:	4b6a      	ldr	r3, [pc, #424]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ee      	beq.n	800516e <HAL_RCC_OscConfig+0x5ee>
 8005190:	e014      	b.n	80051bc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005192:	f7fb ff3d 	bl	8001010 <HAL_GetTick>
 8005196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fb ff39 	bl	8001010 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e10d      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051b0:	4b5f      	ldr	r3, [pc, #380]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ee      	bne.n	800519a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8102 	beq.w	80053ca <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051c6:	4b5a      	ldr	r3, [pc, #360]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ce:	2b18      	cmp	r3, #24
 80051d0:	f000 80bd 	beq.w	800534e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b02      	cmp	r3, #2
 80051da:	f040 8095 	bne.w	8005308 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051de:	4a54      	ldr	r2, [pc, #336]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80051e0:	4b53      	ldr	r3, [pc, #332]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fb ff11 	bl	8001010 <HAL_GetTick>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fb ff0d 	bl	8001010 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0e3      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005204:	4b4a      	ldr	r3, [pc, #296]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005210:	4847      	ldr	r0, [pc, #284]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005212:	4b47      	ldr	r3, [pc, #284]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005216:	4b48      	ldr	r3, [pc, #288]	; (8005338 <HAL_RCC_OscConfig+0x7b8>)
 8005218:	4013      	ands	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005222:	0112      	lsls	r2, r2, #4
 8005224:	430a      	orrs	r2, r1
 8005226:	4313      	orrs	r3, r2
 8005228:	6283      	str	r3, [r0, #40]	; 0x28
 800522a:	4941      	ldr	r1, [pc, #260]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	3b01      	subs	r3, #1
 8005232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	3b01      	subs	r3, #1
 800523c:	025b      	lsls	r3, r3, #9
 800523e:	b29b      	uxth	r3, r3
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	3b01      	subs	r3, #1
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	3b01      	subs	r3, #1
 8005256:	061b      	lsls	r3, r3, #24
 8005258:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800525c:	4313      	orrs	r3, r2
 800525e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005260:	4a33      	ldr	r2, [pc, #204]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005262:	4b33      	ldr	r3, [pc, #204]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800526c:	4930      	ldr	r1, [pc, #192]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800526e:	4b30      	ldr	r3, [pc, #192]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005272:	4b32      	ldr	r3, [pc, #200]	; (800533c <HAL_RCC_OscConfig+0x7bc>)
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800527a:	00d2      	lsls	r2, r2, #3
 800527c:	4313      	orrs	r3, r2
 800527e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005280:	492b      	ldr	r1, [pc, #172]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005282:	4b2b      	ldr	r3, [pc, #172]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	f023 020c 	bic.w	r2, r3, #12
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	4313      	orrs	r3, r2
 8005290:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005292:	4927      	ldr	r1, [pc, #156]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005294:	4b26      	ldr	r3, [pc, #152]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	f023 0202 	bic.w	r2, r3, #2
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	4313      	orrs	r3, r2
 80052a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052a4:	4a22      	ldr	r2, [pc, #136]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052a6:	4b22      	ldr	r3, [pc, #136]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b0:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052b2:	4b1f      	ldr	r3, [pc, #124]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052be:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80052c8:	4a19      	ldr	r2, [pc, #100]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052ca:	4b19      	ldr	r3, [pc, #100]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4a16      	ldr	r2, [pc, #88]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052d6:	4b16      	ldr	r3, [pc, #88]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fb fe96 	bl	8001010 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fb fe92 	bl	8001010 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e068      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052fa:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x768>
 8005306:	e060      	b.n	80053ca <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005308:	4a09      	ldr	r2, [pc, #36]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800530a:	4b09      	ldr	r3, [pc, #36]	; (8005330 <HAL_RCC_OscConfig+0x7b0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fb fe7c 	bl	8001010 <HAL_GetTick>
 8005318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531a:	e011      	b.n	8005340 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800531c:	f7fb fe78 	bl	8001010 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d90a      	bls.n	8005340 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e04e      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
 800532e:	bf00      	nop
 8005330:	58024400 	.word	0x58024400
 8005334:	58024800 	.word	0x58024800
 8005338:	fffffc0c 	.word	0xfffffc0c
 800533c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_RCC_OscConfig+0x854>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e7      	bne.n	800531c <HAL_RCC_OscConfig+0x79c>
 800534c:	e03d      	b.n	80053ca <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800534e:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <HAL_RCC_OscConfig+0x854>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005354:	4b1f      	ldr	r3, [pc, #124]	; (80053d4 <HAL_RCC_OscConfig+0x854>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b01      	cmp	r3, #1
 8005360:	d031      	beq.n	80053c6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f003 0203 	and.w	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d12a      	bne.n	80053c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d122      	bne.n	80053c6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800538c:	429a      	cmp	r2, r3
 800538e:	d11a      	bne.n	80053c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	0a5b      	lsrs	r3, r3, #9
 8005394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d111      	bne.n	80053c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d108      	bne.n	80053c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	0e1b      	lsrs	r3, r3, #24
 80053b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d001      	beq.n	80053ca <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3730      	adds	r7, #48	; 0x30
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	58024400 	.word	0x58024400

080053d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e19c      	b.n	8005726 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ec:	4b8a      	ldr	r3, [pc, #552]	; (8005618 <HAL_RCC_ClockConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d210      	bcs.n	800541c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fa:	4987      	ldr	r1, [pc, #540]	; (8005618 <HAL_RCC_ClockConfig+0x240>)
 80053fc:	4b86      	ldr	r3, [pc, #536]	; (8005618 <HAL_RCC_ClockConfig+0x240>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f023 020f 	bic.w	r2, r3, #15
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	4b83      	ldr	r3, [pc, #524]	; (8005618 <HAL_RCC_ClockConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 020f 	and.w	r2, r3, #15
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e184      	b.n	8005726 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	4b7b      	ldr	r3, [pc, #492]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005434:	429a      	cmp	r2, r3
 8005436:	d908      	bls.n	800544a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005438:	4978      	ldr	r1, [pc, #480]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800543a:	4b78      	ldr	r3, [pc, #480]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	4b70      	ldr	r3, [pc, #448]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005462:	429a      	cmp	r2, r3
 8005464:	d908      	bls.n	8005478 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005466:	496d      	ldr	r1, [pc, #436]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 8005468:	4b6c      	ldr	r3, [pc, #432]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d010      	beq.n	80054a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	4b64      	ldr	r3, [pc, #400]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005490:	429a      	cmp	r2, r3
 8005492:	d908      	bls.n	80054a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005494:	4961      	ldr	r1, [pc, #388]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 8005496:	4b61      	ldr	r3, [pc, #388]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d010      	beq.n	80054d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	4b59      	ldr	r3, [pc, #356]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054be:	429a      	cmp	r2, r3
 80054c0:	d908      	bls.n	80054d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054c2:	4956      	ldr	r1, [pc, #344]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80054c4:	4b55      	ldr	r3, [pc, #340]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	4b4d      	ldr	r3, [pc, #308]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d908      	bls.n	8005502 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f0:	494a      	ldr	r1, [pc, #296]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80054f2:	4b4a      	ldr	r3, [pc, #296]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f023 020f 	bic.w	r2, r3, #15
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d055      	beq.n	80055ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800550e:	4943      	ldr	r1, [pc, #268]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 8005510:	4b42      	ldr	r3, [pc, #264]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	4313      	orrs	r3, r2
 800551e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d107      	bne.n	8005538 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005528:	4b3c      	ldr	r3, [pc, #240]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d121      	bne.n	8005578 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0f6      	b.n	8005726 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d107      	bne.n	8005550 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005540:	4b36      	ldr	r3, [pc, #216]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d115      	bne.n	8005578 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0ea      	b.n	8005726 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d107      	bne.n	8005568 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005558:	4b30      	ldr	r3, [pc, #192]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0de      	b.n	8005726 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005568:	4b2c      	ldr	r3, [pc, #176]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0d6      	b.n	8005726 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005578:	4928      	ldr	r1, [pc, #160]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800557a:	4b28      	ldr	r3, [pc, #160]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f023 0207 	bic.w	r2, r3, #7
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558a:	f7fb fd41 	bl	8001010 <HAL_GetTick>
 800558e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005590:	e00a      	b.n	80055a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005592:	f7fb fd3d 	bl	8001010 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e0be      	b.n	8005726 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a8:	4b1c      	ldr	r3, [pc, #112]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d1eb      	bne.n	8005592 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d010      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d208      	bcs.n	80055e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d6:	4911      	ldr	r1, [pc, #68]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80055d8:	4b10      	ldr	r3, [pc, #64]	; (800561c <HAL_RCC_ClockConfig+0x244>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f023 020f 	bic.w	r2, r3, #15
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_ClockConfig+0x240>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d914      	bls.n	8005620 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4908      	ldr	r1, [pc, #32]	; (8005618 <HAL_RCC_ClockConfig+0x240>)
 80055f8:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCC_ClockConfig+0x240>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f023 020f 	bic.w	r2, r3, #15
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b04      	ldr	r3, [pc, #16]	; (8005618 <HAL_RCC_ClockConfig+0x240>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e086      	b.n	8005726 <HAL_RCC_ClockConfig+0x34e>
 8005618:	52002000 	.word	0x52002000
 800561c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d010      	beq.n	800564e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005638:	429a      	cmp	r2, r3
 800563a:	d208      	bcs.n	800564e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800563c:	493c      	ldr	r1, [pc, #240]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 800563e:	4b3c      	ldr	r3, [pc, #240]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d010      	beq.n	800567c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	4b34      	ldr	r3, [pc, #208]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005666:	429a      	cmp	r2, r3
 8005668:	d208      	bcs.n	800567c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800566a:	4931      	ldr	r1, [pc, #196]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 800566c:	4b30      	ldr	r3, [pc, #192]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d010      	beq.n	80056aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	4b28      	ldr	r3, [pc, #160]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005694:	429a      	cmp	r2, r3
 8005696:	d208      	bcs.n	80056aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005698:	4925      	ldr	r1, [pc, #148]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 800569a:	4b25      	ldr	r3, [pc, #148]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d010      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d208      	bcs.n	80056d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80056c6:	491a      	ldr	r1, [pc, #104]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 80056c8:	4b19      	ldr	r3, [pc, #100]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056d8:	f000 f834 	bl	8005744 <HAL_RCC_GetSysClockFreq>
 80056dc:	4601      	mov	r1, r0
 80056de:	4b14      	ldr	r3, [pc, #80]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	4a12      	ldr	r2, [pc, #72]	; (8005734 <HAL_RCC_ClockConfig+0x35c>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	fa21 f303 	lsr.w	r3, r1, r3
 80056f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056f6:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <HAL_RCC_ClockConfig+0x358>)
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <HAL_RCC_ClockConfig+0x35c>)
 8005700:	5cd3      	ldrb	r3, [r2, r3]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <HAL_RCC_ClockConfig+0x360>)
 800570e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005710:	4a0a      	ldr	r2, [pc, #40]	; (800573c <HAL_RCC_ClockConfig+0x364>)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <HAL_RCC_ClockConfig+0x368>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fb fc2e 	bl	8000f7c <HAL_InitTick>
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	58024400 	.word	0x58024400
 8005734:	08008f08 	.word	0x08008f08
 8005738:	20000004 	.word	0x20000004
 800573c:	20000000 	.word	0x20000000
 8005740:	20000008 	.word	0x20000008

08005744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005744:	b480      	push	{r7}
 8005746:	b089      	sub	sp, #36	; 0x24
 8005748:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800574a:	4baf      	ldr	r3, [pc, #700]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005752:	2b18      	cmp	r3, #24
 8005754:	f200 814e 	bhi.w	80059f4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005758:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <HAL_RCC_GetSysClockFreq+0x1c>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	080057c5 	.word	0x080057c5
 8005764:	080059f5 	.word	0x080059f5
 8005768:	080059f5 	.word	0x080059f5
 800576c:	080059f5 	.word	0x080059f5
 8005770:	080059f5 	.word	0x080059f5
 8005774:	080059f5 	.word	0x080059f5
 8005778:	080059f5 	.word	0x080059f5
 800577c:	080059f5 	.word	0x080059f5
 8005780:	080057eb 	.word	0x080057eb
 8005784:	080059f5 	.word	0x080059f5
 8005788:	080059f5 	.word	0x080059f5
 800578c:	080059f5 	.word	0x080059f5
 8005790:	080059f5 	.word	0x080059f5
 8005794:	080059f5 	.word	0x080059f5
 8005798:	080059f5 	.word	0x080059f5
 800579c:	080059f5 	.word	0x080059f5
 80057a0:	080057f1 	.word	0x080057f1
 80057a4:	080059f5 	.word	0x080059f5
 80057a8:	080059f5 	.word	0x080059f5
 80057ac:	080059f5 	.word	0x080059f5
 80057b0:	080059f5 	.word	0x080059f5
 80057b4:	080059f5 	.word	0x080059f5
 80057b8:	080059f5 	.word	0x080059f5
 80057bc:	080059f5 	.word	0x080059f5
 80057c0:	080057f7 	.word	0x080057f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057c4:	4b90      	ldr	r3, [pc, #576]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057d0:	4b8d      	ldr	r3, [pc, #564]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	08db      	lsrs	r3, r3, #3
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	4a8c      	ldr	r2, [pc, #560]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
 80057e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80057e2:	e10a      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057e4:	4b89      	ldr	r3, [pc, #548]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80057e6:	61bb      	str	r3, [r7, #24]
    break;
 80057e8:	e107      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80057ea:	4b89      	ldr	r3, [pc, #548]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80057ec:	61bb      	str	r3, [r7, #24]
    break;
 80057ee:	e104      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80057f0:	4b88      	ldr	r3, [pc, #544]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80057f2:	61bb      	str	r3, [r7, #24]
    break;
 80057f4:	e101      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057f6:	4b84      	ldr	r3, [pc, #528]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005800:	4b81      	ldr	r3, [pc, #516]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800580a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800580c:	4b7e      	ldr	r3, [pc, #504]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005816:	4b7c      	ldr	r3, [pc, #496]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	08db      	lsrs	r3, r3, #3
 800581c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	fb02 f303 	mul.w	r3, r2, r3
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80da 	beq.w	80059ee <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d05a      	beq.n	80058f6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005840:	2b01      	cmp	r3, #1
 8005842:	d302      	bcc.n	800584a <HAL_RCC_GetSysClockFreq+0x106>
 8005844:	2b02      	cmp	r3, #2
 8005846:	d078      	beq.n	800593a <HAL_RCC_GetSysClockFreq+0x1f6>
 8005848:	e099      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800584a:	4b6f      	ldr	r3, [pc, #444]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02d      	beq.n	80058b2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005856:	4b6c      	ldr	r3, [pc, #432]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	08db      	lsrs	r3, r3, #3
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	4a6a      	ldr	r2, [pc, #424]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005862:	fa22 f303 	lsr.w	r3, r2, r3
 8005866:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005880:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005890:	ed97 6a02 	vldr	s12, [r7, #8]
 8005894:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80058b0:	e087      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058bc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005a1c <HAL_RCC_GetSysClockFreq+0x2d8>
 80058c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c4:	4b50      	ldr	r3, [pc, #320]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 80058dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058f4:	e065      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	ee07 3a90 	vmov	s15, r3
 80058fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005900:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005a20 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005908:	4b3f      	ldr	r3, [pc, #252]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005918:	ed97 6a02 	vldr	s12, [r7, #8]
 800591c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800592c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005938:	e043      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005944:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005a24 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800594c:	4b2e      	ldr	r3, [pc, #184]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005960:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800596c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800597c:	e021      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005988:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005a20 <HAL_RCC_GetSysClockFreq+0x2dc>
 800598c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005990:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80059a4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 80059a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059c0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	0a5b      	lsrs	r3, r3, #9
 80059c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059cc:	3301      	adds	r3, #1
 80059ce:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059da:	edd7 6a07 	vldr	s13, [r7, #28]
 80059de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059e6:	ee17 3a90 	vmov	r3, s15
 80059ea:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80059ec:	e005      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61bb      	str	r3, [r7, #24]
    break;
 80059f2:	e002      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80059f6:	61bb      	str	r3, [r7, #24]
    break;
 80059f8:	bf00      	nop
  }

  return sysclockfreq;
 80059fa:	69bb      	ldr	r3, [r7, #24]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3724      	adds	r7, #36	; 0x24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	58024400 	.word	0x58024400
 8005a0c:	03d09000 	.word	0x03d09000
 8005a10:	003d0900 	.word	0x003d0900
 8005a14:	007a1200 	.word	0x007a1200
 8005a18:	46000000 	.word	0x46000000
 8005a1c:	4c742400 	.word	0x4c742400
 8005a20:	4a742400 	.word	0x4a742400
 8005a24:	4af42400 	.word	0x4af42400

08005a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a2e:	f7ff fe89 	bl	8005744 <HAL_RCC_GetSysClockFreq>
 8005a32:	4601      	mov	r1, r0
 8005a34:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	4a0f      	ldr	r2, [pc, #60]	; (8005a7c <HAL_RCC_GetHCLKFreq+0x54>)
 8005a40:	5cd3      	ldrb	r3, [r2, r3]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	fa21 f303 	lsr.w	r3, r1, r3
 8005a4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <HAL_RCC_GetHCLKFreq+0x54>)
 8005a56:	5cd3      	ldrb	r3, [r2, r3]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a62:	4a07      	ldr	r2, [pc, #28]	; (8005a80 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a66:	4a07      	ldr	r2, [pc, #28]	; (8005a84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	58024400 	.word	0x58024400
 8005a7c:	08008f08 	.word	0x08008f08
 8005a80:	20000004 	.word	0x20000004
 8005a84:	20000000 	.word	0x20000000

08005a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a8c:	f7ff ffcc 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8005a90:	4601      	mov	r1, r0
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4a04      	ldr	r2, [pc, #16]	; (8005ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a9e:	5cd3      	ldrb	r3, [r2, r3]
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	08008f08 	.word	0x08008f08

08005ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ab8:	f7ff ffb6 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8005abc:	4601      	mov	r1, r0
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005aca:	5cd3      	ldrb	r3, [r2, r3]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	58024400 	.word	0x58024400
 8005adc:	08008f08 	.word	0x08008f08

08005ae0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aec:	2300      	movs	r3, #0
 8005aee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d03d      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b04:	d013      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b0a:	d802      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005b10:	e01f      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b16:	d013      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005b18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b1c:	d01c      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005b1e:	e018      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b20:	4aaf      	ldr	r2, [pc, #700]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b22:	4baf      	ldr	r3, [pc, #700]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b2c:	e015      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3304      	adds	r3, #4
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 f97f 	bl	8006e38 <RCCEx_PLL2_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b3e:	e00c      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	2102      	movs	r1, #2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 fa28 	bl	8006f9c <RCCEx_PLL3_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b50:	e003      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
      break;
 8005b56:	e000      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b60:	499f      	ldr	r1, [pc, #636]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b62:	4b9f      	ldr	r3, [pc, #636]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	650b      	str	r3, [r1, #80]	; 0x50
 8005b72:	e001      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d03d      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d826      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005ba9 	.word	0x08005ba9
 8005b98:	08005bb7 	.word	0x08005bb7
 8005b9c:	08005bc9 	.word	0x08005bc9
 8005ba0:	08005be1 	.word	0x08005be1
 8005ba4:	08005be1 	.word	0x08005be1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba8:	4a8d      	ldr	r2, [pc, #564]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005baa:	4b8d      	ldr	r3, [pc, #564]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bb4:	e015      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f93b 	bl	8006e38 <RCCEx_PLL2_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bc6:	e00c      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f9e4 	bl	8006f9c <RCCEx_PLL3_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bd8:	e003      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bde:	e000      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005be8:	497d      	ldr	r1, [pc, #500]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bea:	4b7d      	ldr	r3, [pc, #500]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bee:	f023 0207 	bic.w	r2, r3, #7
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	650b      	str	r3, [r1, #80]	; 0x50
 8005bfa:	e001      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d03e      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	2b80      	cmp	r3, #128	; 0x80
 8005c12:	d01c      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005c14:	2b80      	cmp	r3, #128	; 0x80
 8005c16:	d804      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d00d      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005c20:	e01e      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005c22:	2bc0      	cmp	r3, #192	; 0xc0
 8005c24:	d01f      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2a:	d01e      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c2c:	e018      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c2e:	4a6c      	ldr	r2, [pc, #432]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c30:	4b6b      	ldr	r3, [pc, #428]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c3a:	e017      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f001 f8f8 	bl	8006e38 <RCCEx_PLL2_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c4c:	e00e      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3324      	adds	r3, #36	; 0x24
 8005c52:	2100      	movs	r1, #0
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 f9a1 	bl	8006f9c <RCCEx_PLL3_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c5e:	e005      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
      break;
 8005c64:	e002      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c72:	495b      	ldr	r1, [pc, #364]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c74:	4b5a      	ldr	r3, [pc, #360]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c78:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c80:	4313      	orrs	r3, r2
 8005c82:	650b      	str	r3, [r1, #80]	; 0x50
 8005c84:	e001      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d044      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca0:	d01f      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca6:	d805      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005cb2:	e01f      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005cb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cb8:	d01f      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005cba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cbe:	d01e      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005cc0:	e018      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc2:	4a47      	ldr	r2, [pc, #284]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cc4:	4b46      	ldr	r3, [pc, #280]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cce:	e017      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 f8ae 	bl	8006e38 <RCCEx_PLL2_Config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005ce0:	e00e      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3324      	adds	r3, #36	; 0x24
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 f957 	bl	8006f9c <RCCEx_PLL3_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cf2:	e005      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf8:	e002      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e000      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d06:	4936      	ldr	r1, [pc, #216]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d08:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d16:	4313      	orrs	r3, r2
 8005d18:	658b      	str	r3, [r1, #88]	; 0x58
 8005d1a:	e001      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d044      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d36:	d01f      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d3c:	d805      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005d42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d46:	d00e      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005d48:	e01f      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005d4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d4e:	d01f      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d54:	d01e      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005d56:	e018      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d58:	4a21      	ldr	r2, [pc, #132]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d5a:	4b21      	ldr	r3, [pc, #132]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d64:	e017      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 f863 	bl	8006e38 <RCCEx_PLL2_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d76:	e00e      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3324      	adds	r3, #36	; 0x24
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f90c 	bl	8006f9c <RCCEx_PLL3_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d88:	e005      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8e:	e002      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005d90:	bf00      	nop
 8005d92:	e000      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d9c:	4910      	ldr	r1, [pc, #64]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dac:	4313      	orrs	r3, r2
 8005dae:	658b      	str	r3, [r1, #88]	; 0x58
 8005db0:	e001      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d035      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d00c      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005dca:	2b10      	cmp	r3, #16
 8005dcc:	d802      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01b      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005dd2:	e017      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d00c      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005dd8:	2b30      	cmp	r3, #48	; 0x30
 8005dda:	d018      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005ddc:	e012      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005dde:	bf00      	nop
 8005de0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de4:	4aaf      	ldr	r2, [pc, #700]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005de6:	4baf      	ldr	r3, [pc, #700]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005df0:	e00e      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3304      	adds	r3, #4
 8005df6:	2102      	movs	r1, #2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 f81d 	bl	8006e38 <RCCEx_PLL2_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e02:	e005      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	75fb      	strb	r3, [r7, #23]
      break;
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e16:	49a3      	ldr	r1, [pc, #652]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e18:	4ba2      	ldr	r3, [pc, #648]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e24:	4313      	orrs	r3, r2
 8005e26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e28:	e001      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d042      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e42:	d01f      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e48:	d805      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	d00e      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005e54:	e01f      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e5a:	d01f      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e60:	d01e      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005e62:	e018      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e64:	4a8f      	ldr	r2, [pc, #572]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e66:	4b8f      	ldr	r3, [pc, #572]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e70:	e017      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	2100      	movs	r1, #0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 ffdd 	bl	8006e38 <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e82:	e00e      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3324      	adds	r3, #36	; 0x24
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 f886 	bl	8006f9c <RCCEx_PLL3_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e94:	e005      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	75fb      	strb	r3, [r7, #23]
      break;
 8005e9a:	e002      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005e9c:	bf00      	nop
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d109      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ea8:	497e      	ldr	r1, [pc, #504]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005eaa:	4b7e      	ldr	r3, [pc, #504]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8005eba:	e001      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
 8005ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d042      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ed4:	d01b      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eda:	d805      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d022      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee4:	d00a      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005ee6:	e01b      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eec:	d01d      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef2:	d01c      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005ef4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ef8:	d01b      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005efa:	e011      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	2101      	movs	r1, #1
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 ff98 	bl	8006e38 <RCCEx_PLL2_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f0c:	e012      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3324      	adds	r3, #36	; 0x24
 8005f12:	2101      	movs	r1, #1
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 f841 	bl	8006f9c <RCCEx_PLL3_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f1e:	e009      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	75fb      	strb	r3, [r7, #23]
      break;
 8005f24:	e006      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005f26:	bf00      	nop
 8005f28:	e004      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005f2a:	bf00      	nop
 8005f2c:	e002      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d109      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f3a:	495a      	ldr	r1, [pc, #360]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f3c:	4b59      	ldr	r3, [pc, #356]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	650b      	str	r3, [r1, #80]	; 0x50
 8005f4c:	e001      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4e:	7dfb      	ldrb	r3, [r7, #23]
 8005f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d044      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f68:	d01b      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f6e:	d805      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d022      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005f7a:	e01b      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d01d      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f86:	d01c      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005f88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f8c:	d01b      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f8e:	e011      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	2101      	movs	r1, #1
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 ff4e 	bl	8006e38 <RCCEx_PLL2_Config>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fa0:	e012      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3324      	adds	r3, #36	; 0x24
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fff7 	bl	8006f9c <RCCEx_PLL3_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fb2:	e009      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb8:	e006      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005fba:	bf00      	nop
 8005fbc:	e004      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e002      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005fce:	4935      	ldr	r1, [pc, #212]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fd0:	4b34      	ldr	r3, [pc, #208]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	658b      	str	r3, [r1, #88]	; 0x58
 8005fe2:	e001      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d02d      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ffc:	d005      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006002:	d009      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d013      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006008:	e00f      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600a:	4a26      	ldr	r2, [pc, #152]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800600c:	4b25      	ldr	r3, [pc, #148]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006016:	e00c      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f000 ff0a 	bl	8006e38 <RCCEx_PLL2_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006028:	e003      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	75fb      	strb	r3, [r7, #23]
      break;
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006038:	491a      	ldr	r1, [pc, #104]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800603a:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006046:	4313      	orrs	r3, r2
 8006048:	650b      	str	r3, [r1, #80]	; 0x50
 800604a:	e001      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d035      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006060:	2b03      	cmp	r3, #3
 8006062:	d81b      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	080060a9 	.word	0x080060a9
 8006070:	0800607d 	.word	0x0800607d
 8006074:	0800608b 	.word	0x0800608b
 8006078:	080060a9 	.word	0x080060a9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800607e:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006086:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006088:	e00f      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3304      	adds	r3, #4
 800608e:	2102      	movs	r1, #2
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fed1 	bl	8006e38 <RCCEx_PLL2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800609a:	e006      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
      break;
 80060a0:	e003      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80060a2:	bf00      	nop
 80060a4:	58024400 	.word	0x58024400
      break;
 80060a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d109      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060b0:	49ba      	ldr	r1, [pc, #744]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060b2:	4bba      	ldr	r3, [pc, #744]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b6:	f023 0203 	bic.w	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	4313      	orrs	r3, r2
 80060c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060c2:	e001      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8086 	beq.w	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060d6:	4ab2      	ldr	r2, [pc, #712]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80060d8:	4bb1      	ldr	r3, [pc, #708]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060e2:	f7fa ff95 	bl	8001010 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060e8:	e009      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ea:	f7fa ff91 	bl	8001010 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b64      	cmp	r3, #100	; 0x64
 80060f6:	d902      	bls.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	75fb      	strb	r3, [r7, #23]
        break;
 80060fc:	e005      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060fe:	4ba8      	ldr	r3, [pc, #672]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0ef      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d166      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006110:	4ba2      	ldr	r3, [pc, #648]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800611a:	4053      	eors	r3, r2
 800611c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006124:	4b9d      	ldr	r3, [pc, #628]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800612e:	4a9b      	ldr	r2, [pc, #620]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006130:	4b9a      	ldr	r3, [pc, #616]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006138:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800613a:	4a98      	ldr	r2, [pc, #608]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800613c:	4b97      	ldr	r3, [pc, #604]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006144:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006146:	4a95      	ldr	r2, [pc, #596]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006156:	d115      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fa ff5a 	bl	8001010 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800615e:	e00b      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f7fa ff56 	bl	8001010 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	; 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d902      	bls.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	75fb      	strb	r3, [r7, #23]
            break;
 8006176:	e005      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006178:	4b88      	ldr	r3, [pc, #544]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0ed      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d126      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006198:	d10d      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800619a:	4880      	ldr	r0, [pc, #512]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800619c:	4b7f      	ldr	r3, [pc, #508]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061aa:	0919      	lsrs	r1, r3, #4
 80061ac:	4b7d      	ldr	r3, [pc, #500]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80061ae:	400b      	ands	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	6103      	str	r3, [r0, #16]
 80061b4:	e005      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80061b6:	4a79      	ldr	r2, [pc, #484]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061b8:	4b78      	ldr	r3, [pc, #480]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061c0:	6113      	str	r3, [r2, #16]
 80061c2:	4976      	ldr	r1, [pc, #472]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061c4:	4b75      	ldr	r3, [pc, #468]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d2:	4313      	orrs	r3, r2
 80061d4:	670b      	str	r3, [r1, #112]	; 0x70
 80061d6:	e004      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	75bb      	strb	r3, [r7, #22]
 80061dc:	e001      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d07d      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061f2:	2b28      	cmp	r3, #40	; 0x28
 80061f4:	d866      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	080062cb 	.word	0x080062cb
 8006200:	080062c5 	.word	0x080062c5
 8006204:	080062c5 	.word	0x080062c5
 8006208:	080062c5 	.word	0x080062c5
 800620c:	080062c5 	.word	0x080062c5
 8006210:	080062c5 	.word	0x080062c5
 8006214:	080062c5 	.word	0x080062c5
 8006218:	080062c5 	.word	0x080062c5
 800621c:	080062a1 	.word	0x080062a1
 8006220:	080062c5 	.word	0x080062c5
 8006224:	080062c5 	.word	0x080062c5
 8006228:	080062c5 	.word	0x080062c5
 800622c:	080062c5 	.word	0x080062c5
 8006230:	080062c5 	.word	0x080062c5
 8006234:	080062c5 	.word	0x080062c5
 8006238:	080062c5 	.word	0x080062c5
 800623c:	080062b3 	.word	0x080062b3
 8006240:	080062c5 	.word	0x080062c5
 8006244:	080062c5 	.word	0x080062c5
 8006248:	080062c5 	.word	0x080062c5
 800624c:	080062c5 	.word	0x080062c5
 8006250:	080062c5 	.word	0x080062c5
 8006254:	080062c5 	.word	0x080062c5
 8006258:	080062c5 	.word	0x080062c5
 800625c:	080062cb 	.word	0x080062cb
 8006260:	080062c5 	.word	0x080062c5
 8006264:	080062c5 	.word	0x080062c5
 8006268:	080062c5 	.word	0x080062c5
 800626c:	080062c5 	.word	0x080062c5
 8006270:	080062c5 	.word	0x080062c5
 8006274:	080062c5 	.word	0x080062c5
 8006278:	080062c5 	.word	0x080062c5
 800627c:	080062cb 	.word	0x080062cb
 8006280:	080062c5 	.word	0x080062c5
 8006284:	080062c5 	.word	0x080062c5
 8006288:	080062c5 	.word	0x080062c5
 800628c:	080062c5 	.word	0x080062c5
 8006290:	080062c5 	.word	0x080062c5
 8006294:	080062c5 	.word	0x080062c5
 8006298:	080062c5 	.word	0x080062c5
 800629c:	080062cb 	.word	0x080062cb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fdc6 	bl	8006e38 <RCCEx_PLL2_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062b0:	e00c      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3324      	adds	r3, #36	; 0x24
 80062b6:	2101      	movs	r1, #1
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fe6f 	bl	8006f9c <RCCEx_PLL3_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062c2:	e003      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	75fb      	strb	r3, [r7, #23]
      break;
 80062c8:	e000      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80062ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062d2:	4932      	ldr	r1, [pc, #200]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062d4:	4b31      	ldr	r3, [pc, #196]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e0:	4313      	orrs	r3, r2
 80062e2:	654b      	str	r3, [r1, #84]	; 0x54
 80062e4:	e001      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
 80062e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d037      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d820      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006347 	.word	0x08006347
 8006308:	0800631d 	.word	0x0800631d
 800630c:	0800632f 	.word	0x0800632f
 8006310:	08006347 	.word	0x08006347
 8006314:	08006347 	.word	0x08006347
 8006318:	08006347 	.word	0x08006347
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	2101      	movs	r1, #1
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fd88 	bl	8006e38 <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800632c:	e00c      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3324      	adds	r3, #36	; 0x24
 8006332:	2101      	movs	r1, #1
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fe31 	bl	8006f9c <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800633e:	e003      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
      break;
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800634e:	4913      	ldr	r1, [pc, #76]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006350:	4b12      	ldr	r3, [pc, #72]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	f023 0207 	bic.w	r2, r3, #7
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635c:	4313      	orrs	r3, r2
 800635e:	654b      	str	r3, [r1, #84]	; 0x54
 8006360:	e001      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d040      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006378:	2b05      	cmp	r3, #5
 800637a:	d827      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063d3 	.word	0x080063d3
 8006388:	080063a9 	.word	0x080063a9
 800638c:	080063bb 	.word	0x080063bb
 8006390:	080063d3 	.word	0x080063d3
 8006394:	080063d3 	.word	0x080063d3
 8006398:	080063d3 	.word	0x080063d3
 800639c:	58024400 	.word	0x58024400
 80063a0:	58024800 	.word	0x58024800
 80063a4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3304      	adds	r3, #4
 80063ac:	2101      	movs	r1, #1
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fd42 	bl	8006e38 <RCCEx_PLL2_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063b8:	e00c      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3324      	adds	r3, #36	; 0x24
 80063be:	2101      	movs	r1, #1
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fdeb 	bl	8006f9c <RCCEx_PLL3_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063ca:	e003      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]
      break;
 80063d0:	e000      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80063d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063da:	49b2      	ldr	r1, [pc, #712]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063dc:	4bb1      	ldr	r3, [pc, #708]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	f023 0207 	bic.w	r2, r3, #7
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	4313      	orrs	r3, r2
 80063ec:	658b      	str	r3, [r1, #88]	; 0x58
 80063ee:	e001      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d044      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800640a:	d01b      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800640c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006410:	d805      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d022      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800641a:	d00a      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800641c:	e01b      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006422:	d01d      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006428:	d01c      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800642a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800642e:	d01b      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006430:	e011      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3304      	adds	r3, #4
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fcfd 	bl	8006e38 <RCCEx_PLL2_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006442:	e012      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	2102      	movs	r1, #2
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fda6 	bl	8006f9c <RCCEx_PLL3_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006454:	e009      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
      break;
 800645a:	e006      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800645c:	bf00      	nop
 800645e:	e004      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006460:	bf00      	nop
 8006462:	e002      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006470:	498c      	ldr	r1, [pc, #560]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006472:	4b8c      	ldr	r3, [pc, #560]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006476:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006480:	4313      	orrs	r3, r2
 8006482:	654b      	str	r3, [r1, #84]	; 0x54
 8006484:	e001      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d044      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800649c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a0:	d01b      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80064a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a6:	d805      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d022      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80064ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80064b2:	e01b      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80064b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b8:	d01d      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80064ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064be:	d01c      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80064c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c4:	d01b      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80064c6:	e011      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fcb2 	bl	8006e38 <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064d8:	e012      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3324      	adds	r3, #36	; 0x24
 80064de:	2102      	movs	r1, #2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fd5b 	bl	8006f9c <RCCEx_PLL3_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064ea:	e009      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
      break;
 80064f0:	e006      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80064f2:	bf00      	nop
 80064f4:	e004      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80064f6:	bf00      	nop
 80064f8:	e002      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80064fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006506:	4967      	ldr	r1, [pc, #412]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006508:	4b66      	ldr	r3, [pc, #408]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800650a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006516:	4313      	orrs	r3, r2
 8006518:	658b      	str	r3, [r1, #88]	; 0x58
 800651a:	e001      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b00      	cmp	r3, #0
 800652a:	d044      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006536:	d01b      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800653c:	d805      	bhi.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d022      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006548:	e01b      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d01d      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006550:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006554:	d01c      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006556:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800655a:	d01b      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800655c:	e011      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	2100      	movs	r1, #0
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fc67 	bl	8006e38 <RCCEx_PLL2_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800656e:	e012      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3324      	adds	r3, #36	; 0x24
 8006574:	2102      	movs	r1, #2
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fd10 	bl	8006f9c <RCCEx_PLL3_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006580:	e009      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	75fb      	strb	r3, [r7, #23]
      break;
 8006586:	e006      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006588:	bf00      	nop
 800658a:	e004      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800658c:	bf00      	nop
 800658e:	e002      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800659c:	4941      	ldr	r1, [pc, #260]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800659e:	4b41      	ldr	r3, [pc, #260]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ac:	4313      	orrs	r3, r2
 80065ae:	658b      	str	r3, [r1, #88]	; 0x58
 80065b0:	e001      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065cc:	d10a      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	2102      	movs	r1, #2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fce1 	bl	8006f9c <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065e4:	492f      	ldr	r1, [pc, #188]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065e6:	4b2f      	ldr	r3, [pc, #188]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f4:	4313      	orrs	r3, r2
 80065f6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01a      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800660a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660e:	d10a      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3324      	adds	r3, #36	; 0x24
 8006614:	2102      	movs	r1, #2
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fcc0 	bl	8006f9c <RCCEx_PLL3_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006626:	491f      	ldr	r1, [pc, #124]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800662a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006636:	4313      	orrs	r3, r2
 8006638:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d032      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800664c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006650:	d00d      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006656:	d016      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d111      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fbe8 	bl	8006e38 <RCCEx_PLL2_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800666c:	e00c      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3324      	adds	r3, #36	; 0x24
 8006672:	2102      	movs	r1, #2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fc91 	bl	8006f9c <RCCEx_PLL3_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800667e:	e003      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
      break;
 8006684:	e000      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006688:	7dfb      	ldrb	r3, [r7, #23]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800668e:	4905      	ldr	r1, [pc, #20]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006690:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800669e:	4313      	orrs	r3, r2
 80066a0:	658b      	str	r3, [r1, #88]	; 0x58
 80066a2:	e003      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80066a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
 80066aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d02f      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066c2:	d00c      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80066c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066c8:	d015      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80066ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ce:	d10f      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d0:	4a81      	ldr	r2, [pc, #516]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80066d2:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80066dc:	e00c      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3324      	adds	r3, #36	; 0x24
 80066e2:	2101      	movs	r1, #1
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fc59 	bl	8006f9c <RCCEx_PLL3_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80066ee:	e003      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	75fb      	strb	r3, [r7, #23]
      break;
 80066f4:	e000      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80066f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066fe:	4976      	ldr	r1, [pc, #472]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006700:	4b75      	ldr	r3, [pc, #468]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800670e:	4313      	orrs	r3, r2
 8006710:	654b      	str	r3, [r1, #84]	; 0x54
 8006712:	e001      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d029      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006730:	d007      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006732:	e00f      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006734:	4a68      	ldr	r2, [pc, #416]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006736:	4b68      	ldr	r3, [pc, #416]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006740:	e00b      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	2102      	movs	r1, #2
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fb75 	bl	8006e38 <RCCEx_PLL2_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006752:	e002      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	75fb      	strb	r3, [r7, #23]
      break;
 8006758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800675a:	7dfb      	ldrb	r3, [r7, #23]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006760:	495d      	ldr	r1, [pc, #372]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006762:	4b5d      	ldr	r3, [pc, #372]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676e:	4313      	orrs	r3, r2
 8006770:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006772:	e001      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3324      	adds	r3, #36	; 0x24
 8006788:	2102      	movs	r1, #2
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fc06 	bl	8006f9c <RCCEx_PLL3_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d02f      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ae:	d00c      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80067b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b4:	d802      	bhi.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d011      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80067ba:	e00d      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80067bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c0:	d00f      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80067c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c6:	d00e      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80067c8:	e006      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ca:	4a43      	ldr	r2, [pc, #268]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80067cc:	4b42      	ldr	r3, [pc, #264]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80067d6:	e007      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	75fb      	strb	r3, [r7, #23]
      break;
 80067dc:	e004      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80067de:	bf00      	nop
 80067e0:	e002      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80067e2:	bf00      	nop
 80067e4:	e000      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80067e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067ee:	493a      	ldr	r1, [pc, #232]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80067f0:	4b39      	ldr	r3, [pc, #228]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80067f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fc:	4313      	orrs	r3, r2
 80067fe:	654b      	str	r3, [r1, #84]	; 0x54
 8006800:	e001      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006812:	4931      	ldr	r1, [pc, #196]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006814:	4b30      	ldr	r3, [pc, #192]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006818:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4313      	orrs	r3, r2
 8006822:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d009      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006830:	4929      	ldr	r1, [pc, #164]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006832:	4b29      	ldr	r3, [pc, #164]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006840:	4313      	orrs	r3, r2
 8006842:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006850:	4921      	ldr	r1, [pc, #132]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006852:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006856:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685e:	4313      	orrs	r3, r2
 8006860:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00d      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800686e:	4a1a      	ldr	r2, [pc, #104]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006870:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006878:	6113      	str	r3, [r2, #16]
 800687a:	4917      	ldr	r1, [pc, #92]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800687c:	4b16      	ldr	r3, [pc, #88]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	da08      	bge.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006892:	4911      	ldr	r1, [pc, #68]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006894:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006898:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a0:	4313      	orrs	r3, r2
 80068a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068b0:	4909      	ldr	r1, [pc, #36]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80068b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	4313      	orrs	r3, r2
 80068c2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80068c4:	7dbb      	ldrb	r3, [r7, #22]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xdee>
  {
    return HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e000      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  }
  return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	58024400 	.word	0x58024400

080068dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068e0:	f7ff f8a2 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 80068e4:	4601      	mov	r1, r0
 80068e6:	4b06      	ldr	r3, [pc, #24]	; (8006900 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	4a04      	ldr	r2, [pc, #16]	; (8006904 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068f2:	5cd3      	ldrb	r3, [r2, r3]
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	58024400 	.word	0x58024400
 8006904:	08008f08 	.word	0x08008f08

08006908 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006908:	b480      	push	{r7}
 800690a:	b089      	sub	sp, #36	; 0x24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006910:	4b9d      	ldr	r3, [pc, #628]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800691a:	4b9b      	ldr	r3, [pc, #620]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	0b1b      	lsrs	r3, r3, #12
 8006920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006924:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006926:	4b98      	ldr	r3, [pc, #608]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	091b      	lsrs	r3, r3, #4
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006932:	4b95      	ldr	r3, [pc, #596]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	08db      	lsrs	r3, r3, #3
 8006938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 810a 	beq.w	8006b6a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d05a      	beq.n	8006a12 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800695c:	2b01      	cmp	r3, #1
 800695e:	d302      	bcc.n	8006966 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006960:	2b02      	cmp	r3, #2
 8006962:	d078      	beq.n	8006a56 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006964:	e099      	b.n	8006a9a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006966:	4b88      	ldr	r3, [pc, #544]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d02d      	beq.n	80069ce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006972:	4b85      	ldr	r3, [pc, #532]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	08db      	lsrs	r3, r3, #3
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	4a83      	ldr	r2, [pc, #524]	; (8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699c:	4b7a      	ldr	r3, [pc, #488]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80069b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80069b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80069cc:	e087      	b.n	8006ade <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	ee07 3a90 	vmov	s15, r3
 80069d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80069dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e0:	4b69      	ldr	r3, [pc, #420]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e8:	ee07 3a90 	vmov	s15, r3
 80069ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80069f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a10:	e065      	b.n	8006ade <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	ee07 3a90 	vmov	s15, r3
 8006a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a24:	4b58      	ldr	r3, [pc, #352]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a38:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a54:	e043      	b.n	8006ade <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a60:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a68:	4b47      	ldr	r3, [pc, #284]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a98:	e021      	b.n	8006ade <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aac:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006adc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006ade:	4b2a      	ldr	r3, [pc, #168]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	0a5b      	lsrs	r3, r3, #9
 8006ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae8:	ee07 3a90 	vmov	s15, r3
 8006aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006af4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b04:	ee17 2a90 	vmov	r2, s15
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006b0c:	4b1e      	ldr	r3, [pc, #120]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b32:	ee17 2a90 	vmov	r2, s15
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	0e1b      	lsrs	r3, r3, #24
 8006b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b60:	ee17 2a90 	vmov	r2, s15
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b68:	e008      	b.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	609a      	str	r2, [r3, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	3724      	adds	r7, #36	; 0x24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	58024400 	.word	0x58024400
 8006b8c:	03d09000 	.word	0x03d09000
 8006b90:	46000000 	.word	0x46000000
 8006b94:	4c742400 	.word	0x4c742400
 8006b98:	4a742400 	.word	0x4a742400
 8006b9c:	4af42400 	.word	0x4af42400

08006ba0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	; 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ba8:	4b9d      	ldr	r3, [pc, #628]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006bb2:	4b9b      	ldr	r3, [pc, #620]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	0d1b      	lsrs	r3, r3, #20
 8006bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006bbe:	4b98      	ldr	r3, [pc, #608]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006bca:	4b95      	ldr	r3, [pc, #596]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	08db      	lsrs	r3, r3, #3
 8006bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	fb02 f303 	mul.w	r3, r2, r3
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 810a 	beq.w	8006e02 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d05a      	beq.n	8006caa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d302      	bcc.n	8006bfe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d078      	beq.n	8006cee <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006bfc:	e099      	b.n	8006d32 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bfe:	4b88      	ldr	r3, [pc, #544]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d02d      	beq.n	8006c66 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c0a:	4b85      	ldr	r3, [pc, #532]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	08db      	lsrs	r3, r3, #3
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	4a83      	ldr	r2, [pc, #524]	; (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006c16:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c34:	4b7a      	ldr	r3, [pc, #488]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c48:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c60:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c64:	e087      	b.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c70:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c78:	4b69      	ldr	r3, [pc, #420]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	ee07 3a90 	vmov	s15, r3
 8006c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c8c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ca8:	e065      	b.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	ee07 3a90 	vmov	s15, r3
 8006cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cbc:	4b58      	ldr	r3, [pc, #352]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cd0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cec:	e043      	b.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d00:	4b47      	ldr	r3, [pc, #284]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d10:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d14:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d30:	e021      	b.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d44:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d54:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d58:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d74:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006d76:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	0a5b      	lsrs	r3, r3, #9
 8006d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d80:	ee07 3a90 	vmov	s15, r3
 8006d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d9c:	ee17 2a90 	vmov	r2, s15
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006da4:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	0c1b      	lsrs	r3, r3, #16
 8006daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dca:	ee17 2a90 	vmov	r2, s15
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006dd2:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	0e1b      	lsrs	r3, r3, #24
 8006dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006de8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df8:	ee17 2a90 	vmov	r2, s15
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e00:	e008      	b.n	8006e14 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	609a      	str	r2, [r3, #8]
}
 8006e14:	bf00      	nop
 8006e16:	3724      	adds	r7, #36	; 0x24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	58024400 	.word	0x58024400
 8006e24:	03d09000 	.word	0x03d09000
 8006e28:	46000000 	.word	0x46000000
 8006e2c:	4c742400 	.word	0x4c742400
 8006e30:	4a742400 	.word	0x4a742400
 8006e34:	4af42400 	.word	0x4af42400

08006e38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e46:	4b53      	ldr	r3, [pc, #332]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d101      	bne.n	8006e56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e099      	b.n	8006f8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e56:	4a4f      	ldr	r2, [pc, #316]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e58:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e62:	f7fa f8d5 	bl	8001010 <HAL_GetTick>
 8006e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e68:	e008      	b.n	8006e7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e6a:	f7fa f8d1 	bl	8001010 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e086      	b.n	8006f8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e7c:	4b45      	ldr	r3, [pc, #276]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f0      	bne.n	8006e6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e88:	4942      	ldr	r1, [pc, #264]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e8a:	4b42      	ldr	r3, [pc, #264]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	031b      	lsls	r3, r3, #12
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	628b      	str	r3, [r1, #40]	; 0x28
 8006e9c:	493d      	ldr	r1, [pc, #244]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	025b      	lsls	r3, r3, #9
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ed2:	4930      	ldr	r1, [pc, #192]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ed4:	4b2f      	ldr	r3, [pc, #188]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ee4:	492b      	ldr	r1, [pc, #172]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ee6:	4b2b      	ldr	r3, [pc, #172]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	f023 0220 	bic.w	r2, r3, #32
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ef6:	4a27      	ldr	r2, [pc, #156]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ef8:	4b26      	ldr	r3, [pc, #152]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	f023 0310 	bic.w	r3, r3, #16
 8006f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f02:	4924      	ldr	r1, [pc, #144]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f04:	4b23      	ldr	r3, [pc, #140]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f08:	4b23      	ldr	r3, [pc, #140]	; (8006f98 <RCCEx_PLL2_Config+0x160>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	69d2      	ldr	r2, [r2, #28]
 8006f10:	00d2      	lsls	r2, r2, #3
 8006f12:	4313      	orrs	r3, r2
 8006f14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f16:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f18:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	f043 0310 	orr.w	r3, r3, #16
 8006f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f28:	4a1a      	ldr	r2, [pc, #104]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f2a:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f34:	e00f      	b.n	8006f56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d106      	bne.n	8006f4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f3c:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f3e:	4b15      	ldr	r3, [pc, #84]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f48:	e005      	b.n	8006f56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f4a:	4a12      	ldr	r2, [pc, #72]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f56:	4a0f      	ldr	r2, [pc, #60]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f62:	f7fa f855 	bl	8001010 <HAL_GetTick>
 8006f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f68:	e008      	b.n	8006f7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f6a:	f7fa f851 	bl	8001010 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e006      	b.n	8006f8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	58024400 	.word	0x58024400
 8006f98:	ffff0007 	.word	0xffff0007

08006f9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006faa:	4b53      	ldr	r3, [pc, #332]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d101      	bne.n	8006fba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e099      	b.n	80070ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fba:	4a4f      	ldr	r2, [pc, #316]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fbc:	4b4e      	ldr	r3, [pc, #312]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc6:	f7fa f823 	bl	8001010 <HAL_GetTick>
 8006fca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fcc:	e008      	b.n	8006fe0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006fce:	f7fa f81f 	bl	8001010 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e086      	b.n	80070ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fe0:	4b45      	ldr	r3, [pc, #276]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f0      	bne.n	8006fce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fec:	4942      	ldr	r1, [pc, #264]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fee:	4b42      	ldr	r3, [pc, #264]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	051b      	lsls	r3, r3, #20
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8007000:	493d      	ldr	r1, [pc, #244]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	3b01      	subs	r3, #1
 8007008:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	3b01      	subs	r3, #1
 8007012:	025b      	lsls	r3, r3, #9
 8007014:	b29b      	uxth	r3, r3
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	3b01      	subs	r3, #1
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	3b01      	subs	r3, #1
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007032:	4313      	orrs	r3, r2
 8007034:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007036:	4930      	ldr	r1, [pc, #192]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007038:	4b2f      	ldr	r3, [pc, #188]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007048:	492b      	ldr	r1, [pc, #172]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800704a:	4b2b      	ldr	r3, [pc, #172]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	4313      	orrs	r3, r2
 8007058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800705a:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800705c:	4b26      	ldr	r3, [pc, #152]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007066:	4924      	ldr	r1, [pc, #144]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007068:	4b23      	ldr	r3, [pc, #140]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800706a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <RCCEx_PLL3_Config+0x160>)
 800706e:	4013      	ands	r3, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	69d2      	ldr	r2, [r2, #28]
 8007074:	00d2      	lsls	r2, r2, #3
 8007076:	4313      	orrs	r3, r2
 8007078:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800707a:	4a1f      	ldr	r2, [pc, #124]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800707c:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800708c:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800708e:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007098:	e00f      	b.n	80070ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d106      	bne.n	80070ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070a0:	4a15      	ldr	r2, [pc, #84]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070ac:	e005      	b.n	80070ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070ae:	4a12      	ldr	r2, [pc, #72]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070b0:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070ba:	4a0f      	ldr	r2, [pc, #60]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c6:	f7f9 ffa3 	bl	8001010 <HAL_GetTick>
 80070ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070cc:	e008      	b.n	80070e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070ce:	f7f9 ff9f 	bl	8001010 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e006      	b.n	80070ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	58024400 	.word	0x58024400
 80070fc:	ffff0007 	.word	0xffff0007

08007100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e042      	b.n	8007198 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007118:	2b00      	cmp	r3, #0
 800711a:	d106      	bne.n	800712a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7f9 fd87 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2224      	movs	r2, #36	; 0x24
 800712e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6812      	ldr	r2, [r2, #0]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	f022 0201 	bic.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc86 	bl	8007a54 <UART_SetConfig>
 8007148:	4603      	mov	r3, r0
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e022      	b.n	8007198 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fa1a 	bl	8008594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6812      	ldr	r2, [r2, #0]
 8007168:	6852      	ldr	r2, [r2, #4]
 800716a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800716e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6812      	ldr	r2, [r2, #0]
 8007178:	6892      	ldr	r2, [r2, #8]
 800717a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800717e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 faa1 	bl	80086d8 <UART_CheckIdleState>
 8007196:	4603      	mov	r3, r0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d17a      	bne.n	80072ae <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_UART_Transmit_DMA+0x24>
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e073      	b.n	80072b0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Transmit_DMA+0x36>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e06c      	b.n	80072b0 <HAL_UART_Transmit_DMA+0x110>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2221      	movs	r2, #33	; 0x21
 8007200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007208:	2b00      	cmp	r3, #0
 800720a:	d02c      	beq.n	8007266 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007210:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <HAL_UART_Transmit_DMA+0x118>)
 8007212:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007218:	4a28      	ldr	r2, [pc, #160]	; (80072bc <HAL_UART_Transmit_DMA+0x11c>)
 800721a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007220:	4a27      	ldr	r2, [pc, #156]	; (80072c0 <HAL_UART_Transmit_DMA+0x120>)
 8007222:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007228:	2200      	movs	r2, #0
 800722a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007234:	4619      	mov	r1, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3328      	adds	r3, #40	; 0x28
 800723c:	461a      	mov	r2, r3
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	f7fa fb9e 	bl	8001980 <HAL_DMA_Start_IT>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00d      	beq.n	8007266 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2210      	movs	r2, #16
 800724e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e024      	b.n	80072b0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2240      	movs	r2, #64	; 0x40
 800726c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	613b      	str	r3, [r7, #16]
   return(result);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007296:	623a      	str	r2, [r7, #32]
 8007298:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	69f9      	ldr	r1, [r7, #28]
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e5      	bne.n	8007276 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	e000      	b.n	80072b0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80072ae:	2302      	movs	r3, #2
  }
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3728      	adds	r7, #40	; 0x28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	08008a4d 	.word	0x08008a4d
 80072bc:	08008ae3 	.word	0x08008ae3
 80072c0:	08008aff 	.word	0x08008aff

080072c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b0ba      	sub	sp, #232	; 0xe8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80072f2:	4013      	ands	r3, r2
 80072f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11b      	bne.n	8007338 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d015      	beq.n	8007338 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d105      	bne.n	8007324 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800731c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 835b 	beq.w	80079e4 <HAL_UART_IRQHandler+0x720>
      {
        huart->RxISR(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
      }
      return;
 8007336:	e355      	b.n	80079e4 <HAL_UART_IRQHandler+0x720>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 811f 	beq.w	8007580 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007342:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007346:	4b8b      	ldr	r3, [pc, #556]	; (8007574 <HAL_UART_IRQHandler+0x2b0>)
 8007348:	4013      	ands	r3, r2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800734e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007352:	4b89      	ldr	r3, [pc, #548]	; (8007578 <HAL_UART_IRQHandler+0x2b4>)
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8112 	beq.w	8007580 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800735c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d011      	beq.n	800738c <HAL_UART_IRQHandler+0xc8>
 8007368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2201      	movs	r2, #1
 800737a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007382:	f043 0201 	orr.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800738c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d011      	beq.n	80073bc <HAL_UART_IRQHandler+0xf8>
 8007398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2202      	movs	r2, #2
 80073aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d011      	beq.n	80073ec <HAL_UART_IRQHandler+0x128>
 80073c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2204      	movs	r2, #4
 80073da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e2:	f043 0202 	orr.w	r2, r3, #2
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d017      	beq.n	8007428 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b00      	cmp	r3, #0
 8007402:	d105      	bne.n	8007410 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007404:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007408:	4b5a      	ldr	r3, [pc, #360]	; (8007574 <HAL_UART_IRQHandler+0x2b0>)
 800740a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2208      	movs	r2, #8
 8007416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800741e:	f043 0208 	orr.w	r2, r3, #8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007430:	2b00      	cmp	r3, #0
 8007432:	d012      	beq.n	800745a <HAL_UART_IRQHandler+0x196>
 8007434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00c      	beq.n	800745a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007450:	f043 0220 	orr.w	r2, r3, #32
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 82c1 	beq.w	80079e8 <HAL_UART_IRQHandler+0x724>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d013      	beq.n	800749a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800747e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d005      	beq.n	80074be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d04f      	beq.n	800755e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 fa5e 	bl	8008980 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d141      	bne.n	8007556 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3308      	adds	r3, #8
 80074fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800750a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1d9      	bne.n	80074d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d013      	beq.n	800754e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752a:	4a14      	ldr	r2, [pc, #80]	; (800757c <HAL_UART_IRQHandler+0x2b8>)
 800752c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007532:	4618      	mov	r0, r3
 8007534:	f7fa ffac 	bl	8002490 <HAL_DMA_Abort_IT>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d017      	beq.n	800756e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754c:	e00f      	b.n	800756e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa6a 	bl	8007a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007554:	e00b      	b.n	800756e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa66 	bl	8007a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755c:	e007      	b.n	800756e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa62 	bl	8007a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800756c:	e23c      	b.n	80079e8 <HAL_UART_IRQHandler+0x724>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756e:	bf00      	nop
    return;
 8007570:	e23a      	b.n	80079e8 <HAL_UART_IRQHandler+0x724>
 8007572:	bf00      	nop
 8007574:	10000001 	.word	0x10000001
 8007578:	04000120 	.word	0x04000120
 800757c:	08008b7f 	.word	0x08008b7f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007584:	2b01      	cmp	r3, #1
 8007586:	f040 81ce 	bne.w	8007926 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 81c7 	beq.w	8007926 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 81c0 	beq.w	8007926 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2210      	movs	r2, #16
 80075ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	f040 813b 	bne.w	8007834 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a8b      	ldr	r2, [pc, #556]	; (80077f4 <HAL_UART_IRQHandler+0x530>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d059      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a89      	ldr	r2, [pc, #548]	; (80077f8 <HAL_UART_IRQHandler+0x534>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d053      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a87      	ldr	r2, [pc, #540]	; (80077fc <HAL_UART_IRQHandler+0x538>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d04d      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a85      	ldr	r2, [pc, #532]	; (8007800 <HAL_UART_IRQHandler+0x53c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d047      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a83      	ldr	r2, [pc, #524]	; (8007804 <HAL_UART_IRQHandler+0x540>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d041      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a81      	ldr	r2, [pc, #516]	; (8007808 <HAL_UART_IRQHandler+0x544>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d03b      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a7f      	ldr	r2, [pc, #508]	; (800780c <HAL_UART_IRQHandler+0x548>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d035      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a7d      	ldr	r2, [pc, #500]	; (8007810 <HAL_UART_IRQHandler+0x54c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d02f      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a7b      	ldr	r2, [pc, #492]	; (8007814 <HAL_UART_IRQHandler+0x550>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d029      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a79      	ldr	r2, [pc, #484]	; (8007818 <HAL_UART_IRQHandler+0x554>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d023      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a77      	ldr	r2, [pc, #476]	; (800781c <HAL_UART_IRQHandler+0x558>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d01d      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a75      	ldr	r2, [pc, #468]	; (8007820 <HAL_UART_IRQHandler+0x55c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d017      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a73      	ldr	r2, [pc, #460]	; (8007824 <HAL_UART_IRQHandler+0x560>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d011      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a71      	ldr	r2, [pc, #452]	; (8007828 <HAL_UART_IRQHandler+0x564>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00b      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a6f      	ldr	r2, [pc, #444]	; (800782c <HAL_UART_IRQHandler+0x568>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d005      	beq.n	800767e <HAL_UART_IRQHandler+0x3ba>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a6d      	ldr	r2, [pc, #436]	; (8007830 <HAL_UART_IRQHandler+0x56c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d105      	bne.n	800768a <HAL_UART_IRQHandler+0x3c6>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	b29b      	uxth	r3, r3
 8007688:	e004      	b.n	8007694 <HAL_UART_IRQHandler+0x3d0>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	b29b      	uxth	r3, r3
 8007694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((nb_remaining_rx_data > 0U)
 8007698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 81a5 	beq.w	80079ec <HAL_UART_IRQHandler+0x728>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076a8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80076ac:	429a      	cmp	r2, r3
 80076ae:	f080 819d 	bcs.w	80079ec <HAL_UART_IRQHandler+0x728>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80076b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c6:	f000 8086 	beq.w	80077d6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007700:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800770c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1da      	bne.n	80076ca <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3308      	adds	r3, #8
 800771a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007726:	f023 0301 	bic.w	r3, r3, #1
 800772a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007738:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800773c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007740:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800774a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e1      	bne.n	8007714 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007774:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007776:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800777a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e3      	bne.n	8007750 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a6:	f023 0310 	bic.w	r3, r3, #16
 80077aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e4      	bne.n	8007796 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fa fb3f 	bl	8001e54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f926 	bl	8007a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077f0:	e0fc      	b.n	80079ec <HAL_UART_IRQHandler+0x728>
 80077f2:	bf00      	nop
 80077f4:	40020010 	.word	0x40020010
 80077f8:	40020028 	.word	0x40020028
 80077fc:	40020040 	.word	0x40020040
 8007800:	40020058 	.word	0x40020058
 8007804:	40020070 	.word	0x40020070
 8007808:	40020088 	.word	0x40020088
 800780c:	400200a0 	.word	0x400200a0
 8007810:	400200b8 	.word	0x400200b8
 8007814:	40020410 	.word	0x40020410
 8007818:	40020428 	.word	0x40020428
 800781c:	40020440 	.word	0x40020440
 8007820:	40020458 	.word	0x40020458
 8007824:	40020470 	.word	0x40020470
 8007828:	40020488 	.word	0x40020488
 800782c:	400204a0 	.word	0x400204a0
 8007830:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007840:	b29b      	uxth	r3, r3
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
      if ((huart->RxXferCount > 0U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 80cd 	beq.w	80079f0 <HAL_UART_IRQHandler+0x72c>
          && (nb_rx_data > 0U))
 8007856:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80c8 	beq.w	80079f0 <HAL_UART_IRQHandler+0x72c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800786e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007882:	647b      	str	r3, [r7, #68]	; 0x44
 8007884:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e4      	bne.n	8007860 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	623b      	str	r3, [r7, #32]
   return(result);
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	4b54      	ldr	r3, [pc, #336]	; (80079fc <HAL_UART_IRQHandler+0x738>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078ba:	633a      	str	r2, [r7, #48]	; 0x30
 80078bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e3      	bne.n	8007896 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0310 	bic.w	r3, r3, #16
 80078f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007904:	61fb      	str	r3, [r7, #28]
 8007906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	69b9      	ldr	r1, [r7, #24]
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	617b      	str	r3, [r7, #20]
   return(result);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e4      	bne.n	80078e2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007918:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f88c 	bl	8007a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007924:	e064      	b.n	80079f0 <HAL_UART_IRQHandler+0x72c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <HAL_UART_IRQHandler+0x68c>
 8007932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d008      	beq.n	8007950 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007946:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f959 	bl	8008c00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800794e:	e052      	b.n	80079f6 <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007958:	2b00      	cmp	r3, #0
 800795a:	d014      	beq.n	8007986 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800795c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007964:	2b00      	cmp	r3, #0
 8007966:	d105      	bne.n	8007974 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800796c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007978:	2b00      	cmp	r3, #0
 800797a:	d03b      	beq.n	80079f4 <HAL_UART_IRQHandler+0x730>
    {
      huart->TxISR(huart);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
    }
    return;
 8007984:	e036      	b.n	80079f4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <HAL_UART_IRQHandler+0x6e2>
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 f903 	bl	8008baa <UART_EndTransmit_IT>
    return;
 80079a4:	e027      	b.n	80079f6 <HAL_UART_IRQHandler+0x732>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <HAL_UART_IRQHandler+0x702>
 80079b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 f932 	bl	8008c28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079c4:	e017      	b.n	80079f6 <HAL_UART_IRQHandler+0x732>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d011      	beq.n	80079f6 <HAL_UART_IRQHandler+0x732>
 80079d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da0d      	bge.n	80079f6 <HAL_UART_IRQHandler+0x732>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 f91a 	bl	8008c14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079e0:	bf00      	nop
 80079e2:	e008      	b.n	80079f6 <HAL_UART_IRQHandler+0x732>
      return;
 80079e4:	bf00      	nop
 80079e6:	e006      	b.n	80079f6 <HAL_UART_IRQHandler+0x732>
    return;
 80079e8:	bf00      	nop
 80079ea:	e004      	b.n	80079f6 <HAL_UART_IRQHandler+0x732>
      return;
 80079ec:	bf00      	nop
 80079ee:	e002      	b.n	80079f6 <HAL_UART_IRQHandler+0x732>
      return;
 80079f0:	bf00      	nop
 80079f2:	e000      	b.n	80079f6 <HAL_UART_IRQHandler+0x732>
    return;
 80079f4:	bf00      	nop
  }
}
 80079f6:	37e8      	adds	r7, #232	; 0xe8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	effffffe 	.word	0xeffffffe

08007a00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a54:	b5b0      	push	{r4, r5, r7, lr}
 8007a56:	b08e      	sub	sp, #56	; 0x38
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6819      	ldr	r1, [r3, #0]
 8007a84:	4bc2      	ldr	r3, [pc, #776]	; (8007d90 <UART_SetConfig+0x33c>)
 8007a86:	400b      	ands	r3, r1
 8007a88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	6852      	ldr	r2, [r2, #4]
 8007a98:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68d2      	ldr	r2, [r2, #12]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4ab9      	ldr	r2, [pc, #740]	; (8007d94 <UART_SetConfig+0x340>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aba:	4313      	orrs	r3, r2
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6899      	ldr	r1, [r3, #8]
 8007ac8:	4bb3      	ldr	r3, [pc, #716]	; (8007d98 <UART_SetConfig+0x344>)
 8007aca:	400b      	ands	r3, r1
 8007acc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ace:	430b      	orrs	r3, r1
 8007ad0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007adc:	f022 010f 	bic.w	r1, r2, #15
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4aab      	ldr	r2, [pc, #684]	; (8007d9c <UART_SetConfig+0x348>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d177      	bne.n	8007be2 <UART_SetConfig+0x18e>
 8007af2:	4bab      	ldr	r3, [pc, #684]	; (8007da0 <UART_SetConfig+0x34c>)
 8007af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007afa:	2b28      	cmp	r3, #40	; 0x28
 8007afc:	d86c      	bhi.n	8007bd8 <UART_SetConfig+0x184>
 8007afe:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <UART_SetConfig+0xb0>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007ba9 	.word	0x08007ba9
 8007b08:	08007bd9 	.word	0x08007bd9
 8007b0c:	08007bd9 	.word	0x08007bd9
 8007b10:	08007bd9 	.word	0x08007bd9
 8007b14:	08007bd9 	.word	0x08007bd9
 8007b18:	08007bd9 	.word	0x08007bd9
 8007b1c:	08007bd9 	.word	0x08007bd9
 8007b20:	08007bd9 	.word	0x08007bd9
 8007b24:	08007bb1 	.word	0x08007bb1
 8007b28:	08007bd9 	.word	0x08007bd9
 8007b2c:	08007bd9 	.word	0x08007bd9
 8007b30:	08007bd9 	.word	0x08007bd9
 8007b34:	08007bd9 	.word	0x08007bd9
 8007b38:	08007bd9 	.word	0x08007bd9
 8007b3c:	08007bd9 	.word	0x08007bd9
 8007b40:	08007bd9 	.word	0x08007bd9
 8007b44:	08007bb9 	.word	0x08007bb9
 8007b48:	08007bd9 	.word	0x08007bd9
 8007b4c:	08007bd9 	.word	0x08007bd9
 8007b50:	08007bd9 	.word	0x08007bd9
 8007b54:	08007bd9 	.word	0x08007bd9
 8007b58:	08007bd9 	.word	0x08007bd9
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bd9 	.word	0x08007bd9
 8007b64:	08007bc1 	.word	0x08007bc1
 8007b68:	08007bd9 	.word	0x08007bd9
 8007b6c:	08007bd9 	.word	0x08007bd9
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007bd9 	.word	0x08007bd9
 8007b78:	08007bd9 	.word	0x08007bd9
 8007b7c:	08007bd9 	.word	0x08007bd9
 8007b80:	08007bd9 	.word	0x08007bd9
 8007b84:	08007bc9 	.word	0x08007bc9
 8007b88:	08007bd9 	.word	0x08007bd9
 8007b8c:	08007bd9 	.word	0x08007bd9
 8007b90:	08007bd9 	.word	0x08007bd9
 8007b94:	08007bd9 	.word	0x08007bd9
 8007b98:	08007bd9 	.word	0x08007bd9
 8007b9c:	08007bd9 	.word	0x08007bd9
 8007ba0:	08007bd9 	.word	0x08007bd9
 8007ba4:	08007bd1 	.word	0x08007bd1
 8007ba8:	2301      	movs	r3, #1
 8007baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bae:	e233      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bb6:	e22f      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bbe:	e22b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bc6:	e227      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007bc8:	2320      	movs	r3, #32
 8007bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bce:	e223      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bd6:	e21f      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007bd8:	2380      	movs	r3, #128	; 0x80
 8007bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bde:	bf00      	nop
 8007be0:	e21a      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a6f      	ldr	r2, [pc, #444]	; (8007da4 <UART_SetConfig+0x350>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d132      	bne.n	8007c52 <UART_SetConfig+0x1fe>
 8007bec:	4b6c      	ldr	r3, [pc, #432]	; (8007da0 <UART_SetConfig+0x34c>)
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	2b05      	cmp	r3, #5
 8007bf6:	d827      	bhi.n	8007c48 <UART_SetConfig+0x1f4>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0x1ac>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c19 	.word	0x08007c19
 8007c04:	08007c21 	.word	0x08007c21
 8007c08:	08007c29 	.word	0x08007c29
 8007c0c:	08007c31 	.word	0x08007c31
 8007c10:	08007c39 	.word	0x08007c39
 8007c14:	08007c41 	.word	0x08007c41
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c1e:	e1fb      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c20:	2304      	movs	r3, #4
 8007c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c26:	e1f7      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c2e:	e1f3      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c30:	2310      	movs	r3, #16
 8007c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c36:	e1ef      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c3e:	e1eb      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c46:	e1e7      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c48:	2380      	movs	r3, #128	; 0x80
 8007c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c4e:	bf00      	nop
 8007c50:	e1e2      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a54      	ldr	r2, [pc, #336]	; (8007da8 <UART_SetConfig+0x354>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d132      	bne.n	8007cc2 <UART_SetConfig+0x26e>
 8007c5c:	4b50      	ldr	r3, [pc, #320]	; (8007da0 <UART_SetConfig+0x34c>)
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	2b05      	cmp	r3, #5
 8007c66:	d827      	bhi.n	8007cb8 <UART_SetConfig+0x264>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <UART_SetConfig+0x21c>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c89 	.word	0x08007c89
 8007c74:	08007c91 	.word	0x08007c91
 8007c78:	08007c99 	.word	0x08007c99
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007ca9 	.word	0x08007ca9
 8007c84:	08007cb1 	.word	0x08007cb1
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c8e:	e1c3      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c96:	e1bf      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c9e:	e1bb      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ca6:	e1b7      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cae:	e1b3      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cb6:	e1af      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cbe:	bf00      	nop
 8007cc0:	e1aa      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a39      	ldr	r2, [pc, #228]	; (8007dac <UART_SetConfig+0x358>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d132      	bne.n	8007d32 <UART_SetConfig+0x2de>
 8007ccc:	4b34      	ldr	r3, [pc, #208]	; (8007da0 <UART_SetConfig+0x34c>)
 8007cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	2b05      	cmp	r3, #5
 8007cd6:	d827      	bhi.n	8007d28 <UART_SetConfig+0x2d4>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <UART_SetConfig+0x28c>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007cf9 	.word	0x08007cf9
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08007d09 	.word	0x08007d09
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfe:	e18b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d00:	2304      	movs	r3, #4
 8007d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d06:	e187      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0e:	e183      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d10:	2310      	movs	r3, #16
 8007d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d16:	e17f      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d18:	2320      	movs	r3, #32
 8007d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d1e:	e17b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d26:	e177      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d2e:	bf00      	nop
 8007d30:	e172      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <UART_SetConfig+0x35c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d144      	bne.n	8007dc6 <UART_SetConfig+0x372>
 8007d3c:	4b18      	ldr	r3, [pc, #96]	; (8007da0 <UART_SetConfig+0x34c>)
 8007d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	2b05      	cmp	r3, #5
 8007d46:	d839      	bhi.n	8007dbc <UART_SetConfig+0x368>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0x2fc>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d69 	.word	0x08007d69
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d79 	.word	0x08007d79
 8007d5c:	08007d81 	.word	0x08007d81
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007db5 	.word	0x08007db5
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e153      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d70:	2304      	movs	r3, #4
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	e14f      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d78:	2308      	movs	r3, #8
 8007d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d7e:	e14b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d86:	e147      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d88:	2320      	movs	r3, #32
 8007d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d8e:	e143      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007d90:	cfff69f3 	.word	0xcfff69f3
 8007d94:	58000c00 	.word	0x58000c00
 8007d98:	11fff4ff 	.word	0x11fff4ff
 8007d9c:	40011000 	.word	0x40011000
 8007da0:	58024400 	.word	0x58024400
 8007da4:	40004400 	.word	0x40004400
 8007da8:	40004800 	.word	0x40004800
 8007dac:	40004c00 	.word	0x40004c00
 8007db0:	40005000 	.word	0x40005000
 8007db4:	2340      	movs	r3, #64	; 0x40
 8007db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dba:	e12d      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc2:	bf00      	nop
 8007dc4:	e128      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4ab6      	ldr	r2, [pc, #728]	; (80080a4 <UART_SetConfig+0x650>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d178      	bne.n	8007ec2 <UART_SetConfig+0x46e>
 8007dd0:	4bb5      	ldr	r3, [pc, #724]	; (80080a8 <UART_SetConfig+0x654>)
 8007dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dd8:	2b28      	cmp	r3, #40	; 0x28
 8007dda:	d86d      	bhi.n	8007eb8 <UART_SetConfig+0x464>
 8007ddc:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <UART_SetConfig+0x390>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007e89 	.word	0x08007e89
 8007de8:	08007eb9 	.word	0x08007eb9
 8007dec:	08007eb9 	.word	0x08007eb9
 8007df0:	08007eb9 	.word	0x08007eb9
 8007df4:	08007eb9 	.word	0x08007eb9
 8007df8:	08007eb9 	.word	0x08007eb9
 8007dfc:	08007eb9 	.word	0x08007eb9
 8007e00:	08007eb9 	.word	0x08007eb9
 8007e04:	08007e91 	.word	0x08007e91
 8007e08:	08007eb9 	.word	0x08007eb9
 8007e0c:	08007eb9 	.word	0x08007eb9
 8007e10:	08007eb9 	.word	0x08007eb9
 8007e14:	08007eb9 	.word	0x08007eb9
 8007e18:	08007eb9 	.word	0x08007eb9
 8007e1c:	08007eb9 	.word	0x08007eb9
 8007e20:	08007eb9 	.word	0x08007eb9
 8007e24:	08007e99 	.word	0x08007e99
 8007e28:	08007eb9 	.word	0x08007eb9
 8007e2c:	08007eb9 	.word	0x08007eb9
 8007e30:	08007eb9 	.word	0x08007eb9
 8007e34:	08007eb9 	.word	0x08007eb9
 8007e38:	08007eb9 	.word	0x08007eb9
 8007e3c:	08007eb9 	.word	0x08007eb9
 8007e40:	08007eb9 	.word	0x08007eb9
 8007e44:	08007ea1 	.word	0x08007ea1
 8007e48:	08007eb9 	.word	0x08007eb9
 8007e4c:	08007eb9 	.word	0x08007eb9
 8007e50:	08007eb9 	.word	0x08007eb9
 8007e54:	08007eb9 	.word	0x08007eb9
 8007e58:	08007eb9 	.word	0x08007eb9
 8007e5c:	08007eb9 	.word	0x08007eb9
 8007e60:	08007eb9 	.word	0x08007eb9
 8007e64:	08007ea9 	.word	0x08007ea9
 8007e68:	08007eb9 	.word	0x08007eb9
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007eb9 	.word	0x08007eb9
 8007e78:	08007eb9 	.word	0x08007eb9
 8007e7c:	08007eb9 	.word	0x08007eb9
 8007e80:	08007eb9 	.word	0x08007eb9
 8007e84:	08007eb1 	.word	0x08007eb1
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e8e:	e0c3      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007e90:	2304      	movs	r3, #4
 8007e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e96:	e0bf      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007e98:	2308      	movs	r3, #8
 8007e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9e:	e0bb      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea6:	e0b7      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007ea8:	2320      	movs	r3, #32
 8007eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eae:	e0b3      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007eb0:	2340      	movs	r3, #64	; 0x40
 8007eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb6:	e0af      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007eb8:	2380      	movs	r3, #128	; 0x80
 8007eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ebe:	bf00      	nop
 8007ec0:	e0aa      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a79      	ldr	r2, [pc, #484]	; (80080ac <UART_SetConfig+0x658>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d132      	bne.n	8007f32 <UART_SetConfig+0x4de>
 8007ecc:	4b76      	ldr	r3, [pc, #472]	; (80080a8 <UART_SetConfig+0x654>)
 8007ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	2b05      	cmp	r3, #5
 8007ed6:	d827      	bhi.n	8007f28 <UART_SetConfig+0x4d4>
 8007ed8:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <UART_SetConfig+0x48c>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007ef9 	.word	0x08007ef9
 8007ee4:	08007f01 	.word	0x08007f01
 8007ee8:	08007f09 	.word	0x08007f09
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007f19 	.word	0x08007f19
 8007ef4:	08007f21 	.word	0x08007f21
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007efe:	e08b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f00:	2304      	movs	r3, #4
 8007f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f06:	e087      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f08:	2308      	movs	r3, #8
 8007f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f0e:	e083      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f10:	2310      	movs	r3, #16
 8007f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f16:	e07f      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f18:	2320      	movs	r3, #32
 8007f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1e:	e07b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f20:	2340      	movs	r3, #64	; 0x40
 8007f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f26:	e077      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f28:	2380      	movs	r3, #128	; 0x80
 8007f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2e:	bf00      	nop
 8007f30:	e072      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a5e      	ldr	r2, [pc, #376]	; (80080b0 <UART_SetConfig+0x65c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d132      	bne.n	8007fa2 <UART_SetConfig+0x54e>
 8007f3c:	4b5a      	ldr	r3, [pc, #360]	; (80080a8 <UART_SetConfig+0x654>)
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f40:	f003 0307 	and.w	r3, r3, #7
 8007f44:	2b05      	cmp	r3, #5
 8007f46:	d827      	bhi.n	8007f98 <UART_SetConfig+0x544>
 8007f48:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <UART_SetConfig+0x4fc>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f71 	.word	0x08007f71
 8007f58:	08007f79 	.word	0x08007f79
 8007f5c:	08007f81 	.word	0x08007f81
 8007f60:	08007f89 	.word	0x08007f89
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6e:	e053      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f76:	e04f      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f7e:	e04b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f80:	2310      	movs	r3, #16
 8007f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f86:	e047      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f8e:	e043      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f90:	2340      	movs	r3, #64	; 0x40
 8007f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f96:	e03f      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007f98:	2380      	movs	r3, #128	; 0x80
 8007f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f9e:	bf00      	nop
 8007fa0:	e03a      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a43      	ldr	r2, [pc, #268]	; (80080b4 <UART_SetConfig+0x660>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d132      	bne.n	8008012 <UART_SetConfig+0x5be>
 8007fac:	4b3e      	ldr	r3, [pc, #248]	; (80080a8 <UART_SetConfig+0x654>)
 8007fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	2b05      	cmp	r3, #5
 8007fb6:	d827      	bhi.n	8008008 <UART_SetConfig+0x5b4>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x56c>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fd9 	.word	0x08007fd9
 8007fc4:	08007fe1 	.word	0x08007fe1
 8007fc8:	08007fe9 	.word	0x08007fe9
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007ff9 	.word	0x08007ff9
 8007fd4:	08008001 	.word	0x08008001
 8007fd8:	2302      	movs	r3, #2
 8007fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fde:	e01b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe6:	e017      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007fe8:	2308      	movs	r3, #8
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fee:	e013      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff6:	e00f      	b.n	8008018 <UART_SetConfig+0x5c4>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ffe:	e00b      	b.n	8008018 <UART_SetConfig+0x5c4>
 8008000:	2340      	movs	r3, #64	; 0x40
 8008002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008006:	e007      	b.n	8008018 <UART_SetConfig+0x5c4>
 8008008:	2380      	movs	r3, #128	; 0x80
 800800a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800800e:	bf00      	nop
 8008010:	e002      	b.n	8008018 <UART_SetConfig+0x5c4>
 8008012:	2380      	movs	r3, #128	; 0x80
 8008014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a25      	ldr	r2, [pc, #148]	; (80080b4 <UART_SetConfig+0x660>)
 800801e:	4293      	cmp	r3, r2
 8008020:	f040 80ad 	bne.w	800817e <UART_SetConfig+0x72a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008028:	2b08      	cmp	r3, #8
 800802a:	d019      	beq.n	8008060 <UART_SetConfig+0x60c>
 800802c:	2b08      	cmp	r3, #8
 800802e:	dc04      	bgt.n	800803a <UART_SetConfig+0x5e6>
 8008030:	2b02      	cmp	r3, #2
 8008032:	d009      	beq.n	8008048 <UART_SetConfig+0x5f4>
 8008034:	2b04      	cmp	r3, #4
 8008036:	d00b      	beq.n	8008050 <UART_SetConfig+0x5fc>
 8008038:	e042      	b.n	80080c0 <UART_SetConfig+0x66c>
 800803a:	2b20      	cmp	r3, #32
 800803c:	d02b      	beq.n	8008096 <UART_SetConfig+0x642>
 800803e:	2b40      	cmp	r3, #64	; 0x40
 8008040:	d02c      	beq.n	800809c <UART_SetConfig+0x648>
 8008042:	2b10      	cmp	r3, #16
 8008044:	d014      	beq.n	8008070 <UART_SetConfig+0x61c>
 8008046:	e03b      	b.n	80080c0 <UART_SetConfig+0x66c>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008048:	f7fe fc48 	bl	80068dc <HAL_RCCEx_GetD3PCLK1Freq>
 800804c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800804e:	e03d      	b.n	80080cc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008050:	f107 0314 	add.w	r3, r7, #20
 8008054:	4618      	mov	r0, r3
 8008056:	f7fe fc57 	bl	8006908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800805e:	e035      	b.n	80080cc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008060:	f107 0308 	add.w	r3, r7, #8
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe fd9b 	bl	8006ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800806e:	e02d      	b.n	80080cc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008070:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <UART_SetConfig+0x654>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <UART_SetConfig+0x63c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800807c:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <UART_SetConfig+0x654>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	08db      	lsrs	r3, r3, #3
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	4a0c      	ldr	r2, [pc, #48]	; (80080b8 <UART_SetConfig+0x664>)
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
 800808c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800808e:	e01d      	b.n	80080cc <UART_SetConfig+0x678>
          pclk = (uint32_t) HSI_VALUE;
 8008090:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <UART_SetConfig+0x664>)
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008094:	e01a      	b.n	80080cc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <UART_SetConfig+0x668>)
 8008098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800809a:	e017      	b.n	80080cc <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800809c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080a2:	e013      	b.n	80080cc <UART_SetConfig+0x678>
 80080a4:	40011400 	.word	0x40011400
 80080a8:	58024400 	.word	0x58024400
 80080ac:	40007800 	.word	0x40007800
 80080b0:	40007c00 	.word	0x40007c00
 80080b4:	58000c00 	.word	0x58000c00
 80080b8:	03d09000 	.word	0x03d09000
 80080bc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80080ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 8243 	beq.w	800855a <UART_SetConfig+0xb06>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	4aa8      	ldr	r2, [pc, #672]	; (800837c <UART_SetConfig+0x928>)
 80080da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080de:	461a      	mov	r2, r3
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	4613      	mov	r3, r2
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	441a      	add	r2, r3
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d805      	bhi.n	8008104 <UART_SetConfig+0x6b0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	429a      	cmp	r2, r3
 8008102:	d203      	bcs.n	800810c <UART_SetConfig+0x6b8>
      {
        ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800810a:	e226      	b.n	800855a <UART_SetConfig+0xb06>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	4618      	mov	r0, r3
 8008110:	f04f 0100 	mov.w	r1, #0
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	4a98      	ldr	r2, [pc, #608]	; (800837c <UART_SetConfig+0x928>)
 800811a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800811e:	b29a      	uxth	r2, r3
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	f7f8 f8d8 	bl	80002d8 <__aeabi_uldivmod>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	021d      	lsls	r5, r3, #8
 800812e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8008132:	0214      	lsls	r4, r2, #8
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	085b      	lsrs	r3, r3, #1
 800813a:	461a      	mov	r2, r3
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	18a0      	adds	r0, r4, r2
 8008142:	eb45 0103 	adc.w	r1, r5, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f04f 0400 	mov.w	r4, #0
 800814e:	461a      	mov	r2, r3
 8008150:	4623      	mov	r3, r4
 8008152:	f7f8 f8c1 	bl	80002d8 <__aeabi_uldivmod>
 8008156:	4603      	mov	r3, r0
 8008158:	460c      	mov	r4, r1
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008162:	d308      	bcc.n	8008176 <UART_SetConfig+0x722>
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800816a:	d204      	bcs.n	8008176 <UART_SetConfig+0x722>
        {
          huart->Instance->BRR = usartdiv;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008172:	60da      	str	r2, [r3, #12]
 8008174:	e1f1      	b.n	800855a <UART_SetConfig+0xb06>
        }
        else
        {
          ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800817c:	e1ed      	b.n	800855a <UART_SetConfig+0xb06>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008186:	f040 8101 	bne.w	800838c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800818a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	f200 80b8 	bhi.w	8008304 <UART_SetConfig+0x8b0>
 8008194:	a201      	add	r2, pc, #4	; (adr r2, 800819c <UART_SetConfig+0x748>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	080082a1 	.word	0x080082a1
 80081a0:	080082a9 	.word	0x080082a9
 80081a4:	08008305 	.word	0x08008305
 80081a8:	08008305 	.word	0x08008305
 80081ac:	080082b1 	.word	0x080082b1
 80081b0:	08008305 	.word	0x08008305
 80081b4:	08008305 	.word	0x08008305
 80081b8:	08008305 	.word	0x08008305
 80081bc:	080082c1 	.word	0x080082c1
 80081c0:	08008305 	.word	0x08008305
 80081c4:	08008305 	.word	0x08008305
 80081c8:	08008305 	.word	0x08008305
 80081cc:	08008305 	.word	0x08008305
 80081d0:	08008305 	.word	0x08008305
 80081d4:	08008305 	.word	0x08008305
 80081d8:	08008305 	.word	0x08008305
 80081dc:	080082d1 	.word	0x080082d1
 80081e0:	08008305 	.word	0x08008305
 80081e4:	08008305 	.word	0x08008305
 80081e8:	08008305 	.word	0x08008305
 80081ec:	08008305 	.word	0x08008305
 80081f0:	08008305 	.word	0x08008305
 80081f4:	08008305 	.word	0x08008305
 80081f8:	08008305 	.word	0x08008305
 80081fc:	08008305 	.word	0x08008305
 8008200:	08008305 	.word	0x08008305
 8008204:	08008305 	.word	0x08008305
 8008208:	08008305 	.word	0x08008305
 800820c:	08008305 	.word	0x08008305
 8008210:	08008305 	.word	0x08008305
 8008214:	08008305 	.word	0x08008305
 8008218:	08008305 	.word	0x08008305
 800821c:	080082f7 	.word	0x080082f7
 8008220:	08008305 	.word	0x08008305
 8008224:	08008305 	.word	0x08008305
 8008228:	08008305 	.word	0x08008305
 800822c:	08008305 	.word	0x08008305
 8008230:	08008305 	.word	0x08008305
 8008234:	08008305 	.word	0x08008305
 8008238:	08008305 	.word	0x08008305
 800823c:	08008305 	.word	0x08008305
 8008240:	08008305 	.word	0x08008305
 8008244:	08008305 	.word	0x08008305
 8008248:	08008305 	.word	0x08008305
 800824c:	08008305 	.word	0x08008305
 8008250:	08008305 	.word	0x08008305
 8008254:	08008305 	.word	0x08008305
 8008258:	08008305 	.word	0x08008305
 800825c:	08008305 	.word	0x08008305
 8008260:	08008305 	.word	0x08008305
 8008264:	08008305 	.word	0x08008305
 8008268:	08008305 	.word	0x08008305
 800826c:	08008305 	.word	0x08008305
 8008270:	08008305 	.word	0x08008305
 8008274:	08008305 	.word	0x08008305
 8008278:	08008305 	.word	0x08008305
 800827c:	08008305 	.word	0x08008305
 8008280:	08008305 	.word	0x08008305
 8008284:	08008305 	.word	0x08008305
 8008288:	08008305 	.word	0x08008305
 800828c:	08008305 	.word	0x08008305
 8008290:	08008305 	.word	0x08008305
 8008294:	08008305 	.word	0x08008305
 8008298:	08008305 	.word	0x08008305
 800829c:	080082fd 	.word	0x080082fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a0:	f7fd fbf2 	bl	8005a88 <HAL_RCC_GetPCLK1Freq>
 80082a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80082a6:	e033      	b.n	8008310 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082a8:	f7fd fc04 	bl	8005ab4 <HAL_RCC_GetPCLK2Freq>
 80082ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80082ae:	e02f      	b.n	8008310 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fb27 	bl	8006908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082be:	e027      	b.n	8008310 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c0:	f107 0308 	add.w	r3, r7, #8
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fc6b 	bl	8006ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082ce:	e01f      	b.n	8008310 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082d0:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <UART_SetConfig+0x92c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <UART_SetConfig+0x89c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082dc:	4b28      	ldr	r3, [pc, #160]	; (8008380 <UART_SetConfig+0x92c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	08db      	lsrs	r3, r3, #3
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	4a27      	ldr	r2, [pc, #156]	; (8008384 <UART_SetConfig+0x930>)
 80082e8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082ee:	e00f      	b.n	8008310 <UART_SetConfig+0x8bc>
          pclk = (uint32_t) HSI_VALUE;
 80082f0:	4b24      	ldr	r3, [pc, #144]	; (8008384 <UART_SetConfig+0x930>)
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082f4:	e00c      	b.n	8008310 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082f6:	4b24      	ldr	r3, [pc, #144]	; (8008388 <UART_SetConfig+0x934>)
 80082f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082fa:	e009      	b.n	8008310 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008302:	e005      	b.n	8008310 <UART_SetConfig+0x8bc>
      default:
        pclk = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800830e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 8121 	beq.w	800855a <UART_SetConfig+0xb06>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	4a17      	ldr	r2, [pc, #92]	; (800837c <UART_SetConfig+0x928>)
 800831e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008322:	461a      	mov	r2, r3
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	fbb3 f3f2 	udiv	r3, r3, r2
 800832a:	005a      	lsls	r2, r3, #1
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	085b      	lsrs	r3, r3, #1
 8008332:	441a      	add	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	fbb2 f3f3 	udiv	r3, r2, r3
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	2b0f      	cmp	r3, #15
 8008342:	d916      	bls.n	8008372 <UART_SetConfig+0x91e>
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800834a:	d212      	bcs.n	8008372 <UART_SetConfig+0x91e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	b29b      	uxth	r3, r3
 8008350:	f023 030f 	bic.w	r3, r3, #15
 8008354:	847b      	strh	r3, [r7, #34]	; 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	085b      	lsrs	r3, r3, #1
 800835a:	b29b      	uxth	r3, r3
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	b29a      	uxth	r2, r3
 8008362:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008364:	4313      	orrs	r3, r2
 8008366:	847b      	strh	r3, [r7, #34]	; 0x22
        huart->Instance->BRR = brrtemp;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800836e:	60da      	str	r2, [r3, #12]
 8008370:	e0f3      	b.n	800855a <UART_SetConfig+0xb06>
      }
      else
      {
        ret = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008378:	e0ef      	b.n	800855a <UART_SetConfig+0xb06>
 800837a:	bf00      	nop
 800837c:	08008f20 	.word	0x08008f20
 8008380:	58024400 	.word	0x58024400
 8008384:	03d09000 	.word	0x03d09000
 8008388:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800838c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008390:	2b40      	cmp	r3, #64	; 0x40
 8008392:	f200 80b7 	bhi.w	8008504 <UART_SetConfig+0xab0>
 8008396:	a201      	add	r2, pc, #4	; (adr r2, 800839c <UART_SetConfig+0x948>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	080084a1 	.word	0x080084a1
 80083a0:	080084a9 	.word	0x080084a9
 80083a4:	08008505 	.word	0x08008505
 80083a8:	08008505 	.word	0x08008505
 80083ac:	080084b1 	.word	0x080084b1
 80083b0:	08008505 	.word	0x08008505
 80083b4:	08008505 	.word	0x08008505
 80083b8:	08008505 	.word	0x08008505
 80083bc:	080084c1 	.word	0x080084c1
 80083c0:	08008505 	.word	0x08008505
 80083c4:	08008505 	.word	0x08008505
 80083c8:	08008505 	.word	0x08008505
 80083cc:	08008505 	.word	0x08008505
 80083d0:	08008505 	.word	0x08008505
 80083d4:	08008505 	.word	0x08008505
 80083d8:	08008505 	.word	0x08008505
 80083dc:	080084d1 	.word	0x080084d1
 80083e0:	08008505 	.word	0x08008505
 80083e4:	08008505 	.word	0x08008505
 80083e8:	08008505 	.word	0x08008505
 80083ec:	08008505 	.word	0x08008505
 80083f0:	08008505 	.word	0x08008505
 80083f4:	08008505 	.word	0x08008505
 80083f8:	08008505 	.word	0x08008505
 80083fc:	08008505 	.word	0x08008505
 8008400:	08008505 	.word	0x08008505
 8008404:	08008505 	.word	0x08008505
 8008408:	08008505 	.word	0x08008505
 800840c:	08008505 	.word	0x08008505
 8008410:	08008505 	.word	0x08008505
 8008414:	08008505 	.word	0x08008505
 8008418:	08008505 	.word	0x08008505
 800841c:	080084f7 	.word	0x080084f7
 8008420:	08008505 	.word	0x08008505
 8008424:	08008505 	.word	0x08008505
 8008428:	08008505 	.word	0x08008505
 800842c:	08008505 	.word	0x08008505
 8008430:	08008505 	.word	0x08008505
 8008434:	08008505 	.word	0x08008505
 8008438:	08008505 	.word	0x08008505
 800843c:	08008505 	.word	0x08008505
 8008440:	08008505 	.word	0x08008505
 8008444:	08008505 	.word	0x08008505
 8008448:	08008505 	.word	0x08008505
 800844c:	08008505 	.word	0x08008505
 8008450:	08008505 	.word	0x08008505
 8008454:	08008505 	.word	0x08008505
 8008458:	08008505 	.word	0x08008505
 800845c:	08008505 	.word	0x08008505
 8008460:	08008505 	.word	0x08008505
 8008464:	08008505 	.word	0x08008505
 8008468:	08008505 	.word	0x08008505
 800846c:	08008505 	.word	0x08008505
 8008470:	08008505 	.word	0x08008505
 8008474:	08008505 	.word	0x08008505
 8008478:	08008505 	.word	0x08008505
 800847c:	08008505 	.word	0x08008505
 8008480:	08008505 	.word	0x08008505
 8008484:	08008505 	.word	0x08008505
 8008488:	08008505 	.word	0x08008505
 800848c:	08008505 	.word	0x08008505
 8008490:	08008505 	.word	0x08008505
 8008494:	08008505 	.word	0x08008505
 8008498:	08008505 	.word	0x08008505
 800849c:	080084fd 	.word	0x080084fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084a0:	f7fd faf2 	bl	8005a88 <HAL_RCC_GetPCLK1Freq>
 80084a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80084a6:	e033      	b.n	8008510 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a8:	f7fd fb04 	bl	8005ab4 <HAL_RCC_GetPCLK2Freq>
 80084ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80084ae:	e02f      	b.n	8008510 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe fa27 	bl	8006908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084be:	e027      	b.n	8008510 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084c0:	f107 0308 	add.w	r3, r7, #8
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fb6b 	bl	8006ba0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084ce:	e01f      	b.n	8008510 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084d0:	4b2c      	ldr	r3, [pc, #176]	; (8008584 <UART_SetConfig+0xb30>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0320 	and.w	r3, r3, #32
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <UART_SetConfig+0xa9c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084dc:	4b29      	ldr	r3, [pc, #164]	; (8008584 <UART_SetConfig+0xb30>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	08db      	lsrs	r3, r3, #3
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	4a28      	ldr	r2, [pc, #160]	; (8008588 <UART_SetConfig+0xb34>)
 80084e8:	fa22 f303 	lsr.w	r3, r2, r3
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084ee:	e00f      	b.n	8008510 <UART_SetConfig+0xabc>
          pclk = (uint32_t) HSI_VALUE;
 80084f0:	4b25      	ldr	r3, [pc, #148]	; (8008588 <UART_SetConfig+0xb34>)
 80084f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084f4:	e00c      	b.n	8008510 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084f6:	4b25      	ldr	r3, [pc, #148]	; (800858c <UART_SetConfig+0xb38>)
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084fa:	e009      	b.n	8008510 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008500:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008502:	e005      	b.n	8008510 <UART_SetConfig+0xabc>
      default:
        pclk = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800850e:	bf00      	nop
    }

    if (pclk != 0U)
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	2b00      	cmp	r3, #0
 8008514:	d021      	beq.n	800855a <UART_SetConfig+0xb06>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	4a1d      	ldr	r2, [pc, #116]	; (8008590 <UART_SetConfig+0xb3c>)
 800851c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008520:	461a      	mov	r2, r3
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	fbb3 f2f2 	udiv	r2, r3, r2
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	085b      	lsrs	r3, r3, #1
 800852e:	441a      	add	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	fbb2 f3f3 	udiv	r3, r2, r3
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	2b0f      	cmp	r3, #15
 800853e:	d909      	bls.n	8008554 <UART_SetConfig+0xb00>
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008546:	d205      	bcs.n	8008554 <UART_SetConfig+0xb00>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854e:	b292      	uxth	r2, r2
 8008550:	60da      	str	r2, [r3, #12]
 8008552:	e002      	b.n	800855a <UART_SetConfig+0xb06>
      }
      else
      {
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008576:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800857a:	4618      	mov	r0, r3
 800857c:	3738      	adds	r7, #56	; 0x38
 800857e:	46bd      	mov	sp, r7
 8008580:	bdb0      	pop	{r4, r5, r7, pc}
 8008582:	bf00      	nop
 8008584:	58024400 	.word	0x58024400
 8008588:	03d09000 	.word	0x03d09000
 800858c:	003d0900 	.word	0x003d0900
 8008590:	08008f20 	.word	0x08008f20

08008594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	6812      	ldr	r2, [r2, #0]
 80085b0:	6852      	ldr	r2, [r2, #4]
 80085b2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80085ba:	430a      	orrs	r2, r1
 80085bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	6852      	ldr	r2, [r2, #4]
 80085d4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80085dc:	430a      	orrs	r2, r1
 80085de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	6852      	ldr	r2, [r2, #4]
 80085f6:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085fe:	430a      	orrs	r2, r1
 8008600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	f003 0308 	and.w	r3, r3, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6812      	ldr	r2, [r2, #0]
 8008616:	6852      	ldr	r2, [r2, #4]
 8008618:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008620:	430a      	orrs	r2, r1
 8008622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	f003 0310 	and.w	r3, r3, #16
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00a      	beq.n	8008646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6812      	ldr	r2, [r2, #0]
 8008638:	6892      	ldr	r2, [r2, #8]
 800863a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008642:	430a      	orrs	r2, r1
 8008644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6812      	ldr	r2, [r2, #0]
 800865a:	6892      	ldr	r2, [r2, #8]
 800865c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008664:	430a      	orrs	r2, r1
 8008666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	d01a      	beq.n	80086aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6812      	ldr	r2, [r2, #0]
 800867c:	6852      	ldr	r2, [r2, #4]
 800867e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008686:	430a      	orrs	r2, r1
 8008688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008692:	d10a      	bne.n	80086aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	6852      	ldr	r2, [r2, #4]
 800869e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	6852      	ldr	r2, [r2, #4]
 80086c0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80086c8:	430a      	orrs	r2, r1
 80086ca:	605a      	str	r2, [r3, #4]
  }
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af02      	add	r7, sp, #8
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086e8:	f7f8 fc92 	bl	8001010 <HAL_GetTick>
 80086ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d10e      	bne.n	800871a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f82f 	bl	800876e <UART_WaitOnFlagUntilTimeout>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e025      	b.n	8008766 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b04      	cmp	r3, #4
 8008726:	d10e      	bne.n	8008746 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f819 	bl	800876e <UART_WaitOnFlagUntilTimeout>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e00f      	b.n	8008766 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2220      	movs	r2, #32
 800874a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b09c      	sub	sp, #112	; 0x70
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	603b      	str	r3, [r7, #0]
 800877a:	4613      	mov	r3, r2
 800877c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800877e:	e0a9      	b.n	80088d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008786:	f000 80a5 	beq.w	80088d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800878a:	f7f8 fc41 	bl	8001010 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	1ad2      	subs	r2, r2, r3
 8008794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008796:	429a      	cmp	r2, r3
 8008798:	d802      	bhi.n	80087a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800879a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800879c:	2b00      	cmp	r3, #0
 800879e:	d140      	bne.n	8008822 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087b4:	667b      	str	r3, [r7, #100]	; 0x64
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80087cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e6      	bne.n	80087a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3308      	adds	r3, #8
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	f023 0301 	bic.w	r3, r3, #1
 80087e8:	663b      	str	r3, [r7, #96]	; 0x60
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3308      	adds	r3, #8
 80087f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80087f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e5      	bne.n	80087d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2220      	movs	r2, #32
 800880a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e069      	b.n	80088f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d051      	beq.n	80088d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800883a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800883e:	d149      	bne.n	80088d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008848:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800885e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008868:	637b      	str	r3, [r7, #52]	; 0x34
 800886a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800886e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e6      	bne.n	800884a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	613b      	str	r3, [r7, #16]
   return(result);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f023 0301 	bic.w	r3, r3, #1
 8008892:	66bb      	str	r3, [r7, #104]	; 0x68
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3308      	adds	r3, #8
 800889a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800889c:	623a      	str	r2, [r7, #32]
 800889e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	69f9      	ldr	r1, [r7, #28]
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e5      	bne.n	800887c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e010      	b.n	80088f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	69da      	ldr	r2, [r3, #28]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	401a      	ands	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	bf0c      	ite	eq
 80088e4:	2301      	moveq	r3, #1
 80088e6:	2300      	movne	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	f43f af46 	beq.w	8008780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3770      	adds	r7, #112	; 0x70
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088fe:	b480      	push	{r7}
 8008900:	b08f      	sub	sp, #60	; 0x3c
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	61fb      	str	r3, [r7, #28]
   return(result);
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800891a:	637b      	str	r3, [r7, #52]	; 0x34
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008926:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800892a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3308      	adds	r3, #8
 800893e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	60bb      	str	r3, [r7, #8]
   return(result);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800894e:	633b      	str	r3, [r7, #48]	; 0x30
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3308      	adds	r3, #8
 8008956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008958:	61ba      	str	r2, [r7, #24]
 800895a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6979      	ldr	r1, [r7, #20]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	613b      	str	r3, [r7, #16]
   return(result);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e5      	bne.n	8008938 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2220      	movs	r2, #32
 8008970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008974:	bf00      	nop
 8008976:	373c      	adds	r7, #60	; 0x3c
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b095      	sub	sp, #84	; 0x54
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800899c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
 80089a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e6      	bne.n	8008988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <UART_EndRxTransfer+0xc8>)
 80089ce:	4013      	ands	r3, r2
 80089d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3308      	adds	r3, #8
 80089d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d118      	bne.n	8008a28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f023 0310 	bic.w	r3, r3, #16
 8008a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6979      	ldr	r1, [r7, #20]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	613b      	str	r3, [r7, #16]
   return(result);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008a3c:	bf00      	nop
 8008a3e:	3754      	adds	r7, #84	; 0x54
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	effffffe 	.word	0xeffffffe

08008a4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b090      	sub	sp, #64	; 0x40
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a62:	d037      	beq.n	8008ad4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3308      	adds	r3, #8
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8c:	633a      	str	r2, [r7, #48]	; 0x30
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e5      	bne.n	8008a6c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abe:	61fb      	str	r3, [r7, #28]
 8008ac0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	69b9      	ldr	r1, [r7, #24]
 8008ac4:	69fa      	ldr	r2, [r7, #28]
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	617b      	str	r3, [r7, #20]
   return(result);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e6      	bne.n	8008aa0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ad2:	e002      	b.n	8008ada <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008ad4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008ad6:	f7fe ff93 	bl	8007a00 <HAL_UART_TxCpltCallback>
}
 8008ada:	bf00      	nop
 8008adc:	3740      	adds	r7, #64	; 0x40
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7fe ff8f 	bl	8007a14 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008af6:	bf00      	nop
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b086      	sub	sp, #24
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b26:	2b80      	cmp	r3, #128	; 0x80
 8008b28:	d109      	bne.n	8008b3e <UART_DMAError+0x40>
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	2b21      	cmp	r3, #33	; 0x21
 8008b2e:	d106      	bne.n	8008b3e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008b38:	6978      	ldr	r0, [r7, #20]
 8008b3a:	f7ff fee0 	bl	80088fe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	d109      	bne.n	8008b60 <UART_DMAError+0x62>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b22      	cmp	r3, #34	; 0x22
 8008b50:	d106      	bne.n	8008b60 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f7ff ff10 	bl	8008980 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b66:	f043 0210 	orr.w	r2, r3, #16
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b70:	6978      	ldr	r0, [r7, #20]
 8008b72:	f7fe ff59 	bl	8007a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b76:	bf00      	nop
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7fe ff43 	bl	8007a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b088      	sub	sp, #32
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	e853 3f00 	ldrex	r3, [r3]
 8008bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc6:	61fb      	str	r3, [r7, #28]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	61bb      	str	r3, [r7, #24]
 8008bd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	6979      	ldr	r1, [r7, #20]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e6      	bne.n	8008bb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fe ff04 	bl	8007a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf8:	bf00      	nop
 8008bfa:	3720      	adds	r7, #32
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d101      	bne.n	8008c52 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e027      	b.n	8008ca2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2224      	movs	r2, #36	; 0x24
 8008c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	6812      	ldr	r2, [r2, #0]
 8008c72:	6812      	ldr	r2, [r2, #0]
 8008c74:	f022 0201 	bic.w	r2, r2, #1
 8008c78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d101      	bne.n	8008cc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e02d      	b.n	8008d22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2224      	movs	r2, #36	; 0x24
 8008cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	f022 0201 	bic.w	r2, r2, #1
 8008cec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6812      	ldr	r2, [r2, #0]
 8008cf6:	6892      	ldr	r2, [r2, #8]
 8008cf8:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f850 	bl	8008da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e02d      	b.n	8008d9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2224      	movs	r2, #36	; 0x24
 8008d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	6812      	ldr	r2, [r2, #0]
 8008d64:	f022 0201 	bic.w	r2, r2, #1
 8008d68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6812      	ldr	r2, [r2, #0]
 8008d72:	6892      	ldr	r2, [r2, #8]
 8008d74:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f812 	bl	8008da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d108      	bne.n	8008dca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dc8:	e031      	b.n	8008e2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dca:	2310      	movs	r3, #16
 8008dcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dce:	2310      	movs	r3, #16
 8008dd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	0e5b      	lsrs	r3, r3, #25
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	f003 0307 	and.w	r3, r3, #7
 8008de0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	0f5b      	lsrs	r3, r3, #29
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	7b3a      	ldrb	r2, [r7, #12]
 8008df6:	4911      	ldr	r1, [pc, #68]	; (8008e3c <UARTEx_SetNbDataToProcess+0x94>)
 8008df8:	5c8a      	ldrb	r2, [r1, r2]
 8008dfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008dfe:	7b3a      	ldrb	r2, [r7, #12]
 8008e00:	490f      	ldr	r1, [pc, #60]	; (8008e40 <UARTEx_SetNbDataToProcess+0x98>)
 8008e02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e04:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	7b7a      	ldrb	r2, [r7, #13]
 8008e14:	4909      	ldr	r1, [pc, #36]	; (8008e3c <UARTEx_SetNbDataToProcess+0x94>)
 8008e16:	5c8a      	ldrb	r2, [r1, r2]
 8008e18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e1c:	7b7a      	ldrb	r2, [r7, #13]
 8008e1e:	4908      	ldr	r1, [pc, #32]	; (8008e40 <UARTEx_SetNbDataToProcess+0x98>)
 8008e20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e22:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e2e:	bf00      	nop
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	08008f38 	.word	0x08008f38
 8008e40:	08008f40 	.word	0x08008f40

08008e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008e48:	f7f7 ffd4 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e4c:	480c      	ldr	r0, [pc, #48]	; (8008e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008e4e:	490d      	ldr	r1, [pc, #52]	; (8008e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008e50:	4a0d      	ldr	r2, [pc, #52]	; (8008e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e54:	e002      	b.n	8008e5c <LoopCopyDataInit>

08008e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e5a:	3304      	adds	r3, #4

08008e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e60:	d3f9      	bcc.n	8008e56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e62:	4a0a      	ldr	r2, [pc, #40]	; (8008e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008e64:	4c0a      	ldr	r4, [pc, #40]	; (8008e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e68:	e001      	b.n	8008e6e <LoopFillZerobss>

08008e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e6c:	3204      	adds	r2, #4

08008e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e70:	d3fb      	bcc.n	8008e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008e72:	f000 f811 	bl	8008e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e76:	f7f7 fbb7 	bl	80005e8 <main>
  bx  lr
 8008e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8008e88:	08008f58 	.word	0x08008f58
  ldr r2, =_sbss
 8008e8c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8008e90:	200002e8 	.word	0x200002e8

08008e94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e94:	e7fe      	b.n	8008e94 <ADC3_IRQHandler>
	...

08008e98 <__libc_init_array>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	4e0d      	ldr	r6, [pc, #52]	; (8008ed0 <__libc_init_array+0x38>)
 8008e9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ed4 <__libc_init_array+0x3c>)
 8008e9e:	1ba4      	subs	r4, r4, r6
 8008ea0:	10a4      	asrs	r4, r4, #2
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	42a5      	cmp	r5, r4
 8008ea6:	d109      	bne.n	8008ebc <__libc_init_array+0x24>
 8008ea8:	4e0b      	ldr	r6, [pc, #44]	; (8008ed8 <__libc_init_array+0x40>)
 8008eaa:	4c0c      	ldr	r4, [pc, #48]	; (8008edc <__libc_init_array+0x44>)
 8008eac:	f000 f820 	bl	8008ef0 <_init>
 8008eb0:	1ba4      	subs	r4, r4, r6
 8008eb2:	10a4      	asrs	r4, r4, #2
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	42a5      	cmp	r5, r4
 8008eb8:	d105      	bne.n	8008ec6 <__libc_init_array+0x2e>
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ec0:	4798      	blx	r3
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	e7ee      	b.n	8008ea4 <__libc_init_array+0xc>
 8008ec6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eca:	4798      	blx	r3
 8008ecc:	3501      	adds	r5, #1
 8008ece:	e7f2      	b.n	8008eb6 <__libc_init_array+0x1e>
 8008ed0:	08008f50 	.word	0x08008f50
 8008ed4:	08008f50 	.word	0x08008f50
 8008ed8:	08008f50 	.word	0x08008f50
 8008edc:	08008f54 	.word	0x08008f54

08008ee0 <memset>:
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d100      	bne.n	8008eea <memset+0xa>
 8008ee8:	4770      	bx	lr
 8008eea:	f803 1b01 	strb.w	r1, [r3], #1
 8008eee:	e7f9      	b.n	8008ee4 <memset+0x4>

08008ef0 <_init>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	bf00      	nop
 8008ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef6:	bc08      	pop	{r3}
 8008ef8:	469e      	mov	lr, r3
 8008efa:	4770      	bx	lr

08008efc <_fini>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	bf00      	nop
 8008f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f02:	bc08      	pop	{r3}
 8008f04:	469e      	mov	lr, r3
 8008f06:	4770      	bx	lr
